<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>PLib</name>
    </assembly>
    <members>
        <member name="T:PeterHan.PLib.Actions.PAction">
            <summary>
            An Action managed by PLib. Actions have key bindings assigned to them.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Actions.PAction.MaxAction">
            <summary>
            The maximum action value (typically used to mean "no action") used in the currently
            running instance of the game.
            
            Since Action is compiled to a const int when a mod is built, any changes to the
            Action enum will break direct references to Action.NumActions. Use this property
            instead to always use the intended "no action" value.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Actions.PAction.DefaultBinding">
            <summary>
            The default key binding for this action. Not necessarily the current key binding.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Actions.PAction.Identifier">
            <summary>
            The action's non-localized identifier. Something like YOURMOD.CATEGORY.ACTIONNAME.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Actions.PAction.id">
            <summary>
            The action's ID. This ID is assigned internally upon register and used for PLib
            indexing. Even if you somehow obtain it in your mod, it is not to be used!
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Actions.PAction.Title">
            <summary>
            The action's title.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Actions.PAction.GetKAction">
            <summary>
            Retrieves the Klei action for this PAction.
            </summary>
            <returns>The Klei action for use in game functions.</returns>
        </member>
        <member name="T:PeterHan.PLib.Actions.PActionManager">
            <summary>
            Manages PAction functionality which must be single instance.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Actions.PActionManager.NewEntry">
            <summary>
            Prototypes the required parameters for new BindingEntry() since they changed in
            U39-489490.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Actions.PActionManager.CATEGORY">
            <summary>
            The category used for all PLib keys.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Actions.PActionManager.NEW_BINDING_ENTRY">
            <summary>
            Creates a new BindingEntry.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Actions.PActionManager.VERSION">
            <summary>
            The version of this component. Uses the running PLib version.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Actions.PActionManager.Instance">
            <summary>
            The instantiated copy of this class.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Actions.PActionManager.AssignKeyBindings">
            <summary>
            Assigns the key bindings to each Action when they are needed.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Actions.PActionManager.ExtendFlags(System.Boolean[],System.Int32)">
            <summary>
            Extends the action flags array to the new maximum length.
            </summary>
            <param name="oldActionFlags">The old flags array.</param>
            <param name="newMax">The minimum length.</param>
            <returns>The new action flags array.</returns>
        </member>
        <member name="M:PeterHan.PLib.Actions.PActionManager.FindKeyBinding(System.Collections.Generic.IEnumerable{BindingEntry},Action)">
            <summary>
            Checks to see if an action is already bound to a key.
            </summary>
            <param name="currentBindings">The current key bindings.</param>
            <param name="action">The action to look up.</param>
            <returns>true if the action already has a binding assigned, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.Actions.PActionManager.GetBindingTitle(System.String,System.String)">
            <summary>
            Retrieves a Klei key binding title.
            </summary>
            <param name="category">The category of the key binding.</param>
            <param name="item">The key binding to retrieve.</param>
            <returns>The Strings entry describing this key binding.</returns>
        </member>
        <member name="M:PeterHan.PLib.Actions.PActionManager.GetExtraKeycodeLocalized(KKeyCode)">
            <summary>
            Retrieves a "localized" (if PLib is localized) description of additional key codes
            from the KKeyCode enumeration, to avoid warning spam on popular keybinds like
            arrow keys, delete, home, and so forth.
            </summary>
            <param name="code">The key code.</param>
            <returns>A description of that key code, or null if no localization is found.</returns>
        </member>
        <member name="M:PeterHan.PLib.Actions.PActionManager.LogKeyBind(System.String)">
            <summary>
            Logs a message encountered by the PLib key binding system.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:PeterHan.PLib.Actions.PActionManager.LogKeyBindWarning(System.String)">
            <summary>
            Logs a warning encountered by the PLib key binding system.
            </summary>
            <param name="message">The warning message.</param>
        </member>
        <member name="F:PeterHan.PLib.Actions.PActionManager.actions">
            <summary>
            Queued key binds which are resolved on load.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Actions.PActionManager.maxAction">
            <summary>
            The maximum action index of any custom action registered across all mods.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Actions.PActionManager.#ctor">
            <summary>
            Creates a new action manager used to create and assign custom actions. Due to the
            timing of when the user's key bindings are loaded, all actions must be added in
            OnLoad().
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Actions.PActionManager.CreateAction(System.String,LocString,PeterHan.PLib.Actions.PKeyBinding)">
            <summary>
            Registers a PAction with the action manager.
            
            This call should occur after PUtil.InitLibrary() during the mod OnLoad(). If called
            earlier, it may fail with InvalidOperationException, and if called later, the
            user's custom key bind (if applicable) will be discarded.
            </summary>
            <param name="identifier">The identifier for this action.</param>
            <param name="title">The action's title. If null, the default value from
            STRINGS.INPUT_BINDINGS.PLIB.identifier will be used instead.</param>
            <param name="binding">The default key binding for this action. If null, no key will
            be bound by default, but the user can set a key bind.</param>
            <returns>The action thus registered.</returns>
        </member>
        <member name="M:PeterHan.PLib.Actions.PActionManager.GetMaxAction">
            <summary>
            Returns the maximum length of the Action enum, including custom actions. If no
            actions are defined, returns NumActions - 1 since NumActions is reserved in the
            base game.
            
            This value will not be accurate until all mods have loaded and key binds
            registered (AfterLayerableLoad or later such as BeforeDbInit).
            </summary>
            <returns>The maximum length required to represent all Actions.</returns>
        </member>
        <member name="M:PeterHan.PLib.Actions.PActionManager.UpdateMaxAction">
            <summary>
            Updates the maximum action for this instance.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Actions.PKeyBinding">
            <summary>
            Represents a single key binding to an action.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Actions.PKeyBinding.GamePadButton">
            <summary>
            The gamepad button to bind.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Actions.PKeyBinding.Key">
            <summary>
            The key code.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Actions.PKeyBinding.Modifiers">
            <summary>
            The modifier code.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Actions.PToolMode">
            <summary>
            A tool mode used in custom tool menus. Shown in the options in the bottom right.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Actions.PToolMode.PopulateMenu(ToolParameterMenu,System.Collections.Generic.ICollection{PeterHan.PLib.Actions.PToolMode})">
            <summary>
            Sets up tool options in the tool parameter menu.
            </summary>
            <param name="menu">The menu to configure.</param>
            <param name="options">The available modes.</param>
            <returns>A dictionary which is updated in real time to contain the actual state of each mode.</returns>
        </member>
        <member name="M:PeterHan.PLib.Actions.PToolMode.RegisterTool``1(PlayerController)">
            <summary>
            Registers a tool with the game. It still must be added to a tool collection to be
            visible.
            </summary>
            <typeparam name="T">The tool type to register.</typeparam>
            <param name="controller">The player controller which will be its parent; consider
            using in a postfix on PlayerController.OnPrefabInit.</param>
        </member>
        <member name="P:PeterHan.PLib.Actions.PToolMode.Key">
            <summary>
            A unique key used to identify this mode.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Actions.PToolMode.State">
            <summary>
            The current state of this tool mode.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Actions.PToolMode.Title">
            <summary>
            The title displayed on-screen for this mode.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Actions.PToolMode.#ctor(System.String,LocString,ToolParameterMenu.ToggleState)">
            <summary>
            Creates a new tool mode entry.
            </summary>
            <param name="key">The key which identifies this tool mode.</param>
            <param name="title">The title to be displayed. If null, the title will be taken
            from the default location in STRINGS.UI.TOOLS.FILTERLAYERS.</param>
            <param name="state">The initial state, default Off.</param>
        </member>
        <member name="T:PeterHan.PLib.AVC.IModVersionChecker">
            <summary>
            Implemented by classes which can check the current mod version and detect if it is out
            of date.
            </summary>
        </member>
        <member name="E:PeterHan.PLib.AVC.IModVersionChecker.OnVersionCheckCompleted">
            <summary>
            The event to subscribe for when the check completes.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.AVC.IModVersionChecker.CheckVersion(KMod.Mod)">
            <summary>
            Checks the mod and reports if it is out of date. The mod's current version as
            reported by its mod_info.yaml file is available on the packagedModInfo member.
            
            This method might not be run on the foreground thread. Do not create new behaviors
            or components without a coroutine to an existing GameObject.
            </summary>
            <param name="mod">The mod whose version is being checked.</param>
            <returns>true if the version check has started, or false if it could not be
            started, which will trigger the next version checker in line.</returns>
        </member>
        <member name="T:PeterHan.PLib.AVC.JsonURLVersionChecker">
            <summary>
            Checks the mod version using a URL to a JSON file. The file at this URL must resolve
            to a JSON file which can deserialize to the JsonURLVersionChecker.ModVersions class.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.AVC.JsonURLVersionChecker.REQUEST_TIMEOUT">
            <summary>
            The timeout in seconds for the web request before declaring the check as failed.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.AVC.JsonURLVersionChecker.JsonVersionURL">
            <summary>
            The URL to query for checking the mod version.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.AVC.JsonURLVersionChecker.OnRequestFinished(UnityEngine.Networking.UnityWebRequest,KMod.Mod)">
            <summary>
            When a web request completes, triggers the handler for the next updater.
            </summary>
            <param name="request">The JSON web request data.</param>
            <param name="mod">The mod that needs to be checked.</param>
        </member>
        <member name="M:PeterHan.PLib.AVC.JsonURLVersionChecker.ParseModVersion(KMod.Mod,PeterHan.PLib.AVC.JsonURLVersionChecker.ModVersions)">
            <summary>
            Parses the JSON file and looks up the version for the specified mod.
            </summary>
            <param name="mod">The mod's static ID.</param>
            <param name="versions">The data from the web JSON file.</param>
            <returns>The results of the update, or null if the mod could not be found in the
            JSON.</returns>
        </member>
        <member name="T:PeterHan.PLib.AVC.JsonURLVersionChecker.ModVersions">
            <summary>
            The serialization type for JSONURLVersionChecker. Allows multiple mods to query
            the same URL.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.AVC.JsonURLVersionChecker.ModVersion">
            <summary>
            Represents the current version of each mod.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.AVC.JsonURLVersionChecker.ModVersion.staticID">
            <summary>
            The mod's static ID, as reported by its mod.yaml. If a mod does not specify its
            static ID, it gets the default ID mod.label.id + "_" + mod.label.
            distribution_platform.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.AVC.JsonURLVersionChecker.ModVersion.version">
            <summary>
            The mod's current version.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.AVC.ModOutdatedWarning">
            <summary>
            Added to the main menu to warn users if mods are out of date.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.AVC.ModOutdatedWarning.Instance">
            <summary>
            The singleton (should be!) instance of this class.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.AVC.ModOutdatedWarning.modsButton">
            <summary>
            The button used to open the Mods screen.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.AVC.ModOutdatedWarning.FindModsButton(UnityEngine.Transform)">
            <summary>
            Finds the "Mods" button and stores it in the modsButton field.
            </summary>
            <param name="buttonParent">The parent of all the main menu buttons.</param>
        </member>
        <member name="M:PeterHan.PLib.AVC.ModOutdatedWarning.UpdateText">
            <summary>
            Updates the Mods button text.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.AVC.ModOutdatedWarning.UpdateTextThreaded">
            <summary>
            Updates the button text in a coroutine after one frame.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.AVC.ModVersionCheckResults">
            <summary>
            The results of checking the mod version.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.AVC.ModVersionCheckResults.IsUpToDate">
            <summary>
            true if the mod is up to date, or false if it is out of date.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.AVC.ModVersionCheckResults.ModChecked">
            <summary>
            The mod whose version was queried. The current mod version is available on this
            mod through its packagedModInfo.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.AVC.ModVersionCheckResults.NewVersion">
            <summary>
            The new version of this mod. If it is not available, it can be null, even if
            IsUpdated is false. Not relevant if IsUpToDate reports true.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.AVC.PVersionCheck">
            <summary>
            Implements a basic automatic version check, using either Steam or an external website.
            
            The version of the current mod is taken from the mod version attribute of the provided
            mod.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.AVC.PVersionCheck.OnVersionCheckComplete">
            <summary>
            The delegate type used when a background version check completes.
            </summary>
            <param name="result">The results of the check. If null, the check has failed,
            and the next version should be tried.</param>
        </member>
        <member name="F:PeterHan.PLib.AVC.PVersionCheck.WORKING_VERSION">
            <summary>
            Versions of PVersionCheck older than this version are broken and do not pass the
            linked list correctly.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.AVC.PVersionCheck.Instance">
            <summary>
            The instantiated copy of this class.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.AVC.PVersionCheck.VERSION">
            <summary>
            The version of this component. Uses the running PLib version.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.AVC.PVersionCheck.GetCurrentVersion(System.Reflection.Assembly)">
            <summary>
            Gets the reported version of the specified assembly.
            </summary>
            <param name="assembly">The assembly to check.</param>
            <returns>The assembly's file version, or if that is unset, its assembly version.</returns>
        </member>
        <member name="M:PeterHan.PLib.AVC.PVersionCheck.GetCurrentVersion(KMod.Mod)">
            <summary>
            Gets the current version of the mod. If the version is specified in mod_info.yaml,
            that version is reported. Otherwise, the assembly file version (and failing that,
            the assembly version) of the assembly defining the mod's first UserMod2 instance
            is reported.
            
            This method will only work after mods have loaded.
            </summary>
            <param name="mod">The mod to check.</param>
            <returns>The current version of that mod.</returns>
        </member>
        <member name="F:PeterHan.PLib.AVC.PVersionCheck.checkVersions">
            <summary>
            The mods whose version will be checked.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.AVC.PVersionCheck.OutdatedMods">
            <summary>
            The number of mods that appear to be outdated.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.AVC.PVersionCheck.results">
            <summary>
            The location where the outcome of mod version checking will be stored.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.AVC.PVersionCheck.resultsByMod">
            <summary>
            Stores results by the mod static ID. Only populated in the active instance.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.AVC.PVersionCheck.AddWarningIfOutdated(System.Object)">
            <summary>
            Adds a warning to the mods screen if a mod is outdated.
            </summary>
            <param name="modEntry">The mod entry to modify.</param>
        </member>
        <member name="M:PeterHan.PLib.AVC.PVersionCheck.AddWarningIfOutdated(PeterHan.PLib.AVC.ModVersionCheckResults,LocText)">
            <summary>
            Adds a warning to a mod version label if it is outdated.
            </summary>
            <param name="data">The updated mod version.</param>
            <param name="versionText">The current mod version label.</param>
        </member>
        <member name="M:PeterHan.PLib.AVC.PVersionCheck.Register(KMod.UserMod2,PeterHan.PLib.AVC.IModVersionChecker)">
            <summary>
            Registers the specified mod for automatic version checking. Mods will be registered
            using their static ID, so to avoid the default ID from being used instead, set this
            attribute in mod.yaml.
            
            The same mod can be registered multiple times with different methods to check the
            mod versions. The methods will be attempted in order from first registered to last.
            However, the same mod must not be registered multiple times in different instances
            of PVersionCheck.
            </summary>
            <param name="mod">The mod instance to check.</param>
            <param name="checker">The method to use for checking the mod version.</param>
        </member>
        <member name="M:PeterHan.PLib.AVC.PVersionCheck.ReportResults">
            <summary>
            Reports the results of the version check.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.AVC.PVersionCheck.RunVersionCheck">
            <summary>
            Starts the automatic version check for all mods.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.AVC.PVersionCheck.AllVersionCheckTask">
            <summary>
            Checks each mod's version one at a time to avoid saturating the network with
            generally nonessential traffic (in the case of yaml/json checkers).
            </summary>
        </member>
        <member name="F:PeterHan.PLib.AVC.PVersionCheck.AllVersionCheckTask.checkAllVersions">
            <summary>
            A list of actions that will check each version in turn.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.AVC.PVersionCheck.AllVersionCheckTask.index">
            <summary>
            The current location in the list.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.AVC.PVersionCheck.AllVersionCheckTask.parent">
            <summary>
            Handles version check result reporting when complete.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.AVC.PVersionCheck.AllVersionCheckTask.Run">
            <summary>
            Runs all checks and fires the callback when complete.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.AVC.PVersionCheck.VersionCheckMethods">
            <summary>
            A placeholder class which stores all methods used to check a single mod.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.AVC.PVersionCheck.VersionCheckMethods.Methods">
            <summary>
            The methods which will be used to check.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.AVC.PVersionCheck.VersionCheckMethods.ModToCheck">
            <summary>
            The mod whose version will be checked.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.AVC.SteamVersionChecker">
            <summary>
            Checks Steam to see if mods are out of date.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.AVC.SteamVersionChecker.PUBLISHED_FILE_ID">
            <summary>
            A reference to the PublishedFileId_t type, or null if running on the EGS/WeGame
            version.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.AVC.SteamVersionChecker.STEAM_UGC">
            <summary>
            A reference to the SteamUGC type, or null if running on the EGS/WeGame version.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.AVC.SteamVersionChecker.STEAM_UGC_SERVICE">
            <summary>
            A reference to the game's version of SteamUGCService, or null if running on the
            EGS/WeGame version.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.AVC.SteamVersionChecker.FIND_MOD">
            <summary>
            Detours requires knowing the types at compile time, which might not be available,
            and these methods are only called once at startup.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.AVC.SteamVersionChecker.UPDATE_JITTER">
            <summary>
            The number of minutes allowed before a mod is considered out of date.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.AVC.SteamVersionChecker.UNIX_EPOCH">
            <summary>
            The epoch time for Steam time stamps.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.AVC.SteamVersionChecker.CheckSteamInit(System.UInt64,System.Object[],KMod.Mod)">
            <summary>
            Checks to see if Steam is initialized yet.
            </summary>
            <param name="id">The mod's ID.</param>
            <param name="boxedID">The ID converted to a boxed PublishedFileId_t and stored in
            a single parameter array (for passing into the reflected function).</param>
            <param name="mod">The mod to check.</param>
            <returns>The results of the version check, or null if Steam has not populated it yet.</returns>
        </member>
        <member name="M:PeterHan.PLib.AVC.SteamVersionChecker.GetLocalLastModified(System.UInt64)">
            <summary>
            Gets the last modified date of a mod's local files. The time is returned in UTC.
            </summary>
            <param name="id">The mod ID to check.</param>
            <returns>The date and time of its last modification.</returns>
        </member>
        <member name="M:PeterHan.PLib.AVC.SteamVersionChecker.UnixEpochToDateTime(System.UInt64)">
            <summary>
            Converts a time from Steam (seconds since Unix epoch) to a C# DateTime.
            </summary>
            <param name="timeSeconds">The timestamp since the epoch.</param>
            <returns>The UTC date and time that it represents.</returns>
        </member>
        <member name="M:PeterHan.PLib.AVC.SteamVersionChecker.DoCheckVersion(KMod.Mod)">
            <summary>
            Checks the mod on Steam and reports if it is out of date. This helper method
            avoids a type load error if a non-Steam version of the game is used to load this
            mod.
            </summary>
            <param name="mod">The mod whose version is being checked.</param>
            <returns>true if the version check has started, or false if it could not be
            started.</returns>
        </member>
        <member name="M:PeterHan.PLib.AVC.SteamVersionChecker.WaitForSteamInit(System.UInt64,KMod.Mod)">
            <summary>
            To avoid blowing the stack, waits for Steam to initialize in a coroutine.
            </summary>
            <param name="id">The Steam file ID of the mod.</param>
            <param name="mod">The mod to check for updates.</param>
        </member>
        <member name="T:PeterHan.PLib.AVC.VersionCheckTask">
            <summary>
            Represents a "task" to check a particular mod for updates.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.AVC.VersionCheckTask.method">
            <summary>
            The method which will be used to check.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.AVC.VersionCheckTask.mod">
            <summary>
            The mod whose version will be checked.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.AVC.VersionCheckTask.Next">
            <summary>
            The next task to run when the check completes, or null to not run any task.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.AVC.VersionCheckTask.results">
            <summary>
            The location where the outcome of mod version checking will be stored.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.AVC.VersionCheckTask.OnComplete(PeterHan.PLib.AVC.ModVersionCheckResults)">
            <summary>
            Records the result of the mod version check, and runs the next checker in
            line, from this mod or a different one.
            </summary>
            <param name="result">The results from the version check.</param>
        </member>
        <member name="M:PeterHan.PLib.AVC.VersionCheckTask.Run">
            <summary>
            Runs the version check, and registers a callback to run the next one if
            it is not null.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.AVC.VersionCheckTask.RunNext">
            <summary>
            Runs the next version check.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.AVC.YamlURLVersionChecker">
            <summary>
            Checks the mod version using a URL to a YAML file. The file at this URL must resolve
            to a YAML file of the same format as the mod_info.yaml class.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.AVC.YamlURLVersionChecker.YamlVersionURL">
            <summary>
            The URL to query for checking the mod version.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.AVC.YamlURLVersionChecker.OnRequestFinished(UnityEngine.Networking.UnityWebRequest,KMod.Mod)">
            <summary>
            When a web request completes, triggers the handler for the next updater.
            </summary>
            <param name="request">The YAML web request data.</param>
            <param name="mod">The mod that needs to be checked.</param>
        </member>
        <member name="T:PeterHan.PLib.Buildings.BuildIngredient">
            <summary>
            An ingredient to be used in a building.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.BuildIngredient.Material">
            <summary>
            The material tag name.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.BuildIngredient.Quantity">
            <summary>
            The quantity required in kg.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Buildings.ColoredRangeVisualizer">
            <summary>
            A visualizer that colors cells with an overlay when a building is selected or being
            previewed.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Buildings.ColoredRangeVisualizer.ANIM_NAME">
            <summary>
            The anim name to use when visualizing.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Buildings.ColoredRangeVisualizer.PRE_ANIMS">
            <summary>
            The animations to play when the visualization is created.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Buildings.ColoredRangeVisualizer.POST_ANIM">
            <summary>
            The animation to play when the visualization is destroyed.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.ColoredRangeVisualizer.Layer">
            <summary>
            The layer on which to display the visualizer.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Buildings.ColoredRangeVisualizer.cells">
            <summary>
            The cells where animations are being displayed.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Buildings.ColoredRangeVisualizer.CreateVisualizers">
            <summary>
            Creates or updates the visualizers as necessary.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Buildings.ColoredRangeVisualizer.OnCellChange">
            <summary>
            Called when cells are changed in the building radius.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Buildings.ColoredRangeVisualizer.OnRotated(System.Object)">
            <summary>
            Called when the object is rotated.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Buildings.ColoredRangeVisualizer.OnSelect(System.Object)">
            <summary>
            Called when the object is selected.
            </summary>
            <param name="data">true if selected, or false if deselected.</param>
        </member>
        <member name="M:PeterHan.PLib.Buildings.ColoredRangeVisualizer.RemoveVisualizers">
            <summary>
            Removes all of the visualizers.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Buildings.ColoredRangeVisualizer.RotateOffsetCell(System.Int32,CellOffset)">
            <summary>
            Calculates the offset cell from the specified starting point, including the
            rotation of this object.
            </summary>
            <param name="baseCell">The starting cell.</param>
            <param name="offset">The offset if the building had its default rotation.</param>
            <returns>The computed destination cell.</returns>
        </member>
        <member name="M:PeterHan.PLib.Buildings.ColoredRangeVisualizer.VisualizeCells(System.Collections.Generic.ICollection{PeterHan.PLib.Buildings.ColoredRangeVisualizer.VisCellData})">
            <summary>
            Called when cell visualizations need to be updated. Visualized cells should be
            added to the collection supplied as an argument.
            </summary>
            <param name="newCells">The cells which should be visualized.</param>
        </member>
        <member name="T:PeterHan.PLib.Buildings.ColoredRangeVisualizer.VisCellData">
            <summary>
            Stores the data about a particular cell, including its anim controller and tint
            color.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.ColoredRangeVisualizer.VisCellData.Cell">
            <summary>
            The target cell.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.ColoredRangeVisualizer.VisCellData.Controller">
            <summary>
            The anim controller for this cell.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.ColoredRangeVisualizer.VisCellData.Tint">
            <summary>
            The tint used for this cell.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Buildings.ColoredRangeVisualizer.VisCellData.#ctor(System.Int32)">
            <summary>
            Creates a visualized cell.
            </summary>
            <param name="cell">The cell to visualize.</param>
        </member>
        <member name="M:PeterHan.PLib.Buildings.ColoredRangeVisualizer.VisCellData.#ctor(System.Int32,UnityEngine.Color)">
            <summary>
            Creates a visualized cell.
            </summary>
            <param name="cell">The cell to visualize.</param>
            <param name="tint">The color to tint it.</param>
        </member>
        <member name="M:PeterHan.PLib.Buildings.ColoredRangeVisualizer.VisCellData.CreateController(Grid.SceneLayer)">
            <summary>
            Creates the anim controller for this cell.
            </summary>
            <param name="sceneLayer">The layer on which to display the animation.</param>
        </member>
        <member name="M:PeterHan.PLib.Buildings.ColoredRangeVisualizer.VisCellData.Destroy">
            <summary>
            Destroys the anim controller for this cell.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Buildings.ConduitConnection">
            <summary>
            Represents a pipe connection to a building.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.ConduitConnection.Location">
            <summary>
            The conduit location.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.ConduitConnection.Type">
            <summary>
            The conduit type.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Buildings.PBuilding">
            <summary>
            A class used for creating new buildings. Abstracts many of the details to allow them
            to be used across different game versions.
            </summary>
            <summary>
            Utility methods for creating new buildings.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.AddAfter">
            <summary>
            The building ID which should precede this building ID in the plan menu.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.AlwaysOperational">
            <summary>
            Whether the building is always operational.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.Animation">
            <summary>
            The building's animation.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.AudioCategory">
            <summary>
            The audio sounds used when placing/completing the building.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.AudioSize">
            <summary>
            The audio volume used when placing/completing the building.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.Breaks">
            <summary>
            Whether this building can break down.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.Category">
            <summary>
            The build menu category.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.ConstructionTime">
            <summary>
            The construction time in seconds on x1 speed.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.Decor">
            <summary>
            The decor of this building.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.Description">
            <summary>
            The building description.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.EffectText">
            <summary>
            Text describing the building's effect.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.Entombs">
            <summary>
            Whether this building can entomb.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.ExhaustHeatGeneration">
            <summary>
            The heat generation from the exhaust in kDTU/s.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.Floods">
            <summary>
            Whether this building can flood.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.DefaultPriority">
            <summary>
            The default priority of this building, with null to not add a priority.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.HeatGeneration">
            <summary>
            The self-heating when active in kDTU/s.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.Height">
            <summary>
            The building height.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.HP">
            <summary>
            The building HP until it breaks down.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.Ingredients">
            <summary>
            The ingredients required for construction.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.ID">
            <summary>
            The building ID.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.IndustrialMachine">
            <summary>
            Whether this building is an industrial machine.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.InputConduits">
            <summary>
            The input conduits.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.IsSolidTile">
            <summary>
            Whether this building is (or can be) a solid tile.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.LogicIO">
            <summary>
            The logic ports.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.Name">
            <summary>
            The building name.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.Noise">
            <summary>
            The noise of this building (not used by Klei).
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.ObjectLayer">
            <summary>
            The layer for this building.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.OutputConduits">
            <summary>
            The output conduits.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.OverheatTemperature">
            <summary>
            If null, the building does not overheat; otherwise, it overheats at this
            temperature in K.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.Placement">
            <summary>
            The location where this building may be built.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.PowerInput">
            <summary>
            If null, the building has no power input; otherwise, it uses this much power.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.PowerOutput">
            <summary>
            If null, the building has no power output; otherwise, it provides this much power.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.RotateMode">
            <summary>
            The directions this building can face.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.SceneLayer">
            <summary>
            The scene layer for this building.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.SubCategory">
            <summary>
            The subcategory for this building.
            
            The base game currently defines the following:
            Base:
            ladders, tiles, printing pods, doors, storage, tubes, default
            Oxygen:
            producers, scrubbers
            Power:
            generators, wires, batteries, transformers, switches
            Food:
            cooking, farming, ranching
            Plumbing:
            bathroom, pipes, pumps, valves, sensors
            HVAC:
            pipes, pumps, valves, sensors
            Refining:
            materials, oil, advanced
            Medical:
            cleaning, hospital, wellness
            Furniture:
            bed, lights, dining, recreation, pots, sculpture, electronic decor, moulding,
            canvas, dispaly, monument, signs
            Equipment:
            research, exploration, work stations, suits general, oxygen masks, atmo suits,
            jet suits, lead suits
            Utilities:
            temperature, other utilities, special
            Automation:
            wires, sensors, logic gates, utilities
            Solid Transport:
            conduit, valves, utilities
            Rocketry:
            telescopes, launch pad, railguns, engines, fuel and oxidizer, cargo, utility,
            command, fittings
            Radiation:
            HEP, uranium, radiation
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.Tech">
            <summary>
            The technology name required to unlock the building.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.ViewMode">
            <summary>
            The view mode used when placing this building.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuilding.Width">
            <summary>
            The building width.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Buildings.PBuilding.addedPlan">
            <summary>
            Whether the building was added to the plan menu.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Buildings.PBuilding.addedStrings">
            <summary>
            Whether the strings were added.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Buildings.PBuilding.addedTech">
            <summary>
            Whether the technology wes added.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuilding.#ctor(System.String,System.String)">
            <summary>
            Creates a new building. All buildings thus created must be registered using
            PBuilding.Register and have an appropriate IBuildingConfig class.
            
            Building should be created in OnLoad or a post-load patch (not in static
            initializers) to give the localization framework time to patch the LocString
            containing the building name and description.
            </summary>
            <param name="id">The building ID.</param>
            <param name="name">The building name.</param>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuilding.CreateDef">
            <summary>
            Creates the building def from this class.
            </summary>
            <returns>The Klei building def.</returns>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuilding.ConfigureBuildingTemplate(UnityEngine.GameObject)">
            <summary>
            Configures the building template of this building. Should be called in
            ConfigureBuildingTemplate.
            </summary>
            <param name="go">The game object to configure.</param>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuilding.CreateLogicPorts(UnityEngine.GameObject)">
            <summary>
            Populates the logic ports of this building. Must be used <b>after</b> the
            PBuilding.DoPostConfigureComplete method if logic ports are required.
            
            Should be called in DoPostConfigureComplete, DoPostConfigurePreview, and
            DoPostConfigureUnderConstruction.
            </summary>
            <param name="go">The game object to configure.</param>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuilding.DoPostConfigureComplete(UnityEngine.GameObject)">
            <summary>
            Performs the post-configure complete steps that this building object can do.
            Not exhaustive! Other components must likely be added.
            
            This method does NOT add the logic ports. Use CreateLogicPorts to do so,
            <b>after</b> this method has been invoked.
            </summary>
            <param name="go">The game object to configure.</param>
        </member>
        <member name="F:PeterHan.PLib.Buildings.PBuilding.DEFAULT_CATEGORY">
            <summary>
            The default building category.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuilding.ApplyAlwaysOperational(UnityEngine.GameObject)">
            <summary>
            Makes the building always operational.
            </summary>
            <param name="go">The game object to configure.</param>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuilding.CompatLogicPort(LogicPortSpriteType,CellOffset)">
            <summary>
            Creates a logic port, in a method compatible with both the new and old Automation
            updates. The port will have the default strings which fit well with the
            LogicOperationalController.
            </summary>
            <returns>A logic port compatible with both editions.</returns>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuilding.AddPlan">
            <summary>
            Adds the building to the plan menu.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuilding.AddPlanToCategory(PlanScreen.PlanInfo)">
            <summary>
            Adds a building to a specific plan menu.
            </summary>
            <param name="menu">The menu to which to add the building.</param>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuilding.AddStrings">
            <summary>
            Adds the building strings to the strings list.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuilding.AddTech">
            <summary>
            Adds the building tech to the tech tree.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuilding.SplitLogicPorts(UnityEngine.GameObject)">
            <summary>
            Splits up logic input/output ports and configures the game object with them.
            </summary>
            <param name="go">The game object to configure.</param>
        </member>
        <member name="T:PeterHan.PLib.Buildings.PBuildingManager">
            <summary>
            Manages PLib buildings to break down PBuilding into a more reasonable sized class.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Buildings.PBuildingManager.VERSION">
            <summary>
            The version of this component. Uses the running PLib version.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PBuildingManager.Instance">
            <summary>
            The instantiated copy of this class.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuildingManager.AddExistingBuildingToTech(System.String,System.String)">
            <summary>
            Immediately adds an <i>existing</i> building ID to an existing technology ID in the
            tech tree.
            
            Do <b>not</b> use this method on buildings registered through PBuilding as they
            are added automatically.
            
            This method must be used in a Db.Initialize postfix patch or RunAt.AfterDbInit
            PPatchManager method/patch.
            </summary>
            <param name="tech">The technology tree node ID.</param>
            <param name="id">The building ID to add to that node.</param>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuildingManager.LogBuildingDebug(System.String)">
            <summary>
            Logs a message encountered by the PLib building system.
            </summary>
            <param name="message">The debug message.</param>
        </member>
        <member name="F:PeterHan.PLib.Buildings.PBuildingManager.buildings">
            <summary>
            The buildings which need to be registered.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuildingManager.#ctor">
            <summary>
            Creates a building manager to register PLib buildings.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuildingManager.AddAllStrings">
            <summary>
            Adds the strings for every registered building in all mods to the database.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuildingManager.AddStrings">
            <summary>
            Adds the strings for each registered building in this mod to the database.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuildingManager.AddAllTechs">
            <summary>
            Adds the techs for every registered building in all mods to the database.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuildingManager.AddTechs">
            <summary>
            Adds the techs for each registered building in this mod to the database.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Buildings.PBuildingManager.Register(PeterHan.PLib.Buildings.PBuilding)">
            <summary>
            Registers a building to properly display its name, description, and tech tree
            entry. PLib must be initialized using InitLibrary before using this method. Each
            building should only be registered once, either in OnLoad or a post-load patch.
            </summary>
            <param name="building">The building to register.</param>
        </member>
        <member name="T:PeterHan.PLib.Buildings.PBuildingManager.BuildingTechRegistration">
            <summary>
            A Patch Manager patch which registers all PBuilding technologies.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Buildings.PowerRequirement">
            <summary>
            Stores related information about a building's power requirements.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PowerRequirement.MaxWattage">
            <summary>
            The maximum building wattage.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Buildings.PowerRequirement.PlugLocation">
            <summary>
            The location of the plug related to the foundation tile.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Detours.DetouredField`2">
            <summary>
            Stores delegates used to read and write fields or properties.
            </summary>
            <typeparam name="P">The containing type of the field or property.</typeparam>
            <typeparam name="T">The element type of the field or property.</typeparam>
        </member>
        <member name="P:PeterHan.PLib.Detours.DetouredField`2.Get">
            <summary>
            Invoke to get the field/property value.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Detours.DetouredField`2.Name">
            <summary>
            The field name.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Detours.DetouredField`2.Set">
            <summary>
            Invoke to set the field/property value. Null if the field is const or readonly.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Detours.DetouredMethod`1">
            <summary>
            Stores a detoured method, only performing the expensive reflection when the detour is
            first used.
            
            This class is not thread safe.
            <typeparam name="D">The delegate type to be used to call the detour.</typeparam></summary>
        </member>
        <member name="P:PeterHan.PLib.Detours.DetouredMethod`1.Invoke">
            <summary>
            Emulates the ability of Delegate.Invoke to actually call the method.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Detours.DetouredMethod`1.Name">
            <summary>
            The method name.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Detours.DetouredMethod`1.delg">
            <summary>
            The delegate method which will be called.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Detours.DetouredMethod`1.type">
            <summary>
            The target type.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Detours.DetouredMethod`1.Initialize">
            <summary>
            Initializes the getter and setter functions immediately if necessary.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Detours.DetourException">
            <summary>
            An exception thrown when constructing a detour.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Detours.IDetouredField`2">
            <summary>
            An interface that describes a detoured field, which stores delegates used to read and
            write fields or properties.
            </summary>
            <typeparam name="P">The containing type of the field or property.</typeparam>
            <typeparam name="T">The element type of the field or property.</typeparam>
        </member>
        <member name="P:PeterHan.PLib.Detours.IDetouredField`2.Get">
            <summary>
            Invoke to get the field/property value.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Detours.IDetouredField`2.Name">
            <summary>
            The field name.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Detours.IDetouredField`2.Set">
            <summary>
            Invoke to set the field/property value.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Detours.LazyDetouredField`2">
            <summary>
            Stores delegates used to read and write fields or properties. This version is lazy and
            only calculates the destination when it is first used.
            
            This class is not thread safe.
            </summary>
            <typeparam name="P">The containing type of the field or property.</typeparam>
            <typeparam name="T">The element type of the field or property.</typeparam>
        </member>
        <member name="P:PeterHan.PLib.Detours.LazyDetouredField`2.Get">
            <summary>
            Invoke to get the field/property value.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Detours.LazyDetouredField`2.Name">
            <summary>
            The field name.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Detours.LazyDetouredField`2.Set">
            <summary>
            Invoke to set the field/property value.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Detours.LazyDetouredField`2.getter">
            <summary>
            The function to get the field value.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Detours.LazyDetouredField`2.setter">
            <summary>
            The function to set the field value.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Detours.LazyDetouredField`2.type">
            <summary>
            The target type.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Detours.LazyDetouredField`2.Initialize">
            <summary>
            Initializes the getter and setter functions immediately if necessary.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Detours.PDetours">
            <summary>
            Efficiently detours around many changes in the game by creating detour methods and
            accessors which are resilient against many types of source compatible but binary
            incompatible changes.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.Detour``1(System.Type)">
            <summary>
            Creates a dynamic detour method of the specified delegate type to wrap a base game
            method with the same name as the delegate type. The dynamic method will
            automatically adapt if optional parameters are added, filling in their default
            values.
            </summary>
            <typeparam name="D">The delegate type to be used to call the detour.</typeparam>
            <param name="type">The target type.</param>
            <returns>The detour that will call the method with the name of the delegate type.</returns>
            <exception cref="T:PeterHan.PLib.Detours.DetourException">If the delegate does not match any valid target method.</exception>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.Detour``1(System.Type,System.String)">
            <summary>
            Creates a dynamic detour method of the specified delegate type to wrap a base game
            method with the specified name. The dynamic method will automatically adapt if
            optional parameters are added, filling in their default values.
            </summary>
            <typeparam name="D">The delegate type to be used to call the detour.</typeparam>
            <param name="type">The target type.</param>
            <param name="name">The method name.</param>
            <returns>The detour that will call that method.</returns>
            <exception cref="T:PeterHan.PLib.Detours.DetourException">If the delegate does not match any valid target method.</exception>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.DetourConstructor``1(System.Type)">
            <summary>
            Creates a dynamic detour method of the specified delegate type to wrap a base game
            constructor. The dynamic method will automatically adapt if optional parameters
            are added, filling in their default values.
            </summary>
            <typeparam name="D">The delegate type to be used to call the detour.</typeparam>
            <param name="type">The target type.</param>
            <returns>The detour that will call that type's constructor.</returns>
            <exception cref="T:PeterHan.PLib.Detours.DetourException">If the delegate does not match any valid target method.</exception>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.DetourLazy``1(System.Type,System.String)">
            <summary>
            Creates a dynamic detour method of the specified delegate type to wrap a base game
            method with the specified name. The dynamic method will automatically adapt if
            optional parameters are added, filling in their default values.
            
            This overload creates a lazy detour that only performs the expensive reflection
            when it is first used.
            </summary>
            <typeparam name="D">The delegate type to be used to call the detour.</typeparam>
            <param name="type">The target type.</param>
            <param name="name">The method name.</param>
            <returns>The detour that will call that method.</returns>
            <exception cref="T:PeterHan.PLib.Detours.DetourException">If the delegate does not match any valid target method.</exception>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.Detour``1(System.Reflection.MethodInfo)">
            <summary>
            Creates a dynamic detour method of the specified delegate type to wrap a base game
            method with the specified name. The dynamic method will automatically adapt if
            optional parameters are added, filling in their default values.
            </summary>
            <typeparam name="D">The delegate type to be used to call the detour.</typeparam>
            <param name="target">The target method to be called.</param>
            <returns>The detour that will call that method.</returns>
            <exception cref="T:PeterHan.PLib.Detours.DetourException">If the delegate does not match the target.</exception>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.Detour``1(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a dynamic detour method of the specified delegate type to wrap a base game
            constructor. The dynamic method will automatically adapt if optional parameters
            are added, filling in their default values.
            </summary>
            <typeparam name="D">The delegate type to be used to call the detour.</typeparam>
            <param name="target">The target constructor to be called.</param>
            <returns>The detour that will call that constructor.</returns>
            <exception cref="T:PeterHan.PLib.Detours.DetourException">If the delegate does not match the target.</exception>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.DetourField``2(System.String)">
            <summary>
            Creates dynamic detour methods to wrap a base game field or property with the
            specified name. The detour will still work even if the field is converted to a
            source compatible property and vice versa.
            </summary>
            <typeparam name="P">The type of the parent class.</typeparam>
            <typeparam name="T">The type of the field or property element.</typeparam>
            <param name="name">The name of the field or property to be accessed.</param>
            <returns>A detour element that wraps the field or property with common getter and
            setter delegates which will work on both types.</returns>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.DetourFieldLazy``2(System.String)">
            <summary>
            Creates dynamic detour methods to wrap a base game field or property with the
            specified name. The detour will still work even if the field is converted to a
            source compatible property and vice versa.
            
            This overload creates a lazy detour that only performs the expensive reflection
            when it is first used.
            </summary>
            <typeparam name="P">The type of the parent class.</typeparam>
            <typeparam name="T">The type of the field or property element.</typeparam>
            <param name="name">The name of the field or property to be accessed.</param>
            <returns>A detour element that wraps the field or property with common getter and
            setter delegates which will work on both types.</returns>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.DetourField``2(System.Reflection.FieldInfo)">
            <summary>
            Creates dynamic detour methods to wrap a base game field with the specified name.
            </summary>
            <typeparam name="P">The type of the parent class.</typeparam>
            <typeparam name="T">The type of the field element.</typeparam>
            <param name="target">The field which will be accessed.</param>
            <returns>A detour element that wraps the field with a common interface matching
            that of a detoured property.</returns>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.DetourProperty``2(System.Reflection.PropertyInfo)">
            <summary>
            Creates dynamic detour methods to wrap a base game property with the specified name.
            </summary>
            <typeparam name="P">The type of the parent class.</typeparam>
            <typeparam name="T">The type of the property element.</typeparam>
            <param name="target">The property which will be accessed.</param>
            <returns>A detour element that wraps the property with a common interface matching
            that of a detoured field.</returns>
            <exception cref="T:PeterHan.PLib.Detours.DetourException">If the property has indexers.</exception>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.DetourStructField``1(System.Type,System.String)">
            <summary>
            Creates dynamic detour methods to wrap a base game struct field with the specified
            name. For static struct fields, use the regular DetourField.
            </summary>
            <typeparam name="T">The type of the field element.</typeparam>
            <param name="parentType">The struct type which will be accessed.</param>
            <param name="name">The name of the struct field to be accessed.</param>
            <returns>A detour element that wraps the field with a common interface matching
            that of a detoured property.</returns>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.FinishDynamicMethod(System.Reflection.Emit.DynamicMethod,System.Reflection.ParameterInfo[],System.Type[],System.Int32)">
            <summary>
            Generates the required method parameters for the dynamic detour method.
            </summary>
            <param name="caller">The method where the parameters will be defined.</param>
            <param name="actualParams">The actual parameters required.</param>
            <param name="expectedParams">The parameters provided.</param>
            <param name="offset">The offset to start loading (0 = static, 1 = instance).</param>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.LoadParameters(System.Reflection.Emit.ILGenerator,System.Reflection.ParameterInfo[],System.Type[],System.Int32)">
            <summary>
            Generates instructions to load arguments or default values onto the stack in a
            detour method.
            </summary>
            <param name="generator">The method where the calls will be added.</param>
            <param name="actualParams">The actual parameters required.</param>
            <param name="expectedParams">The parameters provided.</param>
            <param name="offset">The offset to start loading (0 = static, 1 = instance).</param>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.ValidateDelegate(PeterHan.PLib.Detours.PDetours.DelegateInfo,System.Reflection.MethodBase,System.Type)">
            <summary>
            Verifies that the delegate signature provided in dst can be dynamically mapped to
            the method provided by src, with the possible addition of optional parameters set
            to their default values.
            </summary>
            <param name="expected">The method return type and parameter types expected.</param>
            <param name="actual">The method to be called.</param>
            <param name="actualReturn">The type of the method or constructor's return value.</param>
            <returns>The parameters used in the call to the actual method.</returns>
            <exception cref="T:PeterHan.PLib.Detours.DetourException">If the delegate does not match the target.</exception>
        </member>
        <member name="T:PeterHan.PLib.Detours.PDetours.DelegateInfo">
            <summary>
            Stores information about a delegate.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.DelegateInfo.Create(System.Type)">
            <summary>
            Creates delegate information on the specified delegate type.
            </summary>
            <param name="delegateType">The delegate type to wrap.</param>
            <returns>Information about that delegate's return and parameter types.</returns>
        </member>
        <member name="F:PeterHan.PLib.Detours.PDetours.DelegateInfo.delegateType">
            <summary>
            The delegate's type.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Detours.PDetours.DelegateInfo.parameterTypes">
            <summary>
            The delegate's parameter types.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Detours.PDetours.DelegateInfo.returnType">
            <summary>
            The delegate's return types.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.ExtensionMethods">
            <summary>
            Extension methods to make life easier!
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.F(System.String,System.Object[])">
            <summary>
            Shorthand for string.Format() which can be invoked directly on the message.
            </summary>
            <param name="message">The format template message.</param>
            <param name="args">The substitutions to be included.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.GetComponentSafe``1(UnityEngine.GameObject)">
            <summary>
            Retrieves a component, but returns null if the GameObject is disposed.
            </summary>
            <typeparam name="T">The component type to retrieve.</typeparam>
            <param name="obj">The GameObject that hosts the component.</param>
            <returns>The requested component, or null if it does not exist</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.GetNameSafe(System.Reflection.Assembly)">
            <summary>
            Gets the assembly name of an assembly.
            </summary>
            <param name="assembly">The assembly to query.</param>
            <returns>The assembly name, or null if assembly is null.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.GetFileVersion(System.Reflection.Assembly)">
            <summary>
            Gets the file version of the specified assembly.
            </summary>
            <param name="assembly">The assembly to query</param>
            <returns>The AssemblyFileVersion of that assembly, or null if it could not be determined.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.InRange(System.Double,System.Double,System.Double)">
            <summary>
            Coerces a floating point number into the specified range.
            </summary>
            <param name="value">The original number.</param>
            <param name="min">The minimum value (inclusive).</param>
            <param name="max">The maximum value (inclusive).</param>
            <returns>The nearest value between minimum and maximum inclusive to value.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.InRange(System.Single,System.Single,System.Single)">
            <summary>
            Coerces a floating point number into the specified range.
            </summary>
            <param name="value">The original number.</param>
            <param name="min">The minimum value (inclusive).</param>
            <param name="max">The maximum value (inclusive).</param>
            <returns>The nearest value between minimum and maximum inclusive to value.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.InRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Coerces an integer into the specified range.
            </summary>
            <param name="value">The original number.</param>
            <param name="min">The minimum value (inclusive).</param>
            <param name="max">The maximum value (inclusive).</param>
            <returns>The nearest value between minimum and maximum inclusive to value.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.IsFalling(UnityEngine.GameObject)">
            <summary>
            Checks to see if an object is falling.
            </summary>
            <param name="obj">The object to check.</param>
            <returns>true if it is falling, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.IsNaNOrInfinity(System.Double)">
            <summary>
            Checks to see if a floating point value is NaN or infinite.
            </summary>
            <param name="value">The value to check.</param>
            <returns>true if it is NaN, PositiveInfinity, or NegativeInfinity, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.IsNaNOrInfinity(System.Single)">
            <summary>
            Checks to see if a floating point value is NaN or infinite.
            </summary>
            <param name="value">The value to check.</param>
            <returns>true if it is NaN, PositiveInfinity, or NegativeInfinity, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.IsUsable(UnityEngine.GameObject)">
            <summary>
            Checks to see if a building is usable.
            </summary>
            <param name="building">The building component to check.</param>
            <returns>true if it is usable (enabled, not broken, not overheated), or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.Join(System.Collections.IEnumerable,System.String)">
            <summary>
            Creates a string joining the members of an enumerable.
            </summary>
            <param name="values">The values to join.</param>
            <param name="delimiter">The delimiter to use between values.</param>
            <returns>A string consisting of each value in order, with the delimiter in between.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.Patch(HarmonyLib.Harmony,System.Type,System.String,HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod)">
            <summary>
            Patches a method manually.
            </summary>
            <param name="instance">The Harmony instance.</param>
            <param name="type">The class to modify.</param>
            <param name="methodName">The method to patch.</param>
            <param name="prefix">The prefix to apply, or null if none.</param>
            <param name="postfix">The postfix to apply, or null if none.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.PatchConstructor(HarmonyLib.Harmony,System.Type,System.Type[],HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod)">
            <summary>
            Patches a constructor manually.
            </summary>
            <param name="instance">The Harmony instance.</param>
            <param name="type">The class to modify.</param>
            <param name="arguments">The constructor's argument types.</param>
            <param name="prefix">The prefix to apply, or null if none.</param>
            <param name="postfix">The postfix to apply, or null if none.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.PatchTranspile(HarmonyLib.Harmony,System.Type,System.String,HarmonyLib.HarmonyMethod)">
            <summary>
            Patches a method manually with a transpiler.
            </summary>
            <param name="instance">The Harmony instance.</param>
            <param name="type">The class to modify.</param>
            <param name="methodName">The method to patch.</param>
            <param name="transpiler">The transpiler to apply.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.SetParent(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            Sets a game object's parent.
            </summary>
            <param name="child">The game object to modify.</param>
            <param name="parent">The new parent object.</param>
            <returns>The game object, for call chaining.</returns>
        </member>
        <member name="T:PeterHan.PLib.Core.IPLibRegistry">
            <summary>
            An interface used for both local and remote PLib registry instances.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.IPLibRegistry.ModData">
            <summary>
            Data shared between mods in key value pairs.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.IPLibRegistry.AddCandidateVersion(PeterHan.PLib.Core.PForwardedComponent)">
            <summary>
            Adds a candidate version of a forwarded component.
            </summary>
            <param name="instance">The instance of the component to add.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.IPLibRegistry.GetLatestVersion(System.String)">
            <summary>
            Gets the latest version of a forwarded component of PLib (or another mod).
            </summary>
            <param name="id">The component ID to look up.</param>
            <returns>The latest version of that component, or a forwarded proxy of the
            component if functionality is provided by another mod.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.IPLibRegistry.GetSharedData(System.String)">
            <summary>
            Gets the shared data for a particular component.
            </summary>
            <param name="id">The component ID that holds the data.</param>
            <returns>The shared data for components with that ID, or null if no component by
            that name was found, or if the data is unset.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.IPLibRegistry.GetAllComponents(System.String)">
            <summary>
            Gets all registered forwarded components for the given ID.
            </summary>
            <param name="id">The component ID to look up.</param>
            <returns>All registered components with that ID, with forwarded proxies for any
            whose functionality is provided by another mod.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.IPLibRegistry.SetSharedData(System.String,System.Object)">
            <summary>
            Sets the shared data for a particular component.
            </summary>
            <param name="id">The component ID that holds the data.</param>
            <param name="data">The new shared data value.</param>
        </member>
        <member name="T:PeterHan.PLib.Core.IRefreshUserMenu">
            <summary>
            Implemented by classes which want to use the utility user menu refresh to save some
            boilerplate code.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.IRefreshUserMenu.OnRefreshUserMenu">
            <summary>
            Called when the user button menu in the info panel is refreshed. Since the
            arguments are always null, no parameter is passed.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PForwardedComponent">
            <summary>
            A library component that is forwarded across multiple assemblies, to allow only the
            latest version available on the system to run. Provides methods to marshal some
            objects across the assembly boundaries.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PForwardedComponent.MAX_DEPTH">
            <summary>
            The default maximum serialization depth for marshaling data.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PForwardedComponent.InstanceData">
            <summary>
            The data stored in this object. It can be retrieved, with optional round trip
            serialization, by the instantiated version of this component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PForwardedComponent.ID">
            <summary>
            The ID used by PLib for this component.
            
            This method is non-virtual for a reason, as the ID is sometimes only available
            on methods of type object, so GetType().FullName is used directly there.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PForwardedComponent.SerializationSettings">
            <summary>
            The JSON serialization settings to be used if the Data is marshaled across
            assembly boundaries.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PForwardedComponent.Version">
            <summary>
            Retrieves the version of the component provided by this assembly.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PForwardedComponent.registered">
            <summary>
            Whether this object has been registered.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PForwardedComponent.candidateLock">
            <summary>
            Serializes access to avoid race conditions when registering this component.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.Bootstrap(HarmonyLib.Harmony)">
            <summary>
            Called only on the first instance of a particular component to be registered.
            For some particular components that need very early patches, this call might be
            required to initialize state before the rest of the forwarded components are
            initialized. However, this call might occur on a version that is not the latest of
            this component in the system, or on an instance that will not be instantiated or
            initialized by the other callbacks.
            </summary>
            <param name="plibInstance">The Harmony instance to use for patching if necessary.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.DoInitialize(HarmonyLib.Harmony)">
            <summary>
            Initializes this component. Only called on the version that is selected as the
            latest.
            </summary>
            <param name="plibInstance">The Harmony instance to use for patching if necessary.</param>
            <returns>The initialized instance.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.GetInstanceData``1(``0)">
            <summary>
            Gets the data from this component as a specific type. Only works if the type is
            shared across all mods (in some shared assembly's memory space) such as types in
            System or the base game.
            </summary>
            <typeparam name="T">The data type to retrieve.</typeparam>
            <param name="defValue">The default value if the instance data is unset.</param>
            <returns>The data, or defValue if the instance data has not been set.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.GetInstanceDataSerialized``1(``0)">
            <summary>
            Gets the data from this component, serialized to the specified type. The data is
            retrieved from the base component, serialized with JSON, and reconstituted as type
            T in the memory space of the caller.
            
            The target type must exist and be a [JsonObject] in both this assembly and the
            target component's assembly.
            
            This method is somewhat slow and memory intensive, and should be used sparingly.
            </summary>
            <typeparam name="T">The data type to retrieve and into which to convert.</typeparam>
            <param name="defValue">The default value if the instance data is unset.</param>
            <returns>The data, or defValue if the instance data has not been set or cannot be serialized.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.GetSharedData``1(``0)">
            <summary>
            Gets the shared data between components with this ID as a specific type. Only works
            if the type is shared across all mods (in some shared assembly's memory space) such
            as types in System or the base game.
            </summary>
            <typeparam name="T">The data type to retrieve.</typeparam>
            <param name="defValue">The default value if the shared data is unset.</param>
            <returns>The data, or defValue if the shared data has not been set.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.GetSharedDataSerialized``1(``0)">
            <summary>
            Gets the shared data between components with this ID, serialized to the specified
            type. The shared data is retrieved, serialized with JSON, and reconstituted as type
            T in the memory space of the caller.
            
            The target type must exist and be a [JsonObject] in both this assembly and the
            target component's assembly.
            
            This method is somewhat slow and memory intensive, and should be used sparingly.
            </summary>
            <typeparam name="T">The data type to retrieve and into which to convert.</typeparam>
            <param name="defValue">The default value if the shared data is unset.</param>
            <returns>The data, or defValue if the shared data has not been set or cannot be serialized.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.GetOwningAssembly">
            <summary>
            Gets the assembly which provides this component.
            </summary>
            <returns>The assembly which owns this component.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.Initialize(HarmonyLib.Harmony)">
            <summary>
            Initializes this component. Only called on the version that is selected as the
            latest. Component initialization order is undefined, so anything relying on another
            component cannot be used until PostInitialize.
            </summary>
            <param name="plibInstance">The Harmony instance to use for patching if necessary.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.InvokeAllProcess(System.UInt32,System.Object)">
            <summary>
            Invokes the Process method on all registered components of this type.
            </summary>
            <param name="operation">The operation to pass to Process.</param>
            <param name="args">The arguments to pass to Process.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.PatchMethod(System.String)">
            <summary>
            Gets a HarmonyMethod instance for manual patching using a method from this class.
            </summary>
            <param name="name">The method name.</param>
            <returns>A reference to that method as a HarmonyMethod for patching.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.PostInitialize(HarmonyLib.Harmony)">
            <summary>
            Initializes this component. Only called on the version that is selected as the
            latest. Other components have been initialized when this method is called.
            </summary>
            <param name="plibInstance">The Harmony instance to use for patching if necessary.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.Process(System.UInt32,System.Object)">
            <summary>
            Called on demand by the initialized instance to run processing in all other
            instances.
            </summary>
            <param name="operation">The operation to perform. The meaning of this parameter
            varies by component.</param>
            <param name="args">The arguments for processing.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.RegisterForForwarding">
            <summary>
            Registers this component into the list of versions available for forwarding. This
            method is thread safe. If this component instance is already registered, it will
            not be registered again.
            </summary>
            <returns>true if the component was registered, or false if it was already registered.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.SetSharedData(System.Object)">
            <summary>
            Sets the shared data between components with this ID. Only works if the type is
            shared across all mods (in some shared assembly's memory space) such as types in
            System or the base game.
            </summary>
            <param name="value">The new value for the shared data.</param>
        </member>
        <member name="T:PeterHan.PLib.Core.PForwardedComponent.PComponentComparator">
            <summary>
            Compares two forwarded components to each other. The latest versions will be
            sorted first.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PGameUtils">
            <summary>
            Utility and helper functions to perform common game-related (not UI) tasks.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PGameUtils.CreateSoundDelegate">
            <summary>
            Creates a new sound event in the audio sheets.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PGameUtils.InfoRefreshFunction">
            <summary>
            Refreshes the simple info screen.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PGameUtils.CHECK_SUBSCRIPTION">
            <summary>
            Checks to see if a DLC is subscribed on the platform (Steam/Epic).
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PGameUtils.IS_CONTENT_ENABLED">
            <summary>
            Checks to see if the DLC is turned on in the game options.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.CenterAndSelect(KMonoBehaviour)">
            <summary>
            Centers and selects an entity.
            </summary>
            <param name="entity">The entity to center and focus.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.CopySoundsToAnim(System.String,System.String)">
            <summary>
            Copies the sounds from one animation to another animation. Since Hot Shots this
            method only copies sounds present in the base game audio sheets, not any sounds
            that may have been added by other mods.
            </summary>
            <param name="dstAnim">The destination anim file name.</param>
            <param name="srcAnim">The source anim file name.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.CreateSound(AudioSheets,System.String,System.String,AudioSheet.SoundInfo,System.String,System.Int32)">
            <summary>
            Calls out to the base game CreateSound delegate in AudioSheets.
            </summary>
            <param name="sheet">The location where the sound event will be stored.</param>
            <param name="file">The animation file name.</param>
            <param name="type">The event type to create.</param>
            <param name="info">Used for the minimum interval, DLC ID, and anim name.</param>
            <param name="sound">The sound name to play.</param>
            <param name="frame">The frame index to start the sound.</param>
            <returns>1 if the sound was created, or 0 if the sound was not created.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.CreateAllSounds(AudioSheets,System.String,AudioSheet.SoundInfo,System.String)">
            <summary>
            Creates all of the sounds in the prefab (master) audio sheets, but with a different
            animation name substituted.
            </summary>
            <param name="sheet">The location where the sound event will be stored.</param>
            <param name="animFile">The substitute anim file name to use instead.</param>
            <param name="info">The sounds to be created.</param>
            <param name="defaultType">The sound type to use if the type is blank.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.CreatePopup(UnityEngine.Sprite,System.String,System.Int32)">
            <summary>
            Creates a popup message at the specified cell location on the Move layer.
            </summary>
            <param name="image">The image to display, likely from PopFXManager.Instance.</param>
            <param name="text">The text to display.</param>
            <param name="cell">The cell location to create the message.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.CreatePopup(UnityEngine.Sprite,System.String,UnityEngine.Vector3)">
            <summary>
            Creates a popup message at the specified location.
            </summary>
            <param name="image">The image to display, likely from PopFXManager.Instance.</param>
            <param name="text">The text to display.</param>
            <param name="position">The position to create the message.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.CreateUserMenuHandler``1">
            <summary>
            Creates a default user menu handler for a class implementing IRefreshUserMenu.
            </summary>
            <typeparam name="T">The class to handle events.</typeparam>
            <returns>A handler which can be used to Subscribe for RefreshUserMenu events.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.GetObjectLayer(System.String,ObjectLayer)">
            <summary>
            Retrieves an object layer by its name, resolving the value at runtime to handle
            differences in the layer enum. This method is slower than a direct lookup -
            consider caching the result.
            </summary>
            <param name="name">The name of the layer (use nameof()!)</param>
            <param name="defValue">The default value (use the value at compile time)</param>
            <returns>The value to use for this object layer.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.HighlightEntity(UnityEngine.Component,UnityEngine.Color)">
            <summary>
            Highlights an entity. Use Color.black to unhighlight it.
            </summary>
            <param name="entity">The entity to highlight.</param>
            <param name="highlightColor">The color to highlight it.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.IsDLCOwned(System.String)">
            <summary>
             Wraps the DLCManager class to see if a particular DLC is owned.
            
             Note that some DLC content is hot loaded only for individual saves, this method
             should only be used to show or hide items that require a game restart to change
             like the Spaced Out multi-planet/rocketry modes.
             </summary>
            <param name="name" />
            <returns />
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.PlaySound(System.String,UnityEngine.Vector3)">
            <summary>
            Plays a sound effect.
            </summary>
            <param name="name">The sound effect name to play.</param>
            <param name="position">The position where the sound is generated.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.RefreshInfoScreen(SimpleInfoScreen,System.Boolean)">
            <summary>
            Refreshes the info screen.
            </summary>
            <param name="screen">The info screen to refresh.</param>
            <param name="force">If true, the refresh is forced.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.SaveMods">
            <summary>
            Saves the current list of mods.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PLibCorePatches">
            <summary>
            A small component which applies core patches used by PLib.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibCorePatches.VERSION">
            <summary>
            The version of this component. Uses the running PLib version.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PLibCorePatches.Initialize_Postfix">
            <summary>
            Localizes all mods to the current locale.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PLibCorePatches.Register(PeterHan.PLib.Core.IPLibRegistry)">
            <summary>
            Registers this instance of the PLib core patches.
            </summary>
            <param name="instance">The registry instance to use (since PRegistry.Instance
            is not yet fully initialized).</param>
        </member>
        <member name="T:PeterHan.PLib.Core.PLibLocalization">
            <summary>
            Handles localization of PLib for mods by automatically loading po files stored as
            EmbeddedResources in PLibCore.dll and ILMerged with the mod assembly.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibLocalization.TRANSLATIONS_EXT">
            <summary>
            The file extension used for localization files.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibLocalization.TRANSLATIONS_RES_PATH">
            <summary>
            The Prefix of LogicalName of EmbeddedResources that stores the content of po files.
            Must match the specified value in the Directory.Build.targets file.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PLibLocalization.LocalizeItself(Localization.Locale)">
            <summary>
            Localizes the PLib strings.
            </summary>
            <param name="locale">The locale to use.</param>
        </member>
        <member name="T:PeterHan.PLib.Core.PLibStrings">
            <summary>
            Strings used in PLib.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.BUTTON_MANUAL">
            <summary>
            The button used to manually edit the mod configuration.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.BUTTON_RESET">
            <summary>
            The button used to reset the configuration to its default value.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.BUTTON_OK">
            <summary>
            The text shown on the Done button.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.BUTTON_OPTIONS">
            <summary>
            The text shown on the Options button.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.DIALOG_TITLE">
            <summary>
            The dialog title used for options, where {0} is substituted with the mod friendly name.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.KEY_CATEGORY_TITLE">
            <summary>
            The title used for the PLib key bind category.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.LABEL_B">
            <summary>
            The abbreviation text shown on the Blue field.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.LABEL_G">
            <summary>
            The abbreviation text shown on the Green field.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.LABEL_R">
            <summary>
            The abbreviation text shown on the Red field.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.MOD_ASSEMBLY_VERSION">
            <summary>
            The mod version in Mod Options if retrieved from the default AssemblyVersion, where
            {0} is substituted with the version text.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.MOD_HOMEPAGE">
            <summary>
            The button text which goes to the mod's home page when clicked.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.MOD_VERSION">
            <summary>
            The mod version in Mod Options if specified via AssemblyFileVersion, where {0} is
            substituted with the version text.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.RESTART_CANCEL">
            <summary>
            The cancel button in the restart dialog.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.RESTART_OK">
            <summary>
            The OK button in the restart dialog.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.MAINMENU_UPDATE">
            <summary>
            Displayed in the menu when mods report as being outdated.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.MAINMENU_UPDATE_1">
            <summary>
            Displayed in the menu when a mod reports as being outdated.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.OUTDATED_TOOLTIP">
            <summary>
            The details tooltip when AVC detects a mod to be outdated.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.OUTDATED_WARNING">
            <summary>
            Displayed when AVC detects a mod to be outdated.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.RESTART_REQUIRED">
            <summary>
            The message prompting the user to restart.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_BLUE">
            <summary>
            The tooltip on the BLUE field in color pickers.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_CANCEL">
            <summary>
            The tooltip on the CANCEL button.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_GREEN">
            <summary>
            The tooltip on the GREEN field in color pickers.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_HOMEPAGE">
            <summary>
            The tooltip on the Mod Homepage button.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_HUE">
            <summary>
            The tooltip on the Hue slider in color pickers.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_MANUAL">
            <summary>
            The tooltip on the MANUAL CONFIG button.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_NEXT">
            <summary>
            The tooltip for cycling to the next item.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_OK">
            <summary>
            The tooltip on the OK button.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_PREVIOUS">
            <summary>
            The tooltip for cycling to the previous item.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_RED">
            <summary>
            The tooltip on the RED field in color pickers.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_RESET">
            <summary>
            The tooltip on the RESET TO DEFAULT button.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_SATURATION">
            <summary>
            The tooltip on the Saturation slider in color pickers.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_TOGGLE">
            <summary>
            The tooltip for each category visibility toggle.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_VALUE">
            <summary>
            The tooltip on the Value slider in color pickers.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_VERSION">
            <summary>
            The tooltip for the mod version.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PPatchTools">
            <summary>
            Contains tools to aid with patching.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PPatchTools.BASE_FLAGS">
            <summary>
            The base binding flags for all reflection methods.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PPatchTools.AnyArguments">
            <summary>
            Passed to GetMethodSafe to match any method arguments.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PPatchTools.RemoveCall">
            <summary>
            A placeholder flag to ReplaceMethodCallSafe to remove the method call.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.CreateDelegate``1(System.Type,System.String,System.Object,System.Type[])">
            <summary>
            Creates a delegate for a private instance method. This delegate is over ten times
            faster than reflection, so useful if called frequently on the same object.
            </summary>
            <typeparam name="T">A delegate type which matches the method signature.</typeparam>
            <param name="type">The declaring type of the target method.</param>
            <param name="method">The target method name.</param>
            <param name="caller">The object on which to call the method.</param>
            <param name="argumentTypes">The types of the target method arguments, or PPatchTools.
            AnyArguments (not recommended, type safety is good) to match any method with
            that name.</param>
            <returns>A delegate which calls this method, or null if the method could not be
            found or did not match the types.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.CreateDelegate``1(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Creates a delegate for a private instance method. This delegate is over ten times
            faster than reflection, so useful if called frequently on the same object.
            </summary>
            <typeparam name="T">A delegate type which matches the method signature.</typeparam>
            <param name="method">The target method.</param>
            <param name="caller">The object on which to call the method.</param>
            <returns>A delegate which calls this method, or null if the method was null or did
            not match the delegate type.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.CreateGetDelegate``1(System.Type,System.String,System.Object)">
            <summary>
            Creates a delegate for a private instance property getter. This delegate is over
            ten times faster than reflection, so useful if called frequently on the same object.
            
            This method does not work on indexed properties.
            </summary>
            <typeparam name="T">The property's type.</typeparam>
            <param name="type">The declaring type of the target property.</param>
            <param name="property">The target property name.</param>
            <param name="caller">The object on which to call the property getter.</param>
            <returns>A delegate which calls this property's getter, or null if the property
            could not be found or did not match the type.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.CreateGetDelegate``1(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Creates a delegate for a private instance property getter. This delegate is over
            ten times faster than reflection, so useful if called frequently on the same object.
            
            This method does not work on indexed properties.
            </summary>
            <typeparam name="T">The property's type.</typeparam>
            <param name="property">The target property.</param>
            <param name="caller">The object on which to call the property getter.</param>
            <returns>A delegate which calls this property's getter, or null if the property
            was null or did not match the type.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.CreateSetDelegate``1(System.Type,System.String,System.Object)">
            <summary>
            Creates a delegate for a private instance property setter. This delegate is over
            ten times faster than reflection, so useful if called frequently on the same object.
            
            This method does not work on indexed properties.
            </summary>
            <typeparam name="T">The property's type.</typeparam>
            <param name="type">The declaring type of the target property.</param>
            <param name="property">The target property name.</param>
            <param name="caller">The object on which to call the property setter.</param>
            <returns>A delegate which calls this property's setter, or null if the property
            could not be found or did not match the type.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.CreateSetDelegate``1(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Creates a delegate for a private instance property setter. This delegate is over
            ten times faster than reflection, so useful if called frequently on the same object.
            
            This method does not work on indexed properties.
            </summary>
            <typeparam name="T">The property's type.</typeparam>
            <param name="property">The target property.</param>
            <param name="caller">The object on which to call the property setter.</param>
            <returns>A delegate which calls this property's setter, or null if the property
            was null or did not match the type.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.CreateStaticDelegate``1(System.Type,System.String,System.Type[])">
            <summary>
            Creates a delegate for a private static method. This delegate is over ten times
            faster than reflection, so useful if called frequently.
            </summary>
            <typeparam name="T">A delegate type which matches the method signature.</typeparam>
            <param name="type">The declaring type of the target method.</param>
            <param name="method">The target method name.</param>
            <param name="argumentTypes">The types of the target method arguments, or PPatchTools.
            AnyArguments (not recommended, type safety is good) to match any static method with
            that name.</param>
            <returns>A delegate which calls this method, or null if the method could not be
            found or did not match the types.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.DoReplaceMethodCalls(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Collections.Generic.IDictionary{System.Reflection.MethodInfo,System.Reflection.MethodInfo})">
            <summary>
            Replaces method calls in a transpiled method.
            </summary>
            <param name="method">The method to patch.</param>
            <param name="translation">A mapping from the old method calls to replace, to the
            new method calls to use instead.</param>
            <returns>A transpiled version of that method that replaces or removes all calls
            to the specified methods.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.DumpMethodBody(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction})">
            <summary>
            Dumps the IL body of the method to the debug log.
            
            Only to be used for debugging purposes.
            </summary>
            <param name="opcodes">The IL instructions to log.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.FormatArgument(System.Object)">
            <summary>
            This method was taken directly from Harmony (https://github.com/pardeike/Harmony)
            which is also available under the MIT License.
            </summary>
            <param name="argument">The argument to format.</param>
            <returns>The IL argument in string form.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.FormatMethodCall(System.Text.StringBuilder,System.Reflection.MethodBase)">
            <summary>
            Formats a method call for logging.
            </summary>
            <param name="result">The location where the log is stored.</param>
            <param name="method">The method that is called.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.GetFieldSafe(System.Type,System.String,System.Boolean)">
            <summary>
            Retrieves a field using reflection, or returns null if it does not exist.
            </summary>
            <param name="type">The base type.</param>
            <param name="fieldName">The field name.</param>
            <param name="isStatic">true to find static fields, or false to find instance
            fields.</param>
            <returns>The field, or null if no such field could be found.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.GetMatchingStoreInstruction(HarmonyLib.CodeInstruction)">
            <summary>
            Creates a store instruction to the same local as the specified load instruction.
            </summary>
            <param name="load">The initial load instruction.</param>
            <returns>The counterbalancing store instruction.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.GetMethodSafe(System.Type,System.String,System.Boolean,System.Type[])">
            <summary>
            Retrieves a method using reflection, or returns null if it does not exist.
            </summary>
            <param name="type">The base type.</param>
            <param name="methodName">The method name.</param>
            <param name="isStatic">true to find static methods, or false to find instance
            methods.</param>
            <param name="arguments">The method argument types. If null is provided, any
            argument types are matched, whereas no arguments match only void methods.</param>
            <returns>The method, or null if no such method could be found.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.GetOverloadWithMostArguments(System.Type,System.String,System.Boolean,System.Type[])">
            <summary>
            Retrieves the method matching the criteria that has the most arguments. Useful when
            patching a base game overload is added with extra parameters (for binary
            compatibility) where the shorter methods just call the longer one.
            </summary>
            <param name="type">The base type.</param>
            <param name="methodName">The netgh</param>
            <param name="isStatic">true to find static methods, or false to find instance
            methods.</param>
            <param name="arguments">The method argument types. If null is provided, any
            argument types are matched, whereas no arguments match only void methods.</param>
            <returns>The method, or null if no such method could be found.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.GetPropertySafe``1(System.Type,System.String,System.Boolean)">
            <summary>
            Retrieves a property using reflection, or returns null if it does not exist.
            </summary>
            <param name="type">The base type.</param>
            <param name="propName">The property name.</param>
            <param name="isStatic">true to find static properties, or false to find instance
            properties.</param>
            <typeparam name="T">The property field type.</typeparam>
            <returns>The property, or null if no such property could be found.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.GetPropertyIndexedSafe``1(System.Type,System.String,System.Boolean,System.Type[])">
            <summary>
            Retrieves an indexed property using reflection, or returns null if it does not
            exist.
            </summary>
            <param name="type">The base type.</param>
            <param name="propName">The property name.</param>
            <param name="isStatic">true to find static properties, or false to find instance
            properties.</param>
            <param name="arguments">The property indexer's arguments.</param>
            <typeparam name="T">The property field type.</typeparam>
            <returns>The property, or null if no such property could be found.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.GetTypeSafe(System.String,System.String)">
            <summary>
            Retrieves a type using its full name (including namespace). However, the assembly
            name is optional, as this method searches all assemblies in the current
            AppDomain if it is null or empty.
            </summary>
            <param name="name">The type name to retrieve.</param>
            <param name="assemblyName">If specified, the name of the assembly that contains
            the type. No other assembly name will be searched if this parameter is not null
            or empty. The assembly name might not match the DLL name, use a decompiler to
            make sure.</param>
            <returns>The type, or null if the type is not found or cannot be loaded.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.HasPatchWithMethodName(HarmonyLib.Harmony,System.Reflection.MethodBase,HarmonyLib.HarmonyPatchType,System.String)">
            <summary>
            Checks to see if a patch with the specified method name (the method used in the
            patch class) and type is defined.
            </summary>
            <param name="instance">The Harmony instance to query for patches. Unused.</param>
            <param name="target">The target method to search for patches.</param>
            <param name="type">The patch type to look up.</param>
            <param name="name">The patch method name to look up (name as declared by patch owner).</param>
            <returns>true if such a patch was found, or false otherwise</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.HasPatchWithMethodName(System.Collections.Generic.IEnumerable{HarmonyLib.Patch},System.String)">
            <summary>
            Checks to see if the patch list has a method with the specified name.
            </summary>
            <param name="patchList">The patch list to search.</param>
            <param name="name">The declaring method name to look up.</param>
            <returns>true if a patch matches that name, or false otherwise</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.IsConditionalBranchInstruction(System.Reflection.Emit.OpCode)">
            <summary>
            Checks to see if an instruction opcode is a branch instruction.
            </summary>
            <param name="opcode">The opcode to check.</param>
            <returns>true if it is a branch, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.LogAllExceptions">
            <summary>
            Adds a logger to all unhandled exceptions.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.LogAllFailedAsserts">
            <summary>
            Adds a logger to all failed assertions. The assertions will still fail, but a stack
            trace will be printed for each failed assertion.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.ParametersMatch(System.Reflection.MethodBase,System.Type[])">
            <summary>
            Compares the method parameter list to the required parameters.
            </summary>
            <param name="method">The method to check.</param>
            <param name="required">The types its parameters need to have.</param>
            <returns>Negative if the method did not match, otherwise the total number of method parameters.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.ReplaceConstant(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Double,System.Double,System.Boolean)">
            <summary>
            Transpiles a method to replace instances of one constant value with another.
            </summary>
            <param name="method">The method to patch.</param>
            <param name="oldValue">The old constant to remove.</param>
            <param name="newValue">The new constant to replace.</param>
            <param name="all">true to replace all instances, or false to replace the first
            instance (default).</param>
            <returns>A transpiled version of that method which replaces instances of the first
            constant with that of the second.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.ReplaceConstant(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Single,System.Single,System.Boolean)">
            <summary>
            Transpiles a method to replace instances of one constant value with another.
            </summary>
            <param name="method">The method to patch.</param>
            <param name="oldValue">The old constant to remove.</param>
            <param name="newValue">The new constant to replace.</param>
            <param name="all">true to replace all instances, or false to replace the first
            instance (default).</param>
            <returns>A transpiled version of that method which replaces instances of the first
            constant with that of the second.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.ReplaceConstant(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Transpiles a method to replace instances of one constant value with another.
            
            Note that values of type byte, short, char, and bool are also represented with "i4"
            constants which can be targeted by this method.
            </summary>
            <param name="method">The method to patch.</param>
            <param name="oldValue">The old constant to remove.</param>
            <param name="newValue">The new constant to replace.</param>
            <param name="all">true to replace all instances, or false to replace the first
            instance (default).</param>
            <returns>A transpiled version of that method which replaces instances of the first
            constant with that of the second.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.ReplaceConstant(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Int64,System.Int64,System.Boolean)">
            <summary>
            Transpiles a method to replace instances of one constant value with another.
            </summary>
            <param name="method">The method to patch.</param>
            <param name="oldValue">The old constant to remove.</param>
            <param name="newValue">The new constant to replace.</param>
            <param name="all">true to replace all instances, or false to replace the first
            instance (default).</param>
            <returns>A transpiled version of that method which replaces instances of the first
            constant with that of the second.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.RemoveMethodCall(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodInfo)">
            <summary>
            Transpiles a method to remove all calls to the specified victim method.
            </summary>
            <param name="method">The method to patch.</param>
            <param name="victim">The old method calls to remove.</param>
            <returns>A transpiled version of that method that removes all calls to method.</returns>
            <exception cref="T:System.ArgumentException">If the method being removed had a return value
            (with what would it be replaced?).</exception>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.RemoveMethodCallPrivate">
            <summary>
            A placeholder method for signaling call removal. Not actually called.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.ReplaceMethodCall(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Transpiles a method to replace all calls to the specified victim method with
            another method, altering the call type if necessary. The argument types and return
            type must match exactly, including in/out/ref parameters.
            
            If replacing an instance method call with a static method, the first argument
            will receive the "this" which the old method would have received.
            
            If newMethod is null, the calls will all be removed silently instead. This will
            fail if the method call being removed had a return type (what would it be replaced
            with?); in those cases, declare an empty method with the same signature and
            replace it instead.
            </summary>
            <param name="method">The method to patch.</param>
            <param name="victim">The old method calls to remove.</param>
            <param name="newMethod">The new method to replace, or null to delete the calls.</param>
            <returns>A transpiled version of that method that replaces or removes all calls
            to method.</returns>
            <exception cref="T:System.ArgumentException">If the new method's argument types do not
            exactly match the old method's argument types.</exception>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.ReplaceMethodCallSafe(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Transpiles a method to replace all calls to the specified victim method with
            another method, altering the call type if necessary. The argument types and return
            type must match exactly, including in/out/ref parameters.
            
            If replacing an instance method call with a static method, the first argument
            will receive the "this" which the old method would have received.
            </summary>
            <param name="method">The method to patch.</param>
            <param name="victim">The old method calls to remove.</param>
            <param name="newMethod">The new method to replace.</param>
            <returns>A transpiled version of that method that replaces all calls to method.</returns>
            <exception cref="T:System.ArgumentException">If the new method's argument types do not
            exactly match the old method's argument types.</exception>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.ReplaceMethodCall(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Collections.Generic.IDictionary{System.Reflection.MethodInfo,System.Reflection.MethodInfo})">
            <summary>
            Transpiles a method to replace calls to the specified victim methods with
            replacement methods, altering the call type if necessary.
            
            Each key to value pair must meet the criteria defined in
            ReplaceMethodCall(TranspiledMethod, MethodInfo, MethodInfo).
            </summary>
            <param name="method">The method to patch.</param>
            <param name="translation">A mapping from the old method calls to replace, to the
            new method calls to use instead.</param>
            <returns>A transpiled version of that method that replaces or removes all calls
            to the specified methods.</returns>
            <exception cref="T:System.ArgumentException">If any of the new methods' argument types do
            not exactly match the old methods' argument types.</exception>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.ReplaceMethodCallSafe(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Collections.Generic.IDictionary{System.Reflection.MethodInfo,System.Reflection.MethodInfo})">
            <summary>
            Transpiles a method to replace calls to the specified victim methods with
            replacement methods, altering the call type if necessary.
            
            Each key to value pair must meet the criteria defined in
            ReplaceMethodCallSafe(TranspiledMethod, MethodInfo, MethodInfo).
            </summary>
            <param name="method">The method to patch.</param>
            <param name="translation">A mapping from the old method calls to replace, to the
            new method calls to use instead.</param>
            <returns>A transpiled version of that method that replaces or removes all calls
            to the specified methods.</returns>
            <exception cref="T:System.ArgumentException">If any of the new methods' argument types do
            not exactly match the old methods' argument types.</exception>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.TryGetFieldValue``1(System.Type,System.String,``0@)">
            <summary>
            Attempts to read a static field value from an object of a type not in this assembly.
            
            If this operation is expected to be performed more than once on the same object,
            use a delegate. If the type of the object is known, use Detours.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="type">The type whose static field should be read.</param>
            <param name="name">The field name.</param>
            <param name="value">The location where the field value will be stored.</param>
            <returns>true if the field was read, or false if the field was not found or
            has the wrong type.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.TryGetFieldValue``1(System.Object,System.String,``0@)">
            <summary>
            Attempts to read a non-static field value from an object of a type not in this
            assembly.
            
            If this operation is expected to be performed more than once on the same object,
            use a delegate. If the type of the object is known, use Detours.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="source">The source object.</param>
            <param name="name">The field name.</param>
            <param name="value">The location where the field value will be stored.</param>
            <returns>true if the field was read, or false if the field was not found or
            has the wrong type.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.TryGetPropertyValue``1(System.Object,System.String,``0@)">
            <summary>
            Attempts to read a property value from an object of a type not in this assembly.
            
            If this operation is expected to be performed more than once on the same object,
            use a delegate. If the type of the object is known, use Detours.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="source">The source object.</param>
            <param name="name">The property name.</param>
            <param name="value">The location where the property value will be stored.</param>
            <returns>true if the property was read, or false if the property was not found or
            has the wrong type.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.WrapWithErrorLogger(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator)">
            <summary>
            Transpiles a method to wrap it with a try/catch that logs and rethrows all
            exceptions.
            </summary>
            <param name="method">The method body to patch.</param>
            <param name="generator">The IL generator to make labels.</param>
            <returns>A transpiled version of that method that is wrapped with an error
            logger.</returns>
        </member>
        <member name="T:PeterHan.PLib.Core.PRegistry">
            <summary>
            Provides the user facing API to the PLib Registry.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PRegistry.Instance">
            <summary>
            The singleton instance of this class.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRegistry.instance">
            <summary>
            A pointer to the active PLib registry.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRegistry.instanceLock">
            <summary>
            Ensures that PLib can only be initialized by one thread at a time.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistry.GetData``1(System.String)">
            <summary>
            Retrieves a value from the single-instance share.
            </summary>
            <typeparam name="T">The type of the desired data.</typeparam>
            <param name="key">The string key to retrieve. <i>Suggested key format: YourMod.
            Category.KeyName</i></param>
            <returns>The data associated with that key.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistry.Init">
            <summary>
            Initializes the patch bootstrapper, creating a PRegistry if not yet present.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistry.LogPatchDebug(System.String)">
            <summary>
            Logs a debug message while patching in PLib patches.
            </summary>
            <param name="message">The debug message.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistry.LogPatchWarning(System.String)">
            <summary>
            Logs a warning encountered while patching in PLib patches.
            </summary>
            <param name="message">The warning message.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistry.PutData(System.String,System.Object)">
            <summary>
            Saves a value into the single-instance share.
            </summary>
            <param name="key">The string key to set. <i>Suggested key format: YourMod.
            Category.KeyName</i></param>
            <param name="value">The data to be associated with that key.</param>
        </member>
        <member name="T:PeterHan.PLib.Core.PRegistryComponent">
            <summary>
            A custom component added to manage shared data between mods, especially instances of
            PForwardedComponent used by both PLib and other mods.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRegistryComponent.PLIB_HARMONY">
            <summary>
            The Harmony instance name used when patching via PLib.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRegistryComponent.instance">
            <summary>
            A pointer to the active PLib registry.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRegistryComponent.instantiated">
            <summary>
            true if the forwarded components have been instantiated, or false otherwise.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistryComponent.ApplyLatest">
            <summary>
            Applies the latest version of all forwarded components.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PRegistryComponent.ModData">
            <summary>
            Stores shared mod data which needs single instance existence. Available to all
            PLib consumers through PLib API.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PRegistryComponent.PLibInstance">
            <summary>
            The Harmony instance used by PLib patching.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRegistryComponent.forwardedComponents">
            <summary>
            The candidate components with versions, from multiple assemblies.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRegistryComponent.instantiatedComponents">
            <summary>
            The components actually instantiated (latest version of each).
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRegistryComponent.latestComponents">
            <summary>
            The latest versions of each component.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistryComponent.AddCandidateVersion(System.String,PeterHan.PLib.Core.PForwardedComponent)">
            <summary>
            Adds a remote or local forwarded component by ID.
            </summary>
            <param name="id">The real ID of the component.</param>
            <param name="instance">The candidate instance to add.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistryComponent.ApplyBootstrapper">
            <summary>
            Applies a bootstrapper patch which will complete forwarded component initialization
            before mods are post-loaded.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistryComponent.DoAddCandidateVersion(System.Object)">
            <summary>
            Called from other mods to add a candidate version of a particular component.
            </summary>
            <param name="instance">The component to be added.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistryComponent.DoGetAllComponents(System.String)">
            <summary>
            Called from other mods to get a list of all components with the given ID.
            </summary>
            <param name="id">The component ID to retrieve.</param>
            <returns>The instantiated instance of that component, or null if no component by
            that name was found or ever registered.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistryComponent.DoGetLatestVersion(System.String)">
            <summary>
            Called from other mods to get the instantiated version of a particular component.
            </summary>
            <param name="id">The component ID to retrieve.</param>
            <returns>The instantiated instance of that component, or null if no component by
            that name was found or successfully instantiated.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistryComponent.Instantiate">
            <summary>
            Goes through the forwarded components, and picks the latest version of each to
            instantiate.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PriorityQueue`1">
            <summary>
            A class similar to Queue<typeparamref name="T" /> that allows efficient access to its
            items in ascending order.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityQueue`1.ChildIndex(System.Int32)">
            <summary>
            Returns the index of the specified item's first child. Its second child index is
            that index plus one.
            </summary>
            <param name="index">The item index.</param>
            <returns>The index of its first child.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityQueue`1.ParentIndex(System.Int32)">
            <summary>
            Returns the index of the specified item's parent.
            </summary>
            <param name="index">The item index.</param>
            <returns>The index of its parent.</returns>
        </member>
        <member name="P:PeterHan.PLib.Core.PriorityQueue`1.Count">
            <summary>
            The number of elements in this queue.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PriorityQueue`1.heap">
            <summary>
            The heap where the items are stored.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityQueue`1.#ctor">
            <summary>
            Creates a new PriorityQueue&lt;<typeparamref name="T" />&gt; with the default
            initial capacity.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityQueue`1.#ctor(System.Int32)">
            <summary>
            Creates a new PriorityQueue&lt;<typeparamref name="T" />&gt; with the specified
            initial capacity.
            </summary>
            <param name="capacity">The initial capacity of this queue.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityQueue`1.Clear">
            <summary>
            Removes all objects from this PriorityQueue&lt;<typeparamref name="T" />&gt;.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityQueue`1.Contains(`0)">
            <summary>
            Returns whether the specified key is present in this priority queue. This operation
            is fairly slow, use with caution.
            </summary>
            <param name="key">The key to check.</param>
            <returns>true if it exists in this priority queue, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityQueue`1.Dequeue">
            <summary>
            Removes and returns the smallest object in the
            PriorityQueue&lt;<typeparamref name="T" />&gt;.
            
            If multiple objects are the smallest object, an unspecified one is returned.
            </summary>
            <returns>The object that is removed from this PriorityQueue.</returns>
            <exception cref="T:System.InvalidOperationException">If this queue is empty.</exception>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the PriorityQueue&lt;<typeparamref name="T" />&gt;.
            </summary>
            <param name="item">The object to add to this PriorityQueue.</param>
            <exception cref="T:System.ArgumentNullException">If item is null.</exception>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityQueue`1.Peek">
            <summary>
            Returns the smallest object in the PriorityQueue&lt;<typeparamref name="T" />&gt;
            without removing it.
            
            If multiple objects are the smallest object, an unspecified one is returned.
            </summary>
            <returns>The smallest object in this PriorityQueue.</returns>
            <exception cref="T:System.InvalidOperationException">If this queue is empty.</exception>
        </member>
        <member name="T:PeterHan.PLib.Core.PriorityDictionary`2">
            <summary>
            A priority queue that includes a paired value.
            </summary>
            <typeparam name="K">The type to use for the sorting in the PriorityQueue.</typeparam>
            <typeparam name="V">The type to include as extra data.</typeparam>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityDictionary`2.#ctor">
            <summary>
            Creates a new PriorityDictionary&lt;<typeparamref name="K" />,
            <typeparamref name="V" />&gt; with the default initial capacity.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityDictionary`2.#ctor(System.Int32)">
            <summary>
            Creates a new PriorityDictionary&lt;<typeparamref name="K" />,
            <typeparamref name="V" />&gt; with the specified initial capacity.
            </summary>
            <param name="capacity">The initial capacity of this dictionary.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityDictionary`2.Dequeue(`0@,`1@)">
            <summary>
            Removes and returns the smallest object in the
            PriorityDictionary&lt;<typeparamref name="K" />, <typeparamref name="V" />&gt;.
            
            If multiple objects are the smallest object, an unspecified one is returned.
            </summary>
            <param name="key">The key of the object removed.</param>
            <param name="value">The value of the object removed.</param>
            <exception cref="T:System.InvalidOperationException">If this dictionary is empty.</exception>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityDictionary`2.Enqueue(`0,`1)">
            <summary>
            Adds an object to the PriorityDictionary&lt;<typeparamref name="K" />,
            <typeparamref name="V" />&gt;.
            </summary>
            <param name="key">The key to add to this PriorityDictionary.</param>
            <param name="value">The value to add to this PriorityDictionary.</param>
            <exception cref="T:System.ArgumentNullException">If item is null.</exception>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityDictionary`2.Peek(`0@,`1@)">
            <summary>
            Returns the smallest object in the PriorityDictionary&lt;<typeparamref name="K" />,
            <typeparamref name="V" />&gt; without removing it.
            
            If multiple objects are the smallest object, an unspecified one is returned.
            </summary>
            <param name="key">The key of the smallest object.</param>
            <param name="value">The value of the smallest object.</param>
            <exception cref="T:System.InvalidOperationException">If this dictionary is empty.</exception>
        </member>
        <member name="T:PeterHan.PLib.Core.PriorityDictionary`2.PriorityQueuePair">
            <summary>
            Stores a value with the key that is used for comparison.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PriorityDictionary`2.PriorityQueuePair.Key">
            <summary>
            Retrieves the key of this QueueItem.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PriorityDictionary`2.PriorityQueuePair.Value">
            <summary>
            Retrieves the value of this QueueItem.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityDictionary`2.PriorityQueuePair.#ctor(`0,`1)">
            <summary>
            Creates a new priority queue pair.
            </summary>
            <param name="key">The item key.</param>
            <param name="value">The item value.</param>
        </member>
        <member name="T:PeterHan.PLib.Core.PStateMachines">
            <summary>
            Contains tools for dealing with state machines.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PStateMachines.CreateState``2(GameStateMachine{``0,``1},System.String)">
            <summary>
            Creates and initializes a new state. This method should be used in a postfix patch
            on InitializeStates if new states are to be added.
            </summary>
            <typeparam name="T">The state machine type.</typeparam>
            <typeparam name="I">The state machine Instance type.</typeparam>
            <param name="sm">The base state machine.</param>
            <param name="name">The state name.</param>
            <returns>The new state.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PStateMachines.CreateState``3(GameStateMachine{``0,``1,``2},System.String)">
            <summary>
            Creates and initializes a new state. This method should be used in a postfix patch
            on InitializeStates if new states are to be added.
            </summary>
            <typeparam name="T">The state machine type.</typeparam>
            <typeparam name="I">The state machine Instance type.</typeparam>
            <typeparam name="M">The state machine Target type.</typeparam>
            <param name="sm">The base state machine.</param>
            <param name="name">The state name.</param>
            <returns>The new state.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PStateMachines.ClearEnterActions(StateMachine.BaseState)">
            <summary>
            Clears the existing Enter actions on a state.
            </summary>
            <param name="state">The state to modify.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PStateMachines.ClearExitActions(StateMachine.BaseState)">
            <summary>
            Clears the existing Exit actions on a state.
            </summary>
            <param name="state">The state to modify.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PStateMachines.ClearTransitions(StateMachine.BaseState)">
            <summary>
            Clears the existing Transition actions on a state. Parameter transitions are not
            affected.
            </summary>
            <param name="state">The state to modify.</param>
        </member>
        <member name="T:PeterHan.PLib.Core.PTranspilerTools">
            <summary>
            A utility class with transpiler tools.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PTranspilerTools.BRANCH_CODES">
            <summary>
            The opcodes that branch control conditionally.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PTranspilerTools.LOAD_INT">
            <summary>
            Opcodes to load an integer onto the stack.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.CompareMethodParams(System.Reflection.MethodInfo,System.Type[],System.Reflection.MethodInfo)">
            <summary>
            Compares the method parameters and throws ArgumentException if they do not match.
            </summary>
            <param name="victim">The victim method.</param>
            <param name="paramTypes">The method's parameter types.</param>
            <param name="newMethod">The replacement method.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.GenerateBasicLoad(System.Reflection.Emit.ILGenerator,System.Type,System.Object)">
            <summary>
            Pushes the specified value onto the evaluation stack. This method does not work on
            compound value types or by-ref types, as those need a local variable. If the value
            is DBNull.Value, then default(value) will be used instead.
            </summary>
            <param name="generator">The IL generator where the opcodes will be emitted.</param>
            <param name="type">The type of the value to generate.</param>
            <param name="value">The value to load.</param>
            <returns>true if instructions were pushed (all basic types and reference types),
            or false otherwise (by ref type or compound value type).</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.GenerateDefaultLoad(System.Reflection.Emit.ILGenerator,System.Type,System.Object)">
            <summary>
            Creates a local if necessary, and generates initialization code for the default
            value of the specified type. The resulting value ends up on the stack in a form
            that it would be used for the method argument.
            </summary>
            <param name="generator">The IL generator where the opcodes will be emitted.</param>
            <param name="type">The type to load and initialize.</param>
            <param name="defaultValue">The default value to load.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.GetParameterTypes(System.Reflection.MethodInfo)">
            <summary>
            Gets the method's parameter types.
            </summary>
            <param name="method">The method to query.</param>
            <returns>The type of each parameter of the method.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.IsConditionalBranchInstruction(System.Reflection.Emit.OpCode)">
            <summary>
            Checks to see if an instruction opcode is a branch instruction.
            </summary>
            <param name="opcode">The opcode to check.</param>
            <returns>true if it is a branch, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.LogAllExceptions">
            <summary>
            Adds a logger to all unhandled exceptions.
            
            Not for production use.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.LogAllFailedAsserts">
            <summary>
            Adds a logger to all failed assertions. The assertions will still fail, but a stack
            trace will be printed for each failed assertion.
            
            Not for production use.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.ModifyLoadI4(HarmonyLib.CodeInstruction,System.Int32)">
            <summary>
            Modifies a load instruction to load the specified constant, using short forms if
            possible.
            </summary>
            <param name="instruction">The instruction to modify.</param>
            <param name="newValue">The new i4 constant to load.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.OnAssertFailed(System.Boolean)">
            <summary>
            Logs a failed assertion that is about to occur.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.OnThrown(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            An optional handler for all unhandled exceptions.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.PushDeclaringType(System.Type[],System.Type)">
            <summary>
            Inserts the declaring instance type to the front of the specified array.
            </summary>
            <param name="types">The parameter types.</param>
            <param name="declaringType">The type which declared this method.</param>
            <returns>The types with declaringType inserted at the beginning.</returns>
        </member>
        <member name="T:PeterHan.PLib.Core.PUtil">
            <summary>
            Static utility functions used across mods.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PUtil.GameVersion">
            <summary>
            Retrieves the current changelist version of the game. LU-371502 has a version of
            371502u.
            
            If the version cannot be determined, returns 0.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PUtil.initialized">
            <summary>
            Whether PLib has been initialized.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PUtil.initializeLock">
            <summary>
            Serializes attempts to initialize PLib.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PUtil.INVALID_FILE_CHARS">
            <summary>
            The characters which are not allowed in file names.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.CreateAssemblyToModTable">
            <summary>
            Generates a mapping of assembly names to Mod instances. Only works after all mods
            have been loaded.
            </summary>
            <returns>A mapping from assemblies to the Mod instance that owns them.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.Distance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Finds the distance between two points.
            </summary>
            <param name="x1">The first X coordinate.</param>
            <param name="y1">The first Y coordinate.</param>
            <param name="x2">The second X coordinate.</param>
            <param name="y2">The second Y coordinate.</param>
            <returns>The non-taxicab (straight line) distance between the points.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.Distance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Finds the distance between two points.
            </summary>
            <param name="x1">The first X coordinate.</param>
            <param name="y1">The first Y coordinate.</param>
            <param name="x2">The second X coordinate.</param>
            <param name="y2">The second Y coordinate.</param>
            <returns>The non-taxicab (straight line) distance between the points.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.GetGameVersion">
            <summary>
            Retrieves the current game version from the Klei code.
            </summary>
            <returns>The change list version of the game, or 0 if it cannot be determined.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.GetModPath(System.Reflection.Assembly)">
            <summary>
            Retrieves the mod directory for the specified assembly. If an archived version is
            running, the path to that version is reported.
            </summary>
            <param name="modDLL">The assembly used for a mod.</param>
            <returns>The directory where the mod is currently executing.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.InitLibrary(System.Boolean)">
            <summary>
            Initializes PLib. While most components are initialized dynamically if used, some
            key infrastructure must be initialized first.
            </summary>
            <param name="logVersion">If true, the mod name and version is emitted to the log.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.IsValidFileName(System.String)">
            <summary>
            Returns true if the file is a valid file name. If the argument contains path
            separator characters, this method returns false, since that is not a valid file
            name.
            
            Null and empty file names are not valid file names.
            </summary>
            <param name="file">The file name to check.</param>
            <returns>true if the name could be used to name a file, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.LogDebug(System.Object)">
            <summary>
            Logs a message to the debug log.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.LogError(System.Object)">
            <summary>
            Logs an error message to the debug log.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.LogException(System.Exception)">
            <summary>
            Logs an exception message to the debug log.
            </summary>
            <param name="thrown">The exception to log.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.LogExcWarn(System.Exception)">
            <summary>
            Logs an exception message to the debug log at WARNING level.
            </summary>
            <param name="thrown">The exception to log.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.LogWarning(System.Object)">
            <summary>
            Logs a warning message to the debug log.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.Time(System.Action,System.String)">
            <summary>
            Measures how long the specified code takes to run. The result is logged to the
            debug log in microseconds.
            </summary>
            <param name="code">The code to execute.</param>
            <param name="header">The name used in the log to describe this code.</param>
        </member>
        <member name="T:PeterHan.PLib.Core.PVersionList">
            <summary>
            Stores a list of forwarded component versions and their shared data.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PVersionList.Components">
            <summary>
            The list of registered components.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PVersionList.SharedData">
            <summary>
            The data shared between all components.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PRemoteComponent">
            <summary>
            Delegates calls to forwarded components in other assemblies.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PRemoteComponent.InitializeDelegate">
            <summary>
            The prototype used for delegates to remote Initialize.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PRemoteComponent.ProcessDelegate">
            <summary>
            The prototype used for delegates to remote Process.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteComponent.doBootstrap">
            <summary>
            Points to the component's version of Bootstrap.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteComponent.doInitialize">
            <summary>
            Points to the component's version of Initialize.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteComponent.doPostInitialize">
            <summary>
            Points to the component's version of PostInitialize.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteComponent.getData">
            <summary>
            Gets the component's data.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteComponent.process">
            <summary>
            Runs the processing method of the component.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteComponent.setData">
            <summary>
            Sets the component's data.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteComponent.version">
            <summary>
            The component's version.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteComponent.wrapped">
            <summary>
            The wrapped instance from the other mod.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PRemoteRegistry">
            <summary>
            Transparently provides the functionality of PRegistry, while the actual instance is
            from another mod's bootstrapper.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PRemoteRegistry.GetAllComponentsDelegate">
            <summary>
            The prototype used for delegates to remote GetAllComponents.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PRemoteRegistry.GetObjectDelegate">
            <summary>
            The prototype used for delegates to remote GetLatestVersion and GetSharedData.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PRemoteRegistry.SetObjectDelegate">
            <summary>
            The prototype used for delegates to remote SetSharedData.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteRegistry.addCandidateVersion">
            <summary>
            Points to the local registry's version of AddCandidateVersion.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteRegistry.getAllComponents">
            <summary>
            Points to the local registry's version of GetAllComponents.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteRegistry.getLatestVersion">
            <summary>
            Points to the local registry's version of GetLatestVersion.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteRegistry.getSharedData">
            <summary>
            Points to the local registry's version of GetSharedData.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteRegistry.setSharedData">
            <summary>
            Points to the local registry's version of SetSharedData.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteRegistry.remoteComponents">
            <summary>
            The components actually instantiated (latest version of each).
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PRemoteRegistry.#ctor(System.Object)">
            <summary>
            Creates a remote registry wrapping the target object.
            </summary>
            <param name="instance">The PRegistryComponent instance to wrap.</param>
        </member>
        <member name="T:PeterHan.PLib.PatchManager.IPatchMethodInstance">
            <summary>
            Refers to a single instance of the annotation, with its annotated method.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.IPatchMethodInstance.Run(HarmonyLib.Harmony)">
            <summary>
            Runs the patch or method if the conditions are met. This method should check its
            preconditions before executing the target.
            </summary>
            <param name="instance">The Harmony instance to use.</param>
        </member>
        <member name="T:PeterHan.PLib.PatchManager.IPLibAnnotation">
            <summary>
            The commmon parent of [PLibPatch] and [PLibMethod].
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.IPLibAnnotation.Runtime">
            <summary>
            When this method is run.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.IPLibAnnotation.CreateInstance(System.Reflection.MethodInfo)">
            <summary>
            Creates a new patch method instance.
            </summary>
            <param name="method">The method that was attributed.</param>
            <returns>An instance that can execute this patch.</returns>
        </member>
        <member name="T:PeterHan.PLib.PatchManager.PLibMethodAttribute">
            <summary>
            Represents a method that will be run by PLib at a specific time to reduce the number
            of patches required and allow conditional integration with other mods.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibMethodAttribute.RequireAssembly">
            <summary>
            Requires the specified assembly to be loaded for this method to run. If RequireType
            is null or empty, no particular types need to be defined in the assembly. The
            assembly name is required, but the version is optional (strong named assemblies
            can never load in ONI, since neither Unity nor Klei types are strong named...)
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibMethodAttribute.RequireType">
            <summary>
            Requires the specified type full name (not assembly qualified name) to exist for
            this method to run. If RequireAssembly is null or empty, a type in any assembly
            will satisfy the requirement.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibMethodAttribute.Runtime">
            <summary>
            When this method is run.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibMethodAttribute.CreateInstance(System.Reflection.MethodInfo)">
            <summary>
            Creates a new patch method instance.
            </summary>
            <param name="method">The method that was attributed.</param>
            <returns>An instance that can execute this patch.</returns>
        </member>
        <member name="T:PeterHan.PLib.PatchManager.PLibMethodInstance">
            <summary>
            Refers to a single instance of the annotation, with its annotated method.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibMethodInstance.Descriptor">
            <summary>
            The attribute describing the method.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibMethodInstance.Method">
            <summary>
            The method to run.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibMethodInstance.Run(HarmonyLib.Harmony)">
            <summary>
            Runs the method, passing the required parameters if any.
            </summary>
            <param name="instance">The Harmony instance to use if the method wants to
            perform a patch.</param>
        </member>
        <member name="T:PeterHan.PLib.PatchManager.PLibPatchAttribute">
            <summary>
            Represents a method that will be patched by PLib at a specific time to allow
            conditional integration with other mods.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchAttribute.ArgumentTypes">
            <summary>
            The required argument types. If null, any matching method name is patched, or an
            exception thrown if more than one matches.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchAttribute.IgnoreOnFail">
            <summary>
            If this flag is set, the patch will emit only at DEBUG level if the target method
            is not found or matches ambiguously.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchAttribute.MethodName">
            <summary>
            The name of the method to patch.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchAttribute.PatchType">
            <summary>
            The type of patch to apply through Harmony.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchAttribute.RequireAssembly">
            <summary>
            Requires the specified assembly to be loaded for this method to run. If RequireType
            is null or empty, no particular types need to be defined in the assembly. The
            assembly name is required, but the version is optional (strong named assemblies
            can never load in ONI, since neither Unity nor Klei types are strong named...)
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchAttribute.RequireType">
            <summary>
            Requires the specified type full name (not assembly qualified name) to exist for
            this method to run. If RequireAssembly is null or empty, a type in any assembly
            will satisfy the requirement.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchAttribute.Runtime">
            <summary>
            When this method is run.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchAttribute.TargetType">
            <summary>
            The type to patch. If null, the patcher will try to use the required type from the
            RequireType parameter.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchAttribute.#ctor(System.UInt32,System.Type,System.String)">
            <summary>
            Patches a concrete type and method.
            
            Passing null as the method name will attempt to patch a constructor. Only one
            declared constructor may be present, or the call will fail at patch time.
            </summary>
            <param name="runtime">When to apply the patch.</param>
            <param name="target">The type to patch.</param>
            <param name="method">The method name to patch.</param>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchAttribute.#ctor(System.UInt32,System.Type,System.String,System.Type[])">
            <summary>
            Patches a concrete type and overloaded method.
            
            Passing null as the method name will attempt to patch a constructor.
            </summary>
            <param name="runtime">When to apply the patch.</param>
            <param name="target">The type to patch.</param>
            <param name="method">The method name to patch.</param>
            <param name="argTypes">The types of the overload to patch.</param>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchAttribute.#ctor(System.UInt32,System.String)">
            <summary>
            Patches a method only if a specified type is available. Use optional parameters to
            specify the type to patch using RequireType / RequireAssembly.
            
            Passing null as the method name will attempt to patch a constructor. Only one
            declared constructor may be present, or the call will fail at patch time.
            </summary>
            <param name="runtime">When to apply the patch.</param>
            <param name="method">The method name to patch.</param>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchAttribute.#ctor(System.UInt32,System.String,System.Type[])">
            <summary>
            Patches an overloaded method only if a specified type is available. Use optional
            parameters to specify the type to patch using RequireType / RequireAssembly.
            
            Passing null as the method name will attempt to patch a constructor.
            </summary>
            <param name="runtime">When to apply the patch.</param>
            <param name="method">The method name to patch.</param>
            <param name="argTypes">The types of the overload to patch.</param>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchAttribute.CreateInstance(System.Reflection.MethodInfo)">
            <summary>
            Creates a new patch method instance.
            </summary>
            <param name="method">The method that was attributed.</param>
            <returns>An instance that can execute this patch.</returns>
        </member>
        <member name="T:PeterHan.PLib.PatchManager.PLibPatchInstance">
            <summary>
            Refers to a single instance of the annotation, with its annotated method.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchInstance.Descriptor">
            <summary>
            The attribute describing the method.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchInstance.Method">
            <summary>
            The method to run.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchInstance.GetPatchType">
            <summary>
            Calculates the patch type to perform.
            </summary>
            <returns>The type of Harmony patch to use for this method.</returns>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchInstance.GetTargetConstructor(System.Type,System.Type[])">
            <summary>
            Gets the specified instance constructor.
            </summary>
            <param name="targetType">The type to be constructed.</param>
            <param name="argumentTypes">The types of the arguments for this constructor.</param>
            <returns>The target constructor.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">If no parameter types were specified,
            and multiple declared constructors exist.</exception>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchInstance.GetTargetMethod(System.Type)">
            <summary>
            Calculates the target method to patch.
            </summary>
            <param name="requiredType">The type to use if no type was specified.</param>
            <returns>The method to patch.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">If no parameter types were specified,
            and multiple options match the method name.</exception>
            <exception cref="T:System.InvalidOperationException">If the target method was not found.</exception>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchInstance.LogIgnoreOnFail(System.Exception)">
            <summary>
            Logs a message at debug level if Ignore On Patch Fail is enabled.
            </summary>
            <param name="e">The exception thrown during patching.</param>
            <returns>true to suppress the exception, or false to rethrow it.</returns>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchInstance.Run(HarmonyLib.Harmony)">
            <summary>
            Applies the patch.
            </summary>
            <param name="instance">The Harmony instance to use.</param>
            <exception cref="T:System.InvalidOperationException">If the </exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">If no parameter types were specified,
            and multiple options match the method name.</exception>
        </member>
        <member name="T:PeterHan.PLib.PatchManager.PPatchManager">
            <summary>
            Manages patches that PLib will conditionally apply.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.PPatchManager.FLAGS">
            <summary>
            The base flags to use when matching instance or static methods.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.PPatchManager.FLAGS_EITHER">
            <summary>
            The flags to use when matching instance and static methods.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.PPatchManager.VERSION">
            <summary>
            The version of this component. Uses the running PLib version.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PPatchManager.Instance">
            <summary>
            The instantiated copy of this class.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.PPatchManager.afterModsLoaded">
            <summary>
            true if the AfterModsLoad patches have been run, or false otherwise.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.PPatchManager.harmony">
            <summary>
            The Harmony instance to use for patching.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.PPatchManager.patches">
            <summary>
            Patches and delegates to be run at specific points in the runtime. Put the kibosh
            on patching Db.Initialize()!
            </summary>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PPatchManager.CheckConditions(System.String,System.String,System.Type@)">
            <summary>
            Checks to see if the conditions for a method running are met.
            </summary>
            <param name="assemblyName">The assembly name that must be present, or null if none is required.</param>
            <param name="typeName">The type full name that must be present, or null if none is required.</param>
            <param name="requiredType">The type that was required, if typeName was not null or empty.</param>
            <returns>true if the requirements are met, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PPatchManager.#ctor(HarmonyLib.Harmony)">
            <summary>
            Creates a patch manager to execute patches at specific times.
            
            Create this instance in OnLoad() and use RegisterPatchClass to register a
            patch class.
            </summary>
            <param name="harmony">The Harmony instance to use for patching.</param>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PPatchManager.AddHandler(System.UInt32,PeterHan.PLib.PatchManager.IPatchMethodInstance)">
            <summary>
            Schedules a patch method instance to be run.
            </summary>
            <param name="when">When to run the patch.</param>
            <param name="instance">The patch method instance to run.</param>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PPatchManager.RegisterPatch(System.UInt32,PeterHan.PLib.PatchManager.IPatchMethodInstance)">
            <summary>
            Registers a single patch to be run by Patch Manager. Obviously, the patch must be
            registered before the time that it is used.
            </summary>
            <param name="when">The time when the method should be run.</param>
            <param name="patch">The patch to execute.</param>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PPatchManager.RegisterPatchClass(System.Type)">
            <summary>
            Registers a class containing methods for [PLibPatch] and [PLibMethod] handlers.
            All methods, public and private, of the type will be searched for annotations.
            However, nested and derived types will not be searched, nor will inherited methods.
            
            This method cannot be used to register a class from another mod, as the annotations
            on those methods would have a different assembly qualified name and would thus
            not be recognized.
            </summary>
            <param name="type">The type to register.</param>
        </member>
        <member name="T:PeterHan.PLib.PatchManager.RunAt">
            <summary>
            Describes when a PLibPatch or PLibMethod should be invoked.
            
            Due to a bug in ILRepack an enum type in PLib cannot be used as a parameter for a
            custom attribute. ILmerge does not have this bug.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.Immediately">
            <summary>
            Runs the method/patch now.
            
            Note that mods may load in any order and thus not all mods may be initialized at
            this time.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.AfterModsLoad">
            <summary>
            Runs after all mods load, but before most other aspects of the game (including
            Assets, Db, and so forth) are initialized. This will run before any other mod
            has their UserMod2.AfterModsLoad executed. All PLib components will be initialized
            by this point.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.BeforeDbInit">
            <summary>
            Runs immediately before Db.Initialize.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.AfterDbInit">
            <summary>
            Runs immediately after Db.Initialize.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.InMainMenu">
            <summary>
            Runs when the main menu has loaded.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.OnStartGame">
            <summary>
            Runs when Game.OnPrefabInit has completed.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.OnEndGame">
            <summary>
            Runs when Game.DestroyInstances is executed.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.AfterLayerableLoad">
            <summary>
            Runs after all mod data (including layerable files like world gen and codex/
            elements) are loaded. This comes after all UserMod2.AfterModsLoad handlers execute.
            All PLib components will be initialized by this point.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.BeforeDbPostProcess">
            <summary>
            Runs immediately before Db.PostProcess.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.AfterDbPostProcess">
            <summary>
            Runs immediately after Db.PostProcess.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.OnDetailsScreenInit">
            <summary>
            Runs when DetailsScreen.OnPrefabInit has completed.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.STRING_VALUES">
            <summary>
            The string equivalents of each constant for debugging.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.RunAt.ToString(System.UInt32)">
            <summary>
            Gets a human readable representation of a run time constant.
            </summary>
            <param name="runtime">The time when the patch should be run.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.TextMeshProPatcher">
            <summary>
            Patches bugs in Text Mesh Pro.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.TextMeshProPatcher.HARMONY_ID">
            <summary>
            The ID to use for Harmony patches.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.TextMeshProPatcher.patchChecked">
            <summary>
            Tracks whether the TMP patches have been checked.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.TextMeshProPatcher.patchLock">
            <summary>
            Serializes multiple thread access to the patch status.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.TextMeshProPatcher.AssignPositioningIfNeeded_Prefix(TMPro.TMP_InputField,UnityEngine.RectTransform,TMPro.TMP_Text)">
            <summary>
            Applied to TMP_InputField to fix a bug that prevented auto layout from ever
            working.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.TextMeshProPatcher.HasOurPatch(System.Collections.Generic.IEnumerable{HarmonyLib.Patch})">
            <summary>
            Checks to see if a patch with our class name has already been applied.
            </summary>
            <param name="patchList">The patch list to search.</param>
            <returns>true if a patch with this class has already patched the method, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.TextMeshProPatcher.InputFieldPatches(System.Type)">
            <summary>
            Patches TMP_InputField with fixes, but only if necessary.
            </summary>
            <param name="tmpType">The type of TMP_InputField.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.TextMeshProPatcher.OnEnable_Postfix(UnityEngine.UI.Scrollbar,TMPro.TMP_Text)">
            <summary>
            Applied to TMPro.TMP_InputField to fix a clipping bug inside of Scroll Rects.
            
            https://forum.unity.com/threads/textmeshpro-text-still-visible-when-using-nested-rectmask2d.537967/
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.TextMeshProPatcher.Patch">
            <summary>
            Patches Text Mesh Pro input fields to fix a variety of bugs. Should be used before
            any Text Mesh Pro objects are created.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.TextMeshProPatcher.ResizeCaret(UnityEngine.RectTransform,UnityEngine.RectTransform)">
            <summary>
            Resizes the caret object to match the text. Used as an enumerator.
            </summary>
            <param name="caretTransform">The rectTransform of the caret.</param>
            <param name="textTransform">The rectTransform of the text.</param>
        </member>
        <member name="T:PeterHan.PLib.Database.PCodexManager">
            <summary>
            Handles codex entries for mods by automatically loading YAML entries and subentries for
            critters and plants from the codex folder in their mod directories.
            
            The layerable files loader in the stock game is broken, so this class is required to
            correctly load new codex entries.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Database.PCodexManager.CREATURES_DIR">
            <summary>
            The subfolder from which critter codex entries are loaded.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Database.PCodexManager.PLANTS_DIR">
            <summary>
            The subfolder from which plant codex entries are loaded.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Database.PCodexManager.STORY_DIR">
            <summary>
            The subfolder from which story trait codex entries are loaded.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Database.PCodexManager.CODEX_FILES">
            <summary>
            The file extension used for codex entry/subentries.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Database.PCodexManager.CREATURES_CATEGORY">
            <summary>
            The codex category under which critter entries should go.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Database.PCodexManager.PLANTS_CATEGORY">
            <summary>
            The codex category under which plant entries should go.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Database.PCodexManager.STORY_CATEGORY">
            <summary>
            The codex category under which story trait entries should go.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Database.PCodexManager.VERSION">
            <summary>
            The version of this component. Uses the running PLib version.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Database.PCodexManager.WIDGET_TAG_MAPPINGS">
            <summary>
            Allow access to the private widget tag mappings field.
            Detouring sadly is not possible because CodexCache is a static class and cannot be
            a type parameter.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Database.PCodexManager.Instance">
            <summary>
            The instantiated copy of this class.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Database.PCodexManager.CollectEntries_Postfix(System.String,System.Collections.Generic.List{CodexEntry},System.String)">
            <summary>
            Applied to CodexCache to collect dynamic codex entries from the file system.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Database.PCodexManager.CollectSubEntries_Postfix(System.Collections.Generic.List{SubEntry})">
            <summary>
            Applied to CodexCache to collect dynamic codex sub entries from the file system.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Database.PCodexManager.LoadFromDirectory(System.Collections.Generic.ICollection{CodexEntry},System.String,System.String)">
            <summary>
            Loads codex entries from the specified directory.
            </summary>
            <param name="entries">The location where the data will be placed.</param>
            <param name="dir">The directory to load.</param>
            <param name="category">The category to assign to each entry thus loaded.</param>
        </member>
        <member name="M:PeterHan.PLib.Database.PCodexManager.LoadFromDirectory(System.Collections.Generic.ICollection{SubEntry},System.String)">
            <summary>
            Loads codex subentries from the specified directory.
            </summary>
            <param name="entries">The location where the data will be placed.</param>
            <param name="dir">The directory to load.</param>
        </member>
        <member name="M:PeterHan.PLib.Database.PCodexManager.YamlParseErrorCB(Klei.YamlIO.Error,System.Boolean)">
            <summary>
            A callback function for the YAML parser to process errors that it throws.
            </summary>
            <param name="error">The YAML parsing error</param>
        </member>
        <member name="F:PeterHan.PLib.Database.PCodexManager.creaturePaths">
            <summary>
            The paths for creature codex entries.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Database.PCodexManager.plantPaths">
            <summary>
            The paths for plant codex entries.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Database.PCodexManager.storyPaths">
            <summary>
            The paths for story trait codex entries.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Database.PCodexManager.LoadEntries(System.String)">
            <summary>
            Loads all codex entries for all mods registered.
            </summary>
            <param name="category">The codex category under which these data entries should be loaded.</param>
            <returns>The list of entries that were loaded.</returns>
        </member>
        <member name="M:PeterHan.PLib.Database.PCodexManager.LoadSubEntries">
            <summary>
            Loads all codex subentries for all mods registered.
            </summary>
            <returns>The list of subentries that were loaded.</returns>
        </member>
        <member name="M:PeterHan.PLib.Database.PCodexManager.RegisterCreatures(System.Reflection.Assembly)">
            <summary>
            Registers the calling mod as having custom creature codex entries. The entries will
            be read from the mod directory in the "codex/Creatures" subfolder. If the argument
            is omitted, the calling assembly is registered.
            </summary>
            <param name="assembly">The assembly to register as having creatures.</param>
        </member>
        <member name="M:PeterHan.PLib.Database.PCodexManager.RegisterPlants(System.Reflection.Assembly)">
            <summary>
            Registers the calling mod as having custom plant codex entries. The entries will
            be read from the mod directory in the "codex/Plants" subfolder. If the argument
            is omitted, the calling assembly is registered.
            </summary>
            <param name="assembly">The assembly to register as having plants.</param>
        </member>
        <member name="M:PeterHan.PLib.Database.PCodexManager.RegisterStory(System.Reflection.Assembly)">
            <summary>
            Registers the calling mod as having custom story trait codex entries. The entries
            will be read from the mod directory in the "codex/StoryTraits" subfolder. If the
            argument is omitted, the calling assembly is registered.
            </summary>
            <param name="assembly">The assembly to register as having story traits.</param>
        </member>
        <member name="T:PeterHan.PLib.Database.PColonyAchievement">
            <summary>
            A wrapper class used to create ColonyAchievement instances.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Database.PColonyAchievement.NewColonyAchievement">
            <summary>
            Prototypes the new ColonyAchievment constructor. This one is a monster with a
            zillion parallel parameters used only for victory animations (Klei please!) and
            gets changed often enough to warrant a detour.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Database.PColonyAchievement.NEW_COLONY_ACHIEVEMENT">
            <summary>
            Creates a new colony achievement.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Database.PColonyAchievement.Description">
            <summary>
            The achievement description (string, not a string key!)
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Database.PColonyAchievement.Icon">
            <summary>
            The icon to use for the achievement.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Database.PColonyAchievement.ID">
            <summary>
            The achievement ID.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Database.PColonyAchievement.IsVictory">
            <summary>
            Whether this colony achievement is considered a victory achievement.
            
            Victory achievements are displayed at the top, and can play a movie when they
            are satisfied.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Database.PColonyAchievement.Name">
            <summary>
            The achievement display name (string, not a string key!)
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Database.PColonyAchievement.OnVictory">
            <summary>
            The callback triggered if this achievement is a victory achievement when it is
            completed.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Database.PColonyAchievement.Requirements">
            <summary>
            The requirements for this achievement.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Database.PColonyAchievement.VictoryAudioSnapshot">
            <summary>
            This member is obsolete since the Sweet Dreams update. Use VictoryAudioSnapshoRef
            instead.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Database.PColonyAchievement.VictoryMessage">
            <summary>
            The message body to display when this achievement triggers.
            
            The game does not use this field by default, but it is available for victory
            callbacks.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Database.PColonyAchievement.VictoryTitle">
            <summary>
            The message title to display when this achievement triggers.
            
            The game does not use this field by default, but it is available for victory
            callbacks.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Database.PColonyAchievement.VictoryVideoData">
            <summary>
            The video data file to play when this achievement triggers.
            
            The game does not use this field by default, but it is available for victory
            callbacks.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Database.PColonyAchievement.VictoryVideoLoop">
            <summary>
            The video data file to loop behind the message when this achievement triggers.
            
            The game does not use this field by default, but it is available for victory
            callbacks.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Database.PColonyAchievement.#ctor(System.String)">
            <summary>
            Creates a new colony achievement wrapper.
            </summary>
            <param name="id">The achievement ID.</param>
        </member>
        <member name="M:PeterHan.PLib.Database.PColonyAchievement.AddAchievement">
            <summary>
            Creates and adds the achievement to the database. As platform achievements cannot
            be added using mods, the platform achievement ID will always be empty.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Database.PDatabaseUtils">
            <summary>
            Functions which deal with entries in the game database and strings.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Database.PDatabaseUtils.AddColonyAchievement(Database.ColonyAchievement)">
            <summary>
            Adds a colony achievement to the colony summary screen. Must be invoked after the
            database is initialized (Db.Initialize() postfix recommended).
            
            Note that achievement structures significantly changed from Vanilla to the DLC.
            </summary>
            <param name="achievement">The achievement to add.</param>
        </member>
        <member name="M:PeterHan.PLib.Database.PDatabaseUtils.AddStatusItemStrings(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the name and description for a status item.
            
            Must be used before the StatusItem is first instantiated.
            </summary>
            <param name="id">The status item ID.</param>
            <param name="category">The status item category.</param>
            <param name="name">The name to display in the UI.</param>
            <param name="desc">The description to display in the UI.</param>
        </member>
        <member name="M:PeterHan.PLib.Database.PDatabaseUtils.CreateAttributeModifier(System.String,System.Single,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates an attribute modifier using the attributes that work across multiple game
            versions.
            </summary>
            <param name="attributeID">The attribute ID to modify.</param>
            <param name="value">The amount to modify the attribute.</param>
            <param name="description">The description to display for the attribute.</param>
            <param name="multiplier">If true, the modifier is treated as a multiplier instead of an addition.</param>
            <param name="uiOnly">If true, the modifier is only shown in the UI.</param>
            <param name="readOnly">If true, the modifier value cannot be changed after creation.</param>
            <returns>The created attribute modifier.</returns>
        </member>
        <member name="M:PeterHan.PLib.Database.PDatabaseUtils.CreateAttributeModifier(System.String,System.Single,System.Func{System.String},System.Boolean,System.Boolean)">
            <summary>
            Creates an attribute modifier using the attributes that work across multiple game
            versions.
            </summary>
            <param name="attributeID">The attribute ID to modify.</param>
            <param name="value">The amount to modify the attribute.</param>
            <param name="getDescription">A function to retrieve the descriptor string.</param>
            <param name="multiplier">If true, the modifier is treated as a multiplier instead of an addition.</param>
            <param name="uiOnly">If true, the modifier is only shown in the UI.</param>
            <returns>The created attribute modifier.</returns>
        </member>
        <member name="M:PeterHan.PLib.Database.PDatabaseUtils.LogDatabaseDebug(System.String)">
            <summary>
            Logs a message encountered by the PLib database system.
            </summary>
            <param name="message">The debug message.</param>
        </member>
        <member name="M:PeterHan.PLib.Database.PDatabaseUtils.LogDatabaseWarning(System.String)">
            <summary>
            Logs a warning encountered by the PLib database system.
            </summary>
            <param name="message">The warning message.</param>
        </member>
        <member name="T:PeterHan.PLib.Database.PLocalization">
            <summary>
            Handles localization for mods by automatically loading po files from the translations
            folder in their mod directories.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Database.PLocalization.TRANSLATIONS_DIR">
            <summary>
            The subfolder from which translations will be loaded.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Database.PLocalization.VERSION">
            <summary>
            The version of this component. Uses the running PLib version.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Database.PLocalization.Localize(System.Reflection.Assembly,Localization.Locale)">
            <summary>
            Localizes the specified mod assembly.
            </summary>
            <param name="modAssembly">The assembly to localize.</param>
            <param name="locale">The locale file name to be used.</param>
        </member>
        <member name="M:PeterHan.PLib.Database.PLocalization.RewriteStrings(System.Reflection.Assembly)">
            <summary>
            Searches types in the assembly (no worries, Localization did this anyways, so they
            all either loaded or failed to load) for fields that already had loc string keys
            created, and fixes them if so.
            </summary>
            <param name="assembly">The assembly to check for strings.</param>
        </member>
        <member name="F:PeterHan.PLib.Database.PLocalization.toLocalize">
            <summary>
            The assemblies to be localized.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Database.PLocalization.DumpAll">
            <summary>
            Debug dumps the translation templates for ALL registered PLib localized mods.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Database.PLocalization.Register(System.Reflection.Assembly)">
            <summary>
            Registers the specified assembly for automatic PLib localization. If the argument
            is omitted, the calling assembly is registered.
            </summary>
            <param name="assembly">The assembly to register for PLib localization.</param>
        </member>
        <member name="T:PeterHan.PLib.Lighting.ILightShape">
            <summary>
            An interface describing local and remote instances of PLightShape.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Lighting.ILightShape.Identifier">
            <summary>
            The light shape identifier.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Lighting.ILightShape.KleiLightShape">
            <summary>
            The Klei LightShape represented by this light shape, used in Light2D definitions.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Lighting.ILightShape.RayMode">
            <summary>
            The raycast mode used by this light shape. (-1) if no rays are to be emitted.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Lighting.ILightShape.FillLight(PeterHan.PLib.Lighting.LightingArgs)">
            <summary>
            Invokes the light handler with the provided light information.
            </summary>
            <param name="args">The arguments passed to the user light handler.</param>
        </member>
        <member name="T:PeterHan.PLib.Lighting.LightingArgs">
            <summary>
            Arguments which are passed to lighting callbacks to perform lighting calculations.
            
            The range is the light radius supplied during the Light2D creation; do not light up
            tiles outside of this radius (measured by a square around SourceCell)!
            
            The source cell is the cell nearest to where the Light2D is currently located.
            
            Use the IDictionary interface to store the relative brightness of cells by their cell
            location. These values should be between 0 and 1 normally, with the maximum brightness
            being set by the intensity parameter of the Light2D. The user is responsible for
            ensuring that cells are valid before lighting them up.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Lighting.LightingArgs.Brightness">
            <summary>
            The location where lighting results are stored.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Lighting.LightingArgs.Range">
            <summary>
            The maximum range to use for cell lighting. Do not light up cells beyond this
            range from SourceCell.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Lighting.LightingArgs.Source">
            <summary>
            The source of the light.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Lighting.LightingArgs.SourceCell">
            <summary>
            The originating cell. Actual lighting can begin elsewhere, but the range limit is
            measured from this cell.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Lighting.LightingPatches">
            <summary>
            Contains all patches (many!) required by the PLib Lighting subsystem. Only applied by
            the latest version of PLightManager.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Lighting.LightingPatches.ApplyPatches(HarmonyLib.Harmony)">
            <summary>
            Applies the required lighting related patches.
            </summary>
            <param name="plibInstance">The Harmony instance to use for patching.</param>
        </member>
        <member name="M:PeterHan.PLib.Lighting.LightingPatches.PatchMethod(System.String)">
            <summary>
            Gets a HarmonyMethod instance for manual patching using a method from this class.
            </summary>
            <param name="name">The method name.</param>
            <returns>A reference to that method as a HarmonyMethod for patching.</returns>
        </member>
        <member name="T:PeterHan.PLib.Lighting.OctantBuilder">
            <summary>
            A builder class which creates default light patterns based on octants.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Lighting.OctantBuilder.ScanOctantFunc">
            <summary>
            The delegate type called to run the default DiscreteShadowCaster.ScanOctant.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Lighting.OctantBuilder.OCTANT_SCAN">
            <summary>
            The method to call to scan octants.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Lighting.OctantBuilder.Falloff">
            <summary>
            The fallout to use when building the light.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Lighting.OctantBuilder.SmoothLight">
            <summary>
            If false, uses the default game smoothing. If true, uses better smoothing.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Lighting.OctantBuilder.SourceCell">
            <summary>
            The origin cell.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Lighting.OctantBuilder.destination">
            <summary>
            The location where light cells are added.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Lighting.OctantBuilder.#ctor(System.Collections.Generic.IDictionary{System.Int32,System.Single},System.Int32)">
            <summary>
            Creates a new octant builder.
            </summary>
            <param name="destination">The location where the lit cells will be placed.</param>
            <param name="sourceCell">The origin cell of the light.</param>
        </member>
        <member name="M:PeterHan.PLib.Lighting.OctantBuilder.AddOctant(System.Int32,DiscreteShadowCaster.Octant)">
            <summary>
            Adds an octant of light.
            </summary>
            <param name="range">The range of the light.</param>
            <param name="octant">The octant to scan.</param>
            <returns>This object, for call chaining.</returns>
        </member>
        <member name="T:PeterHan.PLib.Lighting.PLightManager">
            <summary>
            Manages lighting. Instantiated only by the latest PLib version.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Lighting.PLightManager.CastLightDelegate">
            <summary>
            Implemented by classes which want to handle lighting calls.
            </summary>
            <param name="args">The parameters to use for lighting, and the location to
            store results. See the LightingArgs class documentation for details.</param>
        </member>
        <member name="F:PeterHan.PLib.Lighting.PLightManager.EMPTY_SHAPES">
            <summary>
            A singleton empty list instance for default values.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Lighting.PLightManager.VERSION">
            <summary>
            The version of this component. Uses the running PLib version.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Lighting.PLightManager.ForceSmoothLight">
            <summary>
            If true, enables the smooth light falloff mode even on vanilla lights.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Lighting.PLightManager.Instance">
            <summary>
            The instantiated copy of this class.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Lighting.PLightManager.GetDefaultFalloff(System.Single,System.Int32,System.Int32)">
            <summary>
            Calculates the brightness falloff as it would be in the stock game.
            </summary>
            <param name="falloffRate">The falloff rate to use.</param>
            <param name="cell">The cell where falloff is being computed.</param>
            <param name="origin">The light origin cell.</param>
            <returns>The brightness at that location from 0 to 1.</returns>
        </member>
        <member name="M:PeterHan.PLib.Lighting.PLightManager.GetSmoothFalloff(System.Single,System.Int32,System.Int32)">
            <summary>
            Calculates the brightness falloff similar to the default falloff, but far smoother.
            Slightly heavier on computation however.
            </summary>
            <param name="falloffRate">The falloff rate to use.</param>
            <param name="cell">The cell where falloff is being computed.</param>
            <param name="origin">The light origin cell.</param>
            <returns>The brightness at that location from 0 to 1.</returns>
        </member>
        <member name="M:PeterHan.PLib.Lighting.PLightManager.LightShapeToRayShape(Light2D)">
            <summary>
            Gets the raycasting shape to use for the given light.
            </summary>
            <param name="light">The light which is being drawn.</param>
            <returns>The shape to use for its rays.</returns>
        </member>
        <member name="M:PeterHan.PLib.Lighting.PLightManager.LogLightingDebug(System.String)">
            <summary>
            Logs a message encountered by the PLib lighting system.
            </summary>
            <param name="message">The debug message.</param>
        </member>
        <member name="M:PeterHan.PLib.Lighting.PLightManager.LogLightingWarning(System.String)">
            <summary>
            Logs a warning encountered by the PLib lighting system.
            </summary>
            <param name="message">The warning message.</param>
        </member>
        <member name="F:PeterHan.PLib.Lighting.PLightManager.brightCache">
            <summary>
            The light brightness set by the last lighting brightness request.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Lighting.PLightManager.PreviewObject">
            <summary>
            The last object that requested a preview. Only one preview can be requested at a
            time, so no need for thread safety.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Lighting.PLightManager.shapes">
            <summary>
            The lighting shapes available, all in this mod's namespace.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Lighting.PLightManager.#ctor">
            <summary>
            Creates a lighting manager to register PLib lighting.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Lighting.PLightManager.AddLight(LightGridManager.LightGridEmitter,UnityEngine.GameObject)">
            <summary>
            Adds a light to the lookup table.
            </summary>
            <param name="source">The source of the light.</param>
            <param name="owner">The light's owning game object.</param>
        </member>
        <member name="M:PeterHan.PLib.Lighting.PLightManager.DestroyLight(LightGridManager.LightGridEmitter)">
            <summary>
            Ends a call to lighting update initiated by CreateLight.
            </summary>
            <param name="source">The source of the light.</param>
        </member>
        <member name="M:PeterHan.PLib.Lighting.PLightManager.GetBrightness(LightGridManager.LightGridEmitter,System.Int32,LightGridManager.LightGridEmitter.State,System.Int32@)">
            <summary>
            Gets the brightness at a given cell for the specified light source.
            </summary>
            <param name="source">The source of the light.</param>
            <param name="location">The location to check.</param>
            <param name="state">The lighting state.</param>
            <param name="result">The brightness there.</param>
            <returns>true if that brightness is valid, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.Lighting.PLightManager.GetRayShape(LightShape)">
            <summary>
            Checks to see if a light has specified one of the built-in ray options to cast
            the little yellow rays around it.
            </summary>
            <param name="shape">The light shape to check.</param>
            <returns>The light shape to use for ray casting, or the original shape if it is
            a stock shape or a light shape not known to PLib Lighting.</returns>
        </member>
        <member name="M:PeterHan.PLib.Lighting.PLightManager.PreviewLight(System.Int32,System.Single,LightShape,System.Int32)">
            <summary>
            Creates the preview for a given light.
            </summary>
            <param name="origin">The starting cell.</param>
            <param name="radius">The light radius.</param>
            <param name="shape">The light shape.</param>
            <param name="lux">The base brightness in lux.</param>
            <returns>true if the lighting was handled, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.Lighting.PLightManager.Register(System.String,PeterHan.PLib.Lighting.PLightManager.CastLightDelegate,LightShape)">
            <summary>
            Registers a light shape handler.
            </summary>
            <param name="identifier">A unique identifier for this shape. If another mod has
            already registered that identifier, the previous mod will take precedence.</param>
            <param name="handler">The handler for that shape.</param>
            <param name="rayMode">The type of visual rays that are displayed from the light.</param>
            <returns>The light shape which can be used.</returns>
        </member>
        <member name="M:PeterHan.PLib.Lighting.PLightManager.UpdateLitCells(LightGridManager.LightGridEmitter,LightGridManager.LightGridEmitter.State,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Updates the lit cells list.
            </summary>
            <param name="source">The source of the light.</param>
            <param name="state">The light emitter state.</param>
            <param name="litCells">The location where lit cells will be placed.</param>
            <returns>true if the lighting was handled, or false otherwise.</returns>
        </member>
        <member name="T:PeterHan.PLib.Lighting.PLightManager.CacheEntry">
            <summary>
            A cache entry in the light brightness cache.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Lighting.PLightManager.CacheEntry.BaseLux">
            <summary>
            The base intensity in lux.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Lighting.PLightManager.CacheEntry.Intensity">
            <summary>
            The relative brightness per cell.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Lighting.PLightManager.CacheEntry.Owner">
            <summary>
            The owner which initiated the lighting call.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Lighting.PLightShape">
            <summary>
            Represents a light shape which can be used by mods.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Lighting.PLightShape.handler">
            <summary>
            The handler for this light shape.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Lighting.PLightShape.ShapeID">
            <summary>
            The light shape ID.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Lighting.PLightShape.DoFillLight(UnityEngine.GameObject,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.Int32,System.Single})">
            <summary>
            Invokes the light handler with the provided light information.
            </summary>
            <param name="source">The source of the light.</param>
            <param name="cell">The origin cell.</param>
            <param name="range">The range to fill.</param>
            <param name="brightness">The location where lit points will be stored.</param>
        </member>
        <member name="T:PeterHan.PLib.Lighting.PRemoteLightWrapper">
            <summary>
            Wraps a lighting system call from another mod's namespace.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Lighting.PRemoteLightWrapper.LightToInstance(System.Object)">
            <summary>
            Creates a light shape instance from another mod.
            </summary>
            <param name="other">The object to convert.</param>
            <returns>A light shape object in this mod's namespace that delegates lighting
            calls to the other mod if necessary.</returns>
        </member>
        <member name="F:PeterHan.PLib.Lighting.PRemoteLightWrapper.fillLight">
            <summary>
            The method to call when lighting system handling is requested.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.ButtonOptionsEntry">
            <summary>
            An options entry that displays a button. Not intended to be serializable to the
            options file, instead declare a read-only property that returns a handler method as
            an Action in the settings class, e.g:
            
            [Option("Click Here!", "Button tool tip")]
            public System.Action&lt;object&gt; MyButton =&gt; Handler;
            
            public void Handler() {
                // ...
            }
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ButtonOptionsEntry.value">
            <summary>
            The action to invoke when the button is pushed.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.CategoryExpandHandler">
            <summary>
            Handles events for expanding and contracting options categories.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.CategoryExpandHandler.contents">
            <summary>
            The realized panel containing the options.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.CategoryExpandHandler.initialState">
            <summary>
            The initial state of the button.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.CategoryExpandHandler.toggle">
            <summary>
            The realized toggle button.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.CategoryExpandHandler.#ctor(System.Boolean)">
            <summary>
            Creates a new options category.
            </summary>
            <param name="initialState">true to start expanded, or false to start collapsed.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.CategoryExpandHandler.OnExpandContract(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Fired when the options category is expanded or contracted.
            </summary>
            <param name="on">true if the button is on, or false if it is off.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.CategoryExpandHandler.OnHeaderClicked">
            <summary>
            Fired when the header is clicked.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.CategoryExpandHandler.OnRealizeHeader(UnityEngine.GameObject)">
            <summary>
            Fired when the category label is realized.
            </summary>
            <param name="header">The realized header label of the category.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.CategoryExpandHandler.OnRealizePanel(UnityEngine.GameObject)">
            <summary>
            Fired when the body is realized.
            </summary>
            <param name="panel">The realized body of the category.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.CategoryExpandHandler.OnRealizeToggle(UnityEngine.GameObject)">
            <summary>
            Fired when the toggle button is realized.
            </summary>
            <param name="toggle">The realized expand/contract button.</param>
        </member>
        <member name="T:PeterHan.PLib.Options.CheckboxOptionsEntry">
            <summary>
            An options entry which represents bool and displays a check box.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.CheckboxOptionsEntry.check">
            <summary>
            true if it is checked, or false otherwise
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.CheckboxOptionsEntry.checkbox">
            <summary>
            The realized item checkbox.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.Color32OptionsEntry">
            <summary>
            An options entry which represents Color32 and displays a color picker with sliders.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.ColorBaseOptionsEntry">
            <summary>
            The abstract base of options entries that display a color picker with sliders.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ColorBaseOptionsEntry.ENTRY_MARGIN">
            <summary>
            The margin between the color sliders and the rest of the dialog.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ColorBaseOptionsEntry.SLIDER_MARGIN">
            <summary>
            The margin around each slider.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ColorBaseOptionsEntry.SWATCH_SIZE">
            <summary>
            The size of the sample swatch.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ColorBaseOptionsEntry.hueGradient">
            <summary>
            The hue displayed gradient.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ColorBaseOptionsEntry.hueSlider">
            <summary>
            The hue slider.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ColorBaseOptionsEntry.blue">
            <summary>
            The realized text field for BLUE.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ColorBaseOptionsEntry.green">
            <summary>
            The realized text field for GREEN.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ColorBaseOptionsEntry.red">
            <summary>
            The realized text field for RED.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ColorBaseOptionsEntry.satGradient">
            <summary>
            The saturation displayed gradient.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ColorBaseOptionsEntry.satSlider">
            <summary>
            The saturation slider.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ColorBaseOptionsEntry.swatch">
            <summary>
            The color sample swatch.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ColorBaseOptionsEntry.valGradient">
            <summary>
            The value displayed gradient.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ColorBaseOptionsEntry.valSlider">
            <summary>
            The value slider.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ColorBaseOptionsEntry.value">
            <summary>
            The value as a Color.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.ColorBaseOptionsEntry.OnRGBChanged(UnityEngine.GameObject,System.String)">
            <summary>
            Called when the red, green, or blue field's text is changed.
            </summary>
            <param name="text">The new color value.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.ColorBaseOptionsEntry.UpdateAll">
            <summary>
            If the color is changed externally, updates all sliders.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.ColorBaseOptionsEntry.UpdateHue(System.Boolean)">
            <summary>
            Updates the position of the hue slider with the currently selected color.
            </summary>
            <param name="moveSlider">true to move the slider handle if necessary, or false to
            leave it where it is.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.ColorBaseOptionsEntry.UpdateRGB">
            <summary>
            Updates the displayed value.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.ColorBaseOptionsEntry.UpdateSat(System.Boolean)">
            <summary>
            Updates the position of the saturation slider with the currently selected color.
            </summary>
            <param name="moveSlider">true to move the slider handle if necessary, or false to
            leave it where it is.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.ColorBaseOptionsEntry.UpdateVal(System.Boolean)">
            <summary>
            Updates the position of the value slider with the currently selected color.
            </summary>
            <param name="moveSlider">true to move the slider handle if necessary, or false to
            leave it where it is.</param>
        </member>
        <member name="T:PeterHan.PLib.Options.ColorGradient">
            <summary>
            A background image which displays a gradient between two different colors using HSV
            interpolation.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.ColorGradient.Position">
            <summary>
            The position to use on the track.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.ColorGradient.SelectedColor">
            <summary>
            The currently selected color.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ColorGradient.current">
            <summary>
            The currently selected color.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ColorGradient.dirty">
            <summary>
            Whether the image texture needs to be regenerated.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ColorGradient.hue">
            <summary>
            Gradient unfortunately always uses RGB. Run curves manually using HSV.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ColorGradient.position">
            <summary>
            The position to use on the track.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.ColorGradient.preview">
            <summary>
            The texture used when drawing the background.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.ColorGradient.EstimatePosition">
            <summary>
            Estimates a position based on the selected color.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.ColorGradient.OnDestroy">
            <summary>
            Cleans up the preview when the component is disposed.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.ColorGradient.OnRectTransformDimensionsChange">
            <summary>
            Called when the image needs to be resized.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.ColorGradient.SetPosition">
            <summary>
            Updates the currently selected color with the interpolated value based on the
            current position.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.ColorGradient.SetRange(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the range of colors to be displayed.
            </summary>
            <param name="hMin">The minimum hue.</param>
            <param name="hMax">The maximum hue.</param>
            <param name="sMin">The minimum saturation.</param>
            <param name="sMax">The maximum saturation.</param>
            <param name="vMin">The minimum value.</param>
            <param name="vMax">The maximum value.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.ColorGradient.Start">
            <summary>
            Called by Unity when the component is created.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.ColorGradient.Update">
            <summary>
            Regenerates the color gradient image if necessary.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.ColorOptionsEntry">
            <summary>
            An options entry which represents Color and displays a color picker with sliders.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.CompositeOptionsEntry">
            <summary>
            An options entry that encapsulates other options. The category annotation on those
            objects will be ignored, and the category of the Option attribute on the property
            that declared those options (to avoid infinite loops) will be used instead.
            
            <b>This object is not in the scene graph.</b> Any events in OnRealize will never be
            invoked, and it is never "built".
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.CompositeOptionsEntry.Create(PeterHan.PLib.Options.IOptionSpec,System.Reflection.PropertyInfo,System.Int32)">
            <summary>
            Creates an options entry wrapper for the specified property, iterating its internal
            fields to create sub-options if needed (recursively).
            </summary>
            <param name="info">The property to wrap.</param>
            <param name="spec">The option title and tool tip.</param>
            <param name="depth">The current depth of iteration to avoid infinite loops.</param>
            <returns>An options wrapper, or null if no inner properties are themselves options.</returns>
        </member>
        <member name="P:PeterHan.PLib.Options.CompositeOptionsEntry.ChildCount">
            <summary>
            Reports the number of options contained inside this one.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.CompositeOptionsEntry.subOptions">
            <summary>
            The options encapsulated in this object.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.CompositeOptionsEntry.targetType">
            <summary>
            The type of the encapsulated object.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.CompositeOptionsEntry.value">
            <summary>
            The object thus wrapped.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.CompositeOptionsEntry.AddField(System.Reflection.PropertyInfo,PeterHan.PLib.Options.IOptionsEntry)">
            <summary>
            Adds an options entry object that operates on Option fields of the encapsulated
            object.
            </summary>
            <param name="info">The property that is wrapped.</param>
            <param name="entry">The entry to add.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.CompositeOptionsEntry.WhenRealized(UnityEngine.GameObject)">
            <summary>
            Updates the child objects for the first time when the panel is realized.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.ConfigFileAttribute">
            <summary>
            An attribute placed on an options class only (will not function on a member property)
            which denotes the config file name to use for that mod, and allows save/load options
            to be set.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.ConfigFileAttribute.ConfigFileName">
            <summary>
            The configuration file name. If null, the default file name will be used.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.ConfigFileAttribute.IndentOutput">
            <summary>
            Whether the output should be indented nicely. Defaults to false for smaller
            config files.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.ConfigFileAttribute.UseSharedConfigLocation">
            <summary>
            If true, the config file will be moved from the mod folder to a folder in the
            config directory shared across mods. This change preserves the mod configuration
            across updates, but may not be cleared when the mod is uninstalled. Use with
            caution.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.FloatOptionsEntry">
            <summary>
            An options entry which represents float and displays a text field and slider.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.FloatOptionsEntry.DEFAULT_FORMAT">
            <summary>
            The format to use if none is provided.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.FloatOptionsEntry.textField">
            <summary>
            The realized text field.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.FloatOptionsEntry.value">
            <summary>
            The value in the text field.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.FloatOptionsEntry.OnSliderChanged(UnityEngine.GameObject,System.Single)">
            <summary>
            Called when the slider's value is changed.
            </summary>
            <param name="newValue">The new slider value.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.FloatOptionsEntry.OnTextChanged(UnityEngine.GameObject,System.String)">
            <summary>
            Called when the input field's text is changed.
            </summary>
            <param name="text">The new text.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.FloatOptionsEntry.Update">
            <summary>
            Updates the displayed value.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.IntOptionsEntry">
            <summary>
            An options entry which represents int and displays a text field and slider.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.IntOptionsEntry.textField">
            <summary>
            The realized text field.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.IntOptionsEntry.value">
            <summary>
            The value in the text field.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.IntOptionsEntry.OnSliderChanged(UnityEngine.GameObject,System.Single)">
            <summary>
            Called when the slider's value is changed.
            </summary>
            <param name="newValue">The new slider value.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.IntOptionsEntry.OnTextChanged(UnityEngine.GameObject,System.String)">
            <summary>
            Called when the input field's text is changed.
            </summary>
            <param name="text">The new text.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.IntOptionsEntry.Update">
            <summary>
            Updates the displayed value.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.IOptions">
            <summary>
            An optional interface which can be implemented to give mods the ability to dynamically
            add new options at runtime, or to get a notification when options are updated to the
            options file.
            
            This interface is <b>optional</b>. There is no need to implement it to use PLib
            Options. But if one method is implemented, the other must also be. If not used,
            OnOptionsChanged should be empty, and CreateOptions should return an empty collection.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.IOptions.CreateOptions">
            <summary>
            Called to create additional options. After the options in this class have been
            read from the data file, but before the dialog is shown, this method will be
            invoked. Each return value must be of a type that implements IOptionsEntry.
            
            The options will be sorted and categorized normally as if they were present at the
            end of the property list in a regular options class.
            
            This method can be an enumerator using code like
            yield return new MyOptionsHandler();
            </summary>
            <returns>The custom options to implement.</returns>
        </member>
        <member name="M:PeterHan.PLib.Options.IOptions.OnOptionsChanged">
            <summary>
            Called when options are written to the file. The current object will have the same
            values as the data that was just written to the file. This call happens after the
            options have been stored to disk, but before any restart required dialog is shown
            (if [RestartRequired] is also on this class).
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.IOptionsEntry">
            <summary>
            All options handlers, including user dynamic option handlers, implement this type.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.IOptionsEntry.CreateUIEntry(PeterHan.PLib.UI.PGridPanel,System.Int32@)">
            <summary>
            Creates UI components that will present this option.
            </summary>
            <param name="parent">The parent panel where the components should be added.</param>
            <param name="row">The row index where the component should be placed. If multiple
            rows of components are added, increment this value for each additional row.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.IOptionsEntry.ReadFrom(System.Object)">
            <summary>
            Reads the option value into the UI from the provided settings object.
            </summary>
            <param name="settings">The settings object.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.IOptionsEntry.WriteTo(System.Object)">
            <summary>
            Writes the option value from the UI into the provided settings object.
            </summary>
            <param name="settings">The settings object.</param>
        </member>
        <member name="T:PeterHan.PLib.Options.IOptionSpec">
            <summary>
            The common parent of all classes that can specify the user visible attributes of an
            option.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.IOptionSpec.Category">
            <summary>
            The option category. Ignored and replaced with the parent option's category if
            this option is part of a custom grouped type.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.IOptionSpec.Format">
            <summary>
            The format string to use when displaying this option value. Only applicable for
            some types of options.
            
            <b>Warning</b>: Attribute may have issues on nested classes that are used as custom
            grouped options. To mitigate, try declaring the custom class in a non-nested
            context (i.e. not declared inside another class).
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.IOptionSpec.Title">
            <summary>
            The option title. Ignored for fields which are displayed as custom grouped types
            types of other options.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.IOptionSpec.Tooltip">
            <summary>
            The option description tooltip. Ignored for fields which are displayed as custom
            grouped types of other options.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.LimitAttribute">
            <summary>
            An attribute placed on an option field for a property used as mod options to define
            minimum and maximum acceptable values.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.LimitAttribute.Maximum">
            <summary>
            The maximum value (inclusive).
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.LimitAttribute.Minimum">
            <summary>
            The minimum value (inclusive).
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.LimitAttribute.ClampToRange(System.Single)">
            <summary>
            Clamps the specified value to the range of this Limits object.
            </summary>
            <param name="value">The value to coerce.</param>
            <returns>The nearest value included by these limits to the specified value.</returns>
        </member>
        <member name="M:PeterHan.PLib.Options.LimitAttribute.ClampToRange(System.Int32)">
            <summary>
            Clamps the specified value to the range of this Limits object.
            </summary>
            <param name="value">The value to coerce.</param>
            <returns>The nearest value included by these limits to the specified value.</returns>
        </member>
        <member name="M:PeterHan.PLib.Options.LimitAttribute.InRange(System.Double)">
            <summary>
            Reports whether a value is in the range included in these limits.
            </summary>
            <param name="value">The value to check.</param>
            <returns>true if it is included in the limits, or false otherwise.</returns>
        </member>
        <member name="T:PeterHan.PLib.Options.LogFloatOptionsEntry">
            <summary>
            An options entry which represents float and displays a text field and slider.
            This entry uses a logarithmic scale.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.LogFloatOptionsEntry.DEFAULT_FORMAT">
            <summary>
            The format to use if none is provided.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.LogFloatOptionsEntry.textField">
            <summary>
            The realized text field.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.LogFloatOptionsEntry.value">
            <summary>
            The value in the text field.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.LogFloatOptionsEntry.OnSliderChanged(UnityEngine.GameObject,System.Single)">
            <summary>
            Called when the slider's value is changed.
            </summary>
            <param name="newValue">The new slider value.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.LogFloatOptionsEntry.OnTextChanged(UnityEngine.GameObject,System.String)">
            <summary>
            Called when the input field's text is changed.
            </summary>
            <param name="text">The new text.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.LogFloatOptionsEntry.Update">
            <summary>
            Updates the displayed value.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.ModDialogInfo">
            <summary>
            Stores the information displayed about a mod in its options dialog.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.ModDialogInfo.GetModVersionText(System.Type)">
            <summary>
            Gets the text shown for a mod's version.
            </summary>
            <param name="optionsType">The type used for the mod settings.</param>
            <returns>The mod version description.</returns>
        </member>
        <member name="P:PeterHan.PLib.Options.ModDialogInfo.Image">
            <summary>
            The path to the image displayed (on the file system) for this mod.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.ModDialogInfo.Title">
            <summary>
            The mod title. The title is taken directly from the mod version information.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.ModDialogInfo.URL">
            <summary>
            The URL which will be displayed. If none was provided, the Steam workshop page URL
            will be reported for Steam mods, and an empty string for local/dev mods.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.ModDialogInfo.Version">
            <summary>
            The mod version.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.ModInfoAttribute">
            <summary>
            Allows mod authors to specify attributes for their mods to be shown in the Options
            dialog.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.ModInfoAttribute.ForceCollapseCategories">
            <summary>
            If true, forces all categories in the options screen to begin collapsed (except
            the default category).
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.ModInfoAttribute.Image">
            <summary>
            The name of the image file (in the mod's root directory) to display in the options
            dialog. If null or empty (or it cannot be loaded), no image is displayed.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.ModInfoAttribute.URL">
            <summary>
            The URL to use for the mod. If null or empty, the Steam workshop link will be used
            if possible, or otherwise the button will not be shown.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.NullableFloatOptionsEntry">
            <summary>
            An options entry which represents float? and displays a text field and slider.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.NullableFloatOptionsEntry.FieldText">
            <summary>
            The text that is rendered for the current value of the entry.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.NullableFloatOptionsEntry.textField">
            <summary>
            The realized text field.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.NullableFloatOptionsEntry.value">
            <summary>
            The value in the text field.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.NullableFloatOptionsEntry.OnSliderChanged(UnityEngine.GameObject,System.Single)">
            <summary>
            Called when the slider's value is changed.
            </summary>
            <param name="newValue">The new slider value.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.NullableFloatOptionsEntry.OnTextChanged(UnityEngine.GameObject,System.String)">
            <summary>
            Called when the input field's text is changed.
            </summary>
            <param name="text">The new text.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.NullableFloatOptionsEntry.Update">
            <summary>
            Updates the displayed value.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.NullableIntOptionsEntry">
            <summary>
            An options entry which represents int? and displays a text field and slider.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.NullableIntOptionsEntry.FieldText">
            <summary>
            The text that is rendered for the current value of the entry.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.NullableIntOptionsEntry.textField">
            <summary>
            The realized text field.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.NullableIntOptionsEntry.value">
            <summary>
            The value in the text field.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.NullableIntOptionsEntry.OnSliderChanged(UnityEngine.GameObject,System.Single)">
            <summary>
            Called when the slider's value is changed.
            </summary>
            <param name="newValue">The new slider value.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.NullableIntOptionsEntry.OnTextChanged(UnityEngine.GameObject,System.String)">
            <summary>
            Called when the input field's text is changed.
            </summary>
            <param name="text">The new text.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.NullableIntOptionsEntry.Update">
            <summary>
            Updates the displayed value.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.OptionAttribute">
            <summary>
            An attribute placed on an option property or enum value for a class used as mod options
            in order to denote the display title and other options.
            
            Options attributes will be recursively searched if a custom type is used for a property
            with this attribute. If fields in that type have Option attributes, they will be
            displayed under the category of their parent option (ignoring their own category
            declaration).
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionAttribute.#ctor">
            <summary>
            Denotes a mod option field. Can also be used on members of an Enum type to give
            them a friendly display name.
            
            This overload will take the option strings from STRINGS, using the namespace of the
            declaring type and the name of the property. A type declared in the MyName.
            MyNamespace namespace with a property named TestProperty will get the title
            STRINGS.MYNAME.MYNAMESPACE.OPTIONS.TESTPROPERTY.NAME, the tooltip
            STRINGS.MYNAME.MYNAMESPACE.OPTIONS.TESTPROPERTY.TOOLTIP, and the category
            STRINGS.MYNAME.MYNAMESPACE.OPTIONS.TESTPROPERTY.CATEGORY.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Denotes a mod option field. Can also be used on members of an Enum type to give
            them a friendly display name.
            </summary>
            <param name="title">The field title to display.</param>
            <param name="tooltip">The tool tip for the field.</param>
            <param name="category">The category to use, or null for the default category.</param>
        </member>
        <member name="T:PeterHan.PLib.Options.OptionsDialog">
            <summary>
            A dialog for handling mod options events.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.OptionsDialog.CATEGORY_TITLE_COLOR">
            <summary>
            The color of option category titles.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.OptionsDialog.CATEGORY_TITLE_STYLE">
            <summary>
            The text style applied to option category titles.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.OptionsDialog.CATEGORY_MARGIN">
            <summary>
            The margins inside the colored boxes in each config section.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.OptionsDialog.MOD_IMAGE_SIZE">
            <summary>
            The size of the mod preview image displayed.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.OptionsDialog.OUTER_MARGIN">
            <summary>
            The margins between the dialog edge and the colored boxes in each config section.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.OptionsDialog.SETTINGS_DIALOG_SIZE">
            <summary>
            The default size of the Mod Settings dialog.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.OptionsDialog.SETTINGS_DIALOG_MAX_SIZE">
            <summary>
            The maximum size of the Mod Settings dialog before it gets scroll bars.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.OptionsDialog.TOGGLE_SIZE">
            <summary>
            The size of the toggle button on each (non-default) config section.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsDialog.CreateOptions(System.Type)">
            <summary>
            Creates an options object using the default constructor if possible.
            </summary>
            <param name="type">The type of the object to create.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsDialog.SaveAndRestart">
            <summary>
            Saves the mod enabled settings and restarts the game.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.OptionsDialog.collapseCategories">
            <summary>
            If true, all categories begin collapsed.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.OptionsDialog.configAttr">
            <summary>
            The config file attribute for the options type, if present.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.OptionsDialog.dialog">
            <summary>
            The currently active dialog.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.OptionsDialog.modImage">
            <summary>
            The sprite to display for this mod.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.OptionsDialog.displayInfo">
            <summary>
            Collects information from the ModInfoAttribute and KMod.Mod objects for display.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.OptionsDialog.OnClose">
            <summary>
            The event to invoke when the dialog is closed.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.OptionsDialog.optionCategories">
            <summary>
            The option entries in the dialog.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.OptionsDialog.options">
            <summary>
            The options read from the config. It might contain hidden options so preserve its
            contents here.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.OptionsDialog.optionsType">
            <summary>
            The type used to determine which options are visible.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsDialog.AddCategoryHeader(PeterHan.PLib.UI.PGridPanel,System.String,PeterHan.PLib.UI.PGridPanel)">
            <summary>
            Adds a category header to the dialog.
            </summary>
            <param name="container">The parent of the header.</param>
            <param name="category">The header title.</param>
            <param name="contents">The panel containing the options in this category.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsDialog.AddModInfoScreen(PeterHan.PLib.UI.PDialog)">
            <summary>
            Fills in the mod info screen, assuming that infoAttr is non-null.
            </summary>
            <param name="optionsDialog">The dialog to populate.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsDialog.CheckForRestart">
            <summary>
            Checks the mod config class for the [RestartRequired] attribute, and brings up a
            restart dialog if necessary.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsDialog.CloseDialog">
            <summary>
            Closes the current dialog.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsDialog.FillModOptions(PeterHan.PLib.UI.PDialog)">
            <summary>
            Fills in the actual mod option fields.
            </summary>
            <param name="optionsDialog">The dialog to populate.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsDialog.OnManualConfig(UnityEngine.GameObject)">
            <summary>
            Invoked when the manual config button is pressed.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsDialog.OnOptionsSelected(System.String)">
            <summary>
            Invoked when the dialog is closed.
            </summary>
            <param name="action">The action key taken.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsDialog.OnResetConfig(UnityEngine.GameObject)">
            <summary>
            Invoked when the reset to default button is pressed.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsDialog.ShowDialog">
            <summary>
            Triggered when the Mod Options button is clicked.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsDialog.TriggerUpdateOptions(System.Object)">
            <summary>
            Calls the user OnOptionsChanged handler if present.
            </summary>
            <param name="newOptions">The updated options object.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsDialog.UpdateOptions">
            <summary>
            Updates the dialog with the latest options from the file.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsDialog.VisitModHomepage(UnityEngine.GameObject)">
            <summary>
            If configured, opens the mod's home page in the default browser.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsDialog.WriteOptions">
            <summary>
            Writes the mod options to its config file.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.OptionsEntry">
            <summary>
            An abstract parent class containing methods shared by all built-in options handlers.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.OptionsEntry.CONTROL_MARGIN">
            <summary>
            The margins around the control used in each entry.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.OptionsEntry.LABEL_MARGIN">
            <summary>
            The margins around the label for each entry.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsEntry.AddToCategory(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.ICollection{PeterHan.PLib.Options.IOptionsEntry}},PeterHan.PLib.Options.IOptionsEntry)">
            <summary>
            Adds an options entry to the category list, creating a new category if necessary.
            </summary>
            <param name="entries">The existing categories.</param>
            <param name="entry">The option entry to add.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsEntry.BuildOptions(System.Type)">
            <summary>
            Builds the options entries from the type.
            </summary>
            <param name="forType">The type of the options class.</param>
            <returns>A list of all public properties annotated for options dialogs.</returns>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsEntry.CreateDefaultUIEntry(PeterHan.PLib.Options.IOptionsEntry,PeterHan.PLib.UI.PGridPanel,System.Int32,PeterHan.PLib.UI.IUIComponent)">
            <summary>
            Creates a default UI entry. This entry will have the title and tool tip in the
            first column, and the provided UI component in the second column. Only one row is
            added by this method.
            </summary>
            <param name="entry">The options entry to be presented.</param>
            <param name="parent">The parent where the components will be added.</param>
            <param name="row">The row index where the components will be added.</param>
            <param name="presenter">The presenter that can display this option's value.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsEntry.CreateDynamicOption(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Creates a dynamic options entry.
            </summary>
            <param name="prop">The property to be created.</param>
            <param name="handler">The type which can handle the property.</param>
            <returns>The created entry, or null if no entry could be created.</returns>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsEntry.ExecuteConstructor(System.Reflection.PropertyInfo,System.Reflection.ConstructorInfo)">
            <summary>
            Runs a dynamic option constructor.
            </summary>
            <param name="prop">The property to be created.</param>
            <param name="cons">The constructor to run.</param>
            <returns>The constructed dynamic option.</returns>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsEntry.HandleDefaults(PeterHan.PLib.Options.IOptionSpec,System.Reflection.MemberInfo)">
            <summary>
            Substitutes default strings for an options entry with an empty title.
            </summary>
            <param name="spec">The option attribute supplied (Format is still accepted!)</param>
            <param name="member">The item declaring the attribute.</param>
            <returns>A substitute attribute with default values from STRINGS.</returns>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsEntry.LookInStrings(System.String)">
            <summary>
            First looks to see if the string exists in the string database; if it does, returns
            the localized value, otherwise returns the string unmodified.
            
            This method is somewhat slow. Cache the result if possible.
            </summary>
            <param name="keyOrValue">The string key to check.</param>
            <returns>The string value with that key, or the key if there is no such localized
            string value.</returns>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsEntry.TryCreateEntry(System.Reflection.PropertyInfo,System.Int32)">
            <summary>
            Shared code to create an options entry if an [Option] attribute is found on a
            property.
            </summary>
            <param name="prop">The property to inspect.</param>
            <param name="depth">The current depth of iteration to avoid infinite loops.</param>
            <returns>The OptionsEntry created, or null if none was.</returns>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsEntry.TryCreateEntry(System.Attribute,System.Reflection.PropertyInfo,System.Int32)">
            <summary>
            Creates an options entry if an attribute is a valid IOptionSpec or
            DynamicOptionAttribute.
            </summary>
            <param name="attribute">The attribute to parse.</param>
            <param name="prop">The property to inspect.</param>
            <param name="depth">The current depth of iteration to avoid infinite loops.</param>
            <returns>The OptionsEntry created from the attribute, or null if none was.</returns>
        </member>
        <member name="P:PeterHan.PLib.Options.OptionsEntry.Category">
            <summary>
            The category for this entry.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.OptionsEntry.Field">
            <summary>
            The option field name.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.OptionsEntry.Format">
            <summary>
            The format string to use when rendering this option, or null if none was supplied.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.OptionsEntry.Title">
            <summary>
            The option title on screen.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.OptionsEntry.Tooltip">
            <summary>
            The tool tip to display.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.OptionsEntry.Value">
            <summary>
            The current value selected by the user.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsEntry.CreateUIEntry(PeterHan.PLib.UI.PGridPanel,System.Int32@)">
            <summary>
            Adds the line item entry for this options entry.
            </summary>
            <param name="parent">The location to add this entry.</param>
            <param name="row">The layout row index to use. If updated, the row index will
            continue to count up from the new value.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsEntry.GetUIComponent">
            <summary>
            Retrieves the UI component which can alter this setting. It should be sized
            properly to display any of the valid settings. The actual value will be set after
            the component is realized.
            </summary>
            <returns>The UI component to display.</returns>
        </member>
        <member name="T:PeterHan.PLib.Options.OptionsHandlers">
            <summary>
            Registers types to options entry classes that can handle them.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.OptionsHandlers.OPTIONS_HANDLERS">
            <summary>
            Maps types to the constructor delegate that can create an options entry for them.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsHandlers.AddOptionClass(System.Type,System.Type)">
            <summary>
            Adds a custom type to handle all options entries of a specific type. The change
            will only affect this mod's options.
            </summary>
            <param name="optionType">The property type to be handled.</param>
            <param name="handlerType">The type which will handle all option attributes of
            this type. It must subclass from IOptionsEntry and have a constructor of the
            signature HandlerType(string, IOptionSpec).</param>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsHandlers.CreateDelegate(System.Type,System.Reflection.ConstructorInfo)">
            <summary>
            If a candidate options entry constructor is valid, creates a delegate which can
            call the constructor.
            </summary>
            <param name="constructor">The constructor to wrap.</param>
            <param name="handlerType">The type which will handle all option attributes of this type.</param>
            <returns>If the constructor can be used to create an options entry, a delegate
            which calls the constructor using one of the delegate types declared in this class;
            otherwise, null.</returns>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsHandlers.FindOptionClass(PeterHan.PLib.Options.IOptionSpec,System.Reflection.PropertyInfo)">
            <summary>
            Creates an options entry wrapper for the specified property.
            </summary>
            <param name="info">The property to wrap.</param>
            <param name="spec">The option title and tool tip.</param>
            <returns>An options wrapper, or null if none can handle this type.</returns>
        </member>
        <member name="M:PeterHan.PLib.Options.OptionsHandlers.InitPredefinedOptions">
            <summary>
            Adds the predefined options classes.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.POptions">
            <summary>
            Adds an "Options" screen to a mod in the Mods menu.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.POptions.CONFIG_FILE_NAME">
            <summary>
            The configuration file name used by default for classes that do not specify
            otherwise. This file name is case sensitive.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.POptions.MAX_SERIALIZATION_DEPTH">
            <summary>
            The maximum nested class depth which will be serialized in mod options to avoid
            infinite loops.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.POptions.OPTION_BUTTON_MARGIN">
            <summary>
            The margins around the Options button.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.POptions.SHARED_CONFIG_FOLDER">
            <summary>
            The shared mod configuration folder, which works between archived versions and
            local/dev/Steam.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.POptions.VERSION">
            <summary>
            The version of this component. Uses the running PLib version.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.POptions.Instance">
            <summary>
            The instantiated copy of this class.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.POptions.BuildDisplay_Postfix(UnityEngine.GameObject,System.Collections.IEnumerable)">
            <summary>
            Applied to ModsScreen if mod options are registered, after BuildDisplay runs.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.POptions.GetConfigFilePath(System.Type)">
            <summary>
            Retrieves the configuration file path used by PLib Options for a specified type.
            </summary>
            <param name="optionsType">The options type stored in the config file.</param>
            <returns>The path to the configuration file that will be used by PLib for that
            mod's config.</returns>
        </member>
        <member name="M:PeterHan.PLib.Options.POptions.GetModFromType(System.Type)">
            <summary>
            Attempts to find the mod which owns the specified type.
            </summary>
            <param name="optionsType">The type to look up.</param>
            <returns>The Mod that owns it, or null if no owning mod could be found, such as for
            types in System or Assembly-CSharp.</returns>
        </member>
        <member name="M:PeterHan.PLib.Options.POptions.GetConfigPath(PeterHan.PLib.Options.ConfigFileAttribute,System.Reflection.Assembly)">
            <summary>
            Retrieves the configuration file path used by PLib Options for a specified type.
            </summary>
            <param name="attr">The config file attribute for that type.</param>
            <param name="modAssembly">The assembly to use for determining the path.</param>
            <returns>The path to the configuration file that will be used by PLib for that
            mod's config.</returns>
        </member>
        <member name="M:PeterHan.PLib.Options.POptions.ReadSettings``1">
            <summary>
            Reads a mod's settings from its configuration file. The assembly defining T is used
            to resolve the proper settings folder.
            </summary>
            <typeparam name="T">The type of the settings object.</typeparam>
            <returns>The settings read, or null if they could not be read (e.g. newly installed).</returns>
        </member>
        <member name="M:PeterHan.PLib.Options.POptions.ReadSettings(System.String,System.Type)">
            <summary>
            Reads a mod's settings from its configuration file.
            </summary>
            <param name="path">The path to the settings file.</param>
            <param name="optionsType">The options type.</param>
            <returns>The settings read, or null if they could not be read (e.g. newly installed)</returns>
        </member>
        <member name="M:PeterHan.PLib.Options.POptions.ShowDialog(System.Type,System.Action{System.Object})">
            <summary>
            Shows a mod options dialog now, as if Options was used inside the Mods menu.
            </summary>
            <param name="optionsType">The type of the options to show. The mod to configure,
            configuration directory, and so forth will be retrieved from the provided type.
            This type must be the same type configured in RegisterOptions for the mod.</param>
            <param name="onClose">The method to call when the dialog is closed.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.POptions.WriteSettings``1(``0)">
            <summary>
            Writes a mod's settings to its configuration file. The assembly defining T is used
            to resolve the proper settings folder.
            </summary>
            <typeparam name="T">The type of the settings object.</typeparam>
            <param name="settings">The settings to write.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.POptions.WriteSettings(System.Object,System.String,System.Boolean)">
            <summary>
            Writes a mod's settings to its configuration file.
            </summary>
            <param name="settings">The settings to write.</param>
            <param name="path">The path to the settings file.</param>
            <param name="indent">true to indent the output, or false to leave it in one line.</param>
        </member>
        <member name="F:PeterHan.PLib.Options.POptions.modOptions">
            <summary>
            Maps mod static IDs to their options.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.POptions.registered">
            <summary>
            Maps mod assemblies to handlers that can fire their options. Only populated in
            the instantiated copy of POptions.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.POptions.AddModOptions(System.Object,System.Int32,UnityEngine.GameObject)">
            <summary>
            Adds the Options button to the Mods screen.
            </summary>
            <param name="modEntry">The mod entry where the button should be added.</param>
            <param name="fallbackIndex">The index to use if it cannot be determined from the entry.</param>
            <param name="parent">The parent where the entries were added, used only if the
            fallback index is required.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.POptions.Initialize(HarmonyLib.Harmony)">
            <summary>
            Initializes and stores the options table for quicker lookups later.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.POptions.RegisterOptions(KMod.UserMod2,System.Type)">
            <summary>
            Registers a class as a mod options class. The type is registered for the mod
            instance specified, which is easily available in OnLoad.
            </summary>
            <param name="mod">The mod for which the type will be registered.</param>
            <param name="optionsType">The class which will represent the options for this mod.</param>
        </member>
        <member name="T:PeterHan.PLib.Options.POptions.ModOptionsHandler">
            <summary>
            Opens the mod options dialog for a specific mod assembly.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.POptions.ModOptionsHandler.forType">
            <summary>
            The type whose options will be shown.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.POptions.ModOptionsHandler.options">
            <summary>
            The options instance that will handle the dialog.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.POptions.ModOptionsHandler.ShowDialog(UnityEngine.GameObject)">
            <summary>
            Shows the options dialog.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.POptions.OpenDialogArgs">
            <summary>
            The arguments to be passed with message SHOW_DIALOG_MOD.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.POptions.OpenDialogArgs.OnClose">
            <summary>
            The handler (if not null) to be called when the dialog is closed.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.POptions.OpenDialogArgs.OptionsType">
            <summary>
            The mod options type to show.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.RequireDLCAttribute">
            <summary>
            An attribute placed on an option property for a class used as mod options in order to
            show or hide it for particular DLCs. If the option is hidden, the value currently
            in the options file is preserved unchanged when reading or writing.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.RequireDLCAttribute.DlcID">
            <summary>
            The DLC ID to check.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.RequireDLCAttribute.Required">
            <summary>
            If true, the DLC is required, and the option is hidden if the DLC is inactive.
            If false, the DLC is forbidden, and the option is hidden if the DLC is active.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.RequireDLCAttribute.#ctor(System.String)">
            <summary>
            Annotates an option field as requiring the specified DLC. The [Option] attribute
            must also be present to be displayed at all.
            </summary>
            <param name="dlcID">The DLC ID to require. Must be one of:
            DlcManager.EXPANSION1_ID, DlcManager.VANILLA_ID</param>
        </member>
        <member name="M:PeterHan.PLib.Options.RequireDLCAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Annotates an option field as requiring or forbidding the specified DLC. The
            [Option] attribute must also be present to be displayed at all.
            </summary>
            <param name="dlcID">The DLC ID to require or forbid. Must be one of:
            DlcManager.EXPANSION1_ID, DlcManager.VANILLA_ID</param>
            <param name="required">true to require the DLC, or false to forbid it.</param>
        </member>
        <member name="T:PeterHan.PLib.Options.RestartRequiredAttribute">
            <summary>
            An empty marker attribute. If applied to an options class, PLib will notify the user
            that the game must be restarted to apply the options. This attribute will not work if
            it is applied to an individual option, only if applied to the class as a whole.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.SelectOneOptionsEntry">
            <summary>
            An options entry which represents Enum and displays a spinner with text options.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.SelectOneOptionsEntry.GetAttribute(System.Object,System.Type)">
            <summary>
            Obtains the title and tool tip for an enumeration value.
            </summary>
            <param name="enumValue">The value in the enumeration.</param>
            <param name="fieldType">The type of the Enum field.</param>
            <returns>The matching Option</returns>
        </member>
        <member name="F:PeterHan.PLib.Options.SelectOneOptionsEntry.chosen">
            <summary>
            The chosen item in the array.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.SelectOneOptionsEntry.comboBox">
            <summary>
            The realized item label.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.SelectOneOptionsEntry.options">
            <summary>
            The available options to cycle through.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.SelectOneOptionsEntry.Update">
            <summary>
            Updates the displayed text to match the current item.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.SelectOneOptionsEntry.UpdateValue(UnityEngine.GameObject,PeterHan.PLib.Options.SelectOneOptionsEntry.EnumOption)">
            <summary>
            Triggered when the value chosen from the combo box has been changed.
            </summary>
            <param name="selected">The value selected by the user.</param>
        </member>
        <member name="T:PeterHan.PLib.Options.SelectOneOptionsEntry.EnumOption">
            <summary>
            Represents a selectable option.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.SelectOneOptionsEntry.EnumOption.Title">
            <summary>
            The option title.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.SelectOneOptionsEntry.EnumOption.ToolTip">
            <summary>
            The option tool tip.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.SelectOneOptionsEntry.EnumOption.Value">
            <summary>
            The value to assign if this option is chosen.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.SingletonOptions`1">
            <summary>
            A class which can be used by mods to maintain a singleton of their options. This
            class should be the superclass of the mod options class, and &lt;T&gt; should be
            the type of the options class to store.
            
            This class only initializes the mod options once by default. If the settings can
            be updated without restarting the game, update the Instance manually using
            IOptions.OnOptionsChanged. If the game has to be restarted anyways, add
            [RestartRequired].
            </summary>
            <typeparam name="T">The mod options class to wrap.</typeparam>
        </member>
        <member name="F:PeterHan.PLib.Options.SingletonOptions`1.instance">
            <summary>
            The only instance of the singleton options.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Options.SingletonOptions`1.Instance">
            <summary>
            Retrieves the program options, or lazily initializes them if not yet loaded.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.SlidingBaseOptionsEntry">
            <summary>
            An options entry which displays a slider below it.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.SlidingBaseOptionsEntry.ENTRY_MARGIN">
            <summary>
            The margin between the slider extra row and the rest of the dialog.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.SlidingBaseOptionsEntry.SLIDER_MARGIN">
            <summary>
            The margin between the slider and its labels.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.SlidingBaseOptionsEntry.limits">
            <summary>
            The limits allowed for the entry.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.SlidingBaseOptionsEntry.slider">
            <summary>
            The realized slider.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.SlidingBaseOptionsEntry.GetSlider">
            <summary>
            Gets the initialized PLib slider to be used for value display.
            </summary>
            <returns>The slider to be used.</returns>
        </member>
        <member name="M:PeterHan.PLib.Options.SlidingBaseOptionsEntry.OnRealizeSlider(UnityEngine.GameObject)">
            <summary>
            Called when the slider is realized.
            </summary>
            <param name="realized">The actual slider.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.SlidingBaseOptionsEntry.Update">
            <summary>
            Updates the displayed value.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.StringOptionsEntry">
            <summary>
            An options entry which represents a string and displays a text field.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.StringOptionsEntry.maxLength">
            <summary>
            The maximum entry length.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.StringOptionsEntry.textField">
            <summary>
            The realized text field.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.StringOptionsEntry.value">
            <summary>
            The value in the text field.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Options.StringOptionsEntry.OnTextChanged(UnityEngine.GameObject,System.String)">
            <summary>
            Called when the input field's text is changed.
            </summary>
            <param name="text">The new text.</param>
        </member>
        <member name="M:PeterHan.PLib.Options.StringOptionsEntry.Update">
            <summary>
            Updates the displayed value.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Options.TextBlockOptionsEntry">
            <summary>
            An options entry that displays static text. Not intended to be serializable to the
            options file, instead declare a read-only property that returns null with a type of
            LocText, e.g:
            
            [Option("Your text goes here", "Tool tip for the text")]
            public LocText MyLabel =&gt; null;
            
            Unity font formatting can be used in the text. The name of a strings table entry can
            also be used to allow localization.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.TextBlockOptionsEntry.WRAP_TEXT_STYLE">
            <summary>
            A font style that looks like TextLightStyle but allows word wrapping.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Options.TextBlockOptionsEntry.ignore">
            <summary>
            This value is not used, it only exists to satisfy the contract.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.DynamicOptionAttribute">
            <summary>
            An attribute placed on an option property for a class used as mod options in order to
            make PLib use a custom options handler. The type used for the handler must inherit
            from IOptionsEntry.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.DynamicOptionAttribute.Category">
            <summary>
            The option category.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.DynamicOptionAttribute.Handler">
            <summary>
            The option handler.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.DynamicOptionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Denotes a mod option field.
            </summary>
            <param name="type">The type that will handle this dynamic option.</param>
            <param name="category">The category to use, or null for the default category.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.IDynamicSizable">
            <summary>
            A UI component which can be dynamically resized for its content.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.IDynamicSizable.DynamicSize">
            <summary>
            Whether the component should dynamically resize for its content. This adds more
            components and more layout depth, so should only be enabled if necessary.
            
            Defaults to false. Must be set to true for components with a nonzero flex size.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.ImageTransform">
            <summary>
            An enumeration describing how to transform the image in a label.
            
            Rotations are counterclockwise from 0 (straight up).
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.ISettableFlexSize">
            <summary>
            Describes a UI component whose flexible size can be mutated.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.ISettableFlexSize.flexibleWidth">
            <summary>
            The flexible width of the completed layout group can be set.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.ISettableFlexSize.flexibleHeight">
            <summary>
            The flexible height of the completed layout group can be set.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.ITooltipListableOption.GetToolTipText">
            <summary>
            Retrieves the tool tip text for this option.
            </summary>
            <returns>The text to be shown on the tool tip.</returns>
        </member>
        <member name="T:PeterHan.PLib.UI.IUIComponent">
            <summary>
            Implemented by PLib UI components.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.IUIComponent.Name">
            <summary>
            The component name.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.IUIComponent.Build">
            <summary>
            Creates a physical game object embodying this component.
            </summary>
            <returns>The game object representing this UI component. Multiple invocations return
            unique objects.</returns>
        </member>
        <member name="E:PeterHan.PLib.UI.IUIComponent.OnRealize">
            <summary>
            Actions invoked when the UI component is actually realized.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.LayoutSizes">
            <summary>
            A class representing the size sets of a particular component.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.LayoutSizes.flexible">
            <summary>
            The flexible dimension value.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.LayoutSizes.ignore">
            <summary>
            If true, this component should be ignored completely.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.LayoutSizes.min">
            <summary>
            The minimum dimension value.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.LayoutSizes.preferred">
            <summary>
            The preferred dimension value.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.LayoutSizes.source">
            <summary>
            The source of these values.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.LayoutSizes.Add(PeterHan.PLib.UI.LayoutSizes)">
            <summary>
            Adds another set of layout sizes to this one.
            </summary>
            <param name="other">The size values to add.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.LayoutSizes.Max(PeterHan.PLib.UI.LayoutSizes)">
            <summary>
            Enlarges this layout size, if necessary, using the values from another.
            </summary>
            <param name="other">The minimum size values to enforce.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.Layouts.AbstractLayoutGroup">
            <summary>
            The abstract parent of most layout groups.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.AbstractLayoutGroup.DelayedSetDirty(UnityEngine.RectTransform)">
            <summary>
            Sets an object's layout dirty on the next frame.
            </summary>
            <param name="transform">The transform to set dirty.</param>
            <returns>A coroutine to set it dirty.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.AbstractLayoutGroup.DestroyAndReplaceLayout(UnityEngine.GameObject)">
            <summary>
            Removes and destroys any PLib layouts on the component. They will be replaced with
            a static LayoutElement containing the old size of the component.
            </summary>
            <param name="component">The component to cleanse.</param>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.AbstractLayoutGroup.flexibleWidth">
            <summary>
            The flexible width of the completed layout group can be set.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.AbstractLayoutGroup.flexibleHeight">
            <summary>
            The flexible height of the completed layout group can be set.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.AbstractLayoutGroup.layoutPriority">
            <summary>
            The priority of this layout group.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.AbstractLayoutGroup.locked">
            <summary>
            Whether the layout is currently locked.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.AbstractLayoutGroup.cachedTransform">
            <summary>
            The cached rect transform to speed up layout.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.AbstractLayoutGroup.LockLayout">
            <summary>
            Triggers a layout with the current parent, and then locks the layout size. Further
            attempts to automatically lay out the component, unless UnlockLayout is called,
            will not trigger any action.
            
            The resulting layout has very good performance, but cannot adapt to changes in the
            size of its children or its own size.
            </summary>
            <returns>The computed size of this component when locked.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.AbstractLayoutGroup.SetDirty">
            <summary>
            Sets this layout as dirty.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.AbstractLayoutGroup.UnlockLayout">
            <summary>
            Unlocks the layout, allowing it to again dynamically resize when component sizes
            are changed.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.Layouts.BoxLayoutResults">
            <summary>
            A class which stores the results of a single box layout calculation pass.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.BoxLayoutResults.children">
            <summary>
            The components which were laid out.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.BoxLayoutResults.direction">
            <summary>
            The current direction of flow.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.BoxLayoutResults.haveMinSpace">
            <summary>
            Whether any spaces have been added yet for minimum size.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.BoxLayoutResults.havePrefSpace">
            <summary>
            Whether any spaces have been added yet for preferred size.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.BoxLayoutResults.total">
            <summary>
            The total sizes.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.BoxLayoutResults.Accum(PeterHan.PLib.UI.LayoutSizes,System.Single)">
            <summary>
            Accumulates another component into the results.
            </summary>
            <param name="sizes">The size of the component to add.</param>
            <param name="spacing">The component spacing.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.BoxLayoutResults.Expand(PeterHan.PLib.UI.LayoutSizes)">
            <summary>
            Expands the results around another component.
            </summary>
            <param name="sizes">The size of the component to expand to.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.Layouts.BoxLayoutStatus">
            <summary>
            Maintains the status of a layout in progress.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.BoxLayoutStatus.direction">
            <summary>
            The current direction of flow.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.BoxLayoutStatus.edge">
            <summary>
            The edge from where layout started.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.BoxLayoutStatus.offset">
            <summary>
            The next component's offset.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.BoxLayoutStatus.size">
            <summary>
            The component size in that direction minus margins.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.Layouts.CardLayoutResults">
            <summary>
            A class which stores the results of a single card layout calculation pass.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.CardLayoutResults.children">
            <summary>
            The components which were laid out.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.CardLayoutResults.direction">
            <summary>
            The current direction of flow.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.CardLayoutResults.total">
            <summary>
            The total sizes.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.CardLayoutResults.Expand(PeterHan.PLib.UI.LayoutSizes)">
            <summary>
            Expands the results around another component.
            </summary>
            <param name="sizes">The size of the component to expand to.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.Layouts.GridLayoutResults">
            <summary>
            A class which stores the results of a single grid layout calculation pass.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.GridLayoutResults.GetMatrix(System.Int32,System.Int32,System.Collections.Generic.ICollection{PeterHan.PLib.UI.Layouts.SizedGridComponent})">
            <summary>
            Builds a matrix of the components at each given location. Components only are
            entered at their origin cell (ignoring row and column span).
            </summary>
            <param name="rows">The maximum number of rows.</param>
            <param name="columns">The maximum number of columns.</param>
            <param name="components">The components to add.</param>
            <returns>A 2-D array of the components at a given row/column location.</returns>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.GridLayoutResults.ColumnSpecs">
            <summary>
            The columns in the grid.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.GridLayoutResults.Components">
            <summary>
            The components in the grid, in order of addition.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.GridLayoutResults.Columns">
            <summary>
            The number of columns in the grid.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.GridLayoutResults.ComputedColumnSpecs">
            <summary>
            The columns in the grid with their calculated widths.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.GridLayoutResults.ComputedRowSpecs">
            <summary>
            The rows in the grid with their calculated heights.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.GridLayoutResults.MinHeight">
            <summary>
            The minimum total height.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.GridLayoutResults.MinWidth">
            <summary>
            The minimum total width.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.GridLayoutResults.Matrix">
            <summary>
            The components which were laid out.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.GridLayoutResults.RowSpecs">
            <summary>
            The rows in the grid.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.GridLayoutResults.Rows">
            <summary>
            The number of rows in the grid.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.GridLayoutResults.TotalFlexHeight">
            <summary>
            The total flexible height weights.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.GridLayoutResults.TotalFlexWidth">
            <summary>
            The total flexible width weights.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.GridLayoutResults.CalcBaseHeights">
            <summary>
            Calculates the base height of each row, the minimum it gets before extra space
            is distributed.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.GridLayoutResults.CalcBaseWidths">
            <summary>
            Calculates the base width of each row, the minimum it gets before extra space
            is distributed.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.GridLayoutResults.ExpandMultiColumn(PeterHan.PLib.UI.Layouts.SizedGridComponent)">
            <summary>
            For a multicolumn component, ratiometrically splits up any excess preferred size
            among the columns in its span that have a flexible width.
            </summary>
            <param name="component">The component to reallocate sizes.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.GridLayoutResults.ExpandMultiRow(PeterHan.PLib.UI.Layouts.SizedGridComponent)">
            <summary>
            For a multirow component, ratiometrically splits up any excess preferred size
            among the rows in its span that have a flexible height.
            </summary>
            <param name="component">The component to reallocate sizes.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.GridLayoutResults.PreferredHeightAt(System.Int32,System.Int32)">
            <summary>
            Retrieves the preferred height of a cell.
            </summary>
            <param name="row">The cell's row.</param>
            <param name="column">The cell's column.</param>
            <returns>The preferred height.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.GridLayoutResults.PreferredWidthAt(System.Int32,System.Int32)">
            <summary>
            Retrieves the preferred width of a cell.
            </summary>
            <param name="row">The cell's row.</param>
            <param name="column">The cell's column.</param>
            <returns>The preferred width.</returns>
        </member>
        <member name="T:PeterHan.PLib.UI.Layouts.SizedGridComponent">
            <summary>
            A component in the grid with its sizes computed.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.SizedGridComponent.HorizontalSize">
            <summary>
            The object and its computed horizontal sizes.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.SizedGridComponent.VerticalSize">
            <summary>
            The object and its computed vertical sizes.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.Layouts.RelativeLayoutParams">
            <summary>
            Stores constraints applied to a game object in a relative layout.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase`1">
            <summary>
            Stores constraints applied to an object in a relative layout.
            </summary>
            <typeparam name="T">The type of the target object.</typeparam>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase`1.BottomEdge">
            <summary>
            The anchored position of the bottom edge.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase`1.Insets">
            <summary>
            The insets. If null, insets are all zero.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase`1.LeftEdge">
            <summary>
            The anchored position of the left edge.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase`1.OverrideSize">
            <summary>
            Overrides the size of the component if set.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase`1.RightEdge">
            <summary>
            The anchored position of the right edge.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase`1.TopEdge">
            <summary>
            The anchored position of the top edge.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase`1.EdgeStatus">
            <summary>
            The edge position determined for a component.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase`1.EdgeStatus.Constraint">
            <summary>
            The type of constraint to use for this relative layout.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase`1.EdgeStatus.FromAnchor">
            <summary>
            The anchor position in the component that sets the relative anchor.
            
            0.0f is the bottom/left, 1.0f is the top/right.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase`1.EdgeStatus.FromComponent">
            <summary>
            The component to which this edge is anchored.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase`1.EdgeStatus.Offset">
            <summary>
            The offset in pixels from the anchor. + is upwards/rightwards, - is downwards/
            leftwards.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase`1.EdgeStatus.Locked">
            <summary>
            True if the position has been locked down in the code.
            Locked should only be set by the layout manager, crashes may occur otherwise.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase`1.EdgeStatus.Unconstrained">
            <summary>
            True if the position is not constrained to anything.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase`1.EdgeStatus.CopyFrom(PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase{`0}.EdgeStatus)">
            <summary>
            Copies data from another edge status object.
            </summary>
            <param name="other">The object to copy.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase`1.EdgeStatus.Reset">
            <summary>
            Resets these offsets to unlocked.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.Layouts.RelativeConstraintType">
            <summary>
            The types of constraints which can be applied to components in a relative layout.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.Layouts.RelativeLayoutResults">
            <summary>
            Parameters used to store the dynamic data of an object during a relative layout.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.RelativeLayoutResults.ZERO">
            <summary>
            A set of insets that are always zero.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.RelativeLayoutResults.BottomParams">
            <summary>
            The instance parameters of the bottom edge's component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.RelativeLayoutResults.EffectiveHeight">
            <summary>
            The height of the component plus its margin box.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.RelativeLayoutResults.EffectiveWidth">
            <summary>
            The width of the component plus its margin box.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.RelativeLayoutResults.LeftParams">
            <summary>
            The instance parameters of the left edge's component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.RelativeLayoutResults.PreferredHeight">
            <summary>
            The preferred height at which this component will be laid out, unless both
            edges are constrained.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.RelativeLayoutResults.PreferredWidth">
            <summary>
            The preferred width at which this component will be laid out, unless both
            edges are constrained.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.RelativeLayoutResults.RightParams">
            <summary>
            The instance parameters of the right edge's component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.RelativeLayoutResults.TopParams">
            <summary>
            The instance parameters of the top edge's component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.RelativeLayoutResults.Transform">
            <summary>
            The object to lay out.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.RelativeLayoutResults.UseSizeDeltaX">
            <summary>
            Whether the size delta should be used in the X direction (as opposed to offsets).
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.Layouts.RelativeLayoutResults.UseSizeDeltaY">
            <summary>
            Whether the size delta should be used in the Y direction (as opposed to offsets).
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.Layouts.RelativeLayoutResults.prefSize">
            <summary>
            The preferred size of this component.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.Layouts.RelativeLayoutUtil">
            <summary>
            A helper class for RelativeLayout.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.RelativeLayoutUtil.CalcX(System.Collections.Generic.ICollection{PeterHan.PLib.UI.Layouts.RelativeLayoutResults},UnityEngine.RectTransform,System.Collections.Generic.IDictionary{UnityEngine.GameObject,PeterHan.PLib.UI.Layouts.RelativeLayoutParams})">
            <summary>
            Initializes and computes horizontal sizes for the components in this relative
            layout.
            </summary>
            <param name="children">The location to store information about these components.</param>
            <param name="all">The components to lay out.</param>
            <param name="constraints">The constraints defined for these components.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.RelativeLayoutUtil.CalcY(System.Collections.Generic.ICollection{PeterHan.PLib.UI.Layouts.RelativeLayoutResults})">
            <summary>
            Computes vertical sizes for the components in this relative layout.
            </summary>
            <param name="children">The location to store information about these components.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.RelativeLayoutUtil.ElbowRoom(PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase{UnityEngine.GameObject}.EdgeStatus,PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase{UnityEngine.GameObject}.EdgeStatus,System.Single)">
            <summary>
            Calculates the minimum size the component must be to support a specific child
            component.
            </summary>
            <param name="min">The lower edge constraint.</param>
            <param name="max">The upper edge constraint.</param>
            <param name="effective">The component size in that dimension plus margins.</param>
            <returns>The minimum parent component size to fit the child.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.RelativeLayoutUtil.ExecuteX(System.Collections.Generic.IEnumerable{PeterHan.PLib.UI.Layouts.RelativeLayoutResults},System.Collections.Generic.List{UnityEngine.UI.ILayoutController},System.Single,System.Single)">
            <summary>
            Executes the horizontal layout.
            </summary>
            <param name="children">The components to lay out.</param>
            <param name="scratch">The location where components will be temporarily stored.</param>
            <param name="mLeft">The left margin.</param>
            <param name="mRight">The right margin.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.RelativeLayoutUtil.ExecuteY(System.Collections.Generic.IEnumerable{PeterHan.PLib.UI.Layouts.RelativeLayoutResults},System.Collections.Generic.List{UnityEngine.UI.ILayoutController},System.Single,System.Single)">
            <summary>
            Executes the vertical layout.
            </summary>
            <param name="children">The components to lay out.</param>
            <param name="scratch">The location where components will be temporarily stored.</param>
            <param name="mBottom">The bottom margin.</param>
            <param name="mTop">The top margin.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.RelativeLayoutUtil.GetMinSizeX(System.Collections.Generic.IEnumerable{PeterHan.PLib.UI.Layouts.RelativeLayoutResults})">
            <summary>
            Calculates the minimum size in the X direction.
            </summary>
            <param name="children">The components to lay out.</param>
            <returns>The minimum horizontal size.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.RelativeLayoutUtil.GetMinSizeY(System.Collections.Generic.IEnumerable{PeterHan.PLib.UI.Layouts.RelativeLayoutResults})">
            <summary>
            Calculates the minimum size in the Y direction.
            </summary>
            <param name="children">The components to lay out.</param>
            <returns>The minimum vertical size.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.RelativeLayoutUtil.InitResolve(PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase{UnityEngine.GameObject}.EdgeStatus,System.Collections.Generic.IDictionary{UnityEngine.GameObject,PeterHan.PLib.UI.Layouts.RelativeLayoutResults})">
            <summary>
            Resolves a component reference if needed.
            </summary>
            <param name="edge">The edge to resolve.</param>
            <param name="lookup">The location where the component can be looked up.</param>
            <returns>The linked parameters for that edge if needed.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.RelativeLayoutUtil.LockEdgeAnchor(PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase{UnityEngine.GameObject}.EdgeStatus,PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase{UnityEngine.GameObject}.EdgeStatus)">
            <summary>
            Locks both edges if they are constrained to the same anchor.
            </summary>
            <param name="edge">The edge to check.</param>
            <param name="otherEdge">The other edge to check.</param>
            <returns>true if it was able to lock, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.RelativeLayoutUtil.LockEdgeAnchor(PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase{UnityEngine.GameObject}.EdgeStatus)">
            <summary>
            Locks an edge if it is constrained to an anchor.
            </summary>
            <param name="edge">The edge to check.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.RelativeLayoutUtil.LockEdgeComponent(PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase{UnityEngine.GameObject}.EdgeStatus,PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase{UnityEngine.GameObject}.EdgeStatus)">
            <summary>
            Locks an edge if it can be determined from another component.
            </summary>
            <param name="edge">The edge to check.</param>
            <param name="offset">The component's offset in that direction.</param>
            <param name="otherEdge">The opposing edge of the referenced component.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.RelativeLayoutUtil.LockEdgeRelative(PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase{UnityEngine.GameObject}.EdgeStatus,System.Single,PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase{UnityEngine.GameObject}.EdgeStatus)">
            <summary>
            Locks an edge if it can be determined from the other edge.
            </summary>
            <param name="edge">The edge to check.</param>
            <param name="size">The component's effective size in that direction.</param>
            <param name="opposing">The component's other edge.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.RelativeLayoutUtil.RunPassX(System.Collections.Generic.IEnumerable{PeterHan.PLib.UI.Layouts.RelativeLayoutResults})">
            <summary>
            Runs a layout pass in the X direction, resolving edges that can be resolved.
            </summary>
            <param name="children">The children to resolve.</param>
            <returns>true if all children have all X edges constrained, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.RelativeLayoutUtil.RunPassY(System.Collections.Generic.IEnumerable{PeterHan.PLib.UI.Layouts.RelativeLayoutResults})">
            <summary>
            Runs a layout pass in the Y direction, resolving edges that can be resolved.
            </summary>
            <param name="children">The children to resolve.</param>
            <returns>true if all children have all Y edges constrained, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.Layouts.RelativeLayoutUtil.ThrowUnresolvable(System.Collections.Generic.IEnumerable{PeterHan.PLib.UI.Layouts.RelativeLayoutResults},System.Int32,PeterHan.PLib.UI.PanelDirection)">
            <summary>
            Throws an error when resolution fails.
            </summary>
            <param name="children">The children, some of which failed to resolve.</param>
            <param name="limit">The number of passes executed before failing.</param>
            <param name="direction">The direction that failed.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.BoxLayoutGroup">
            <summary>
            A freezable, flexible layout manager that fixes the issues I am having with
            HorizontalLayoutGroup and VerticalLayoutGroup. You get a content size fitter for
            free too!
            
            Intended to work something like Java's BoxLayout...
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.BoxLayoutGroup.Calc(UnityEngine.GameObject,PeterHan.PLib.UI.BoxLayoutParams,PeterHan.PLib.UI.PanelDirection)">
            <summary>
            Calculates the size of the box layout container.
            </summary>
            <param name="obj">The container to lay out.</param>
            <param name="args">The parameters to use for layout.</param>
            <param name="direction">The direction which is being calculated.</param>
            <returns>The minimum and preferred box layout size.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.BoxLayoutGroup.DoLayout(PeterHan.PLib.UI.BoxLayoutParams,PeterHan.PLib.UI.Layouts.BoxLayoutResults,System.Single)">
            <summary>
            Lays out components in the box layout container.
            </summary>
            <param name="args">The parameters to use for layout.</param>
            <param name="required">The calculated minimum and preferred sizes.</param>
            <param name="size">The total available size in this dimension.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.BoxLayoutGroup.DoLayoutLinear(PeterHan.PLib.UI.Layouts.BoxLayoutResults,PeterHan.PLib.UI.BoxLayoutParams,PeterHan.PLib.UI.Layouts.BoxLayoutStatus)">
            <summary>
            Lays out components in the box layout container parallel to the layout axis.
            </summary>
            <param name="required">The calculated minimum and preferred sizes.</param>
            <param name="args">The parameters to use for layout.</param>
            <param name="status">The current status of layout.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.BoxLayoutGroup.DoLayoutPerp(PeterHan.PLib.UI.Layouts.BoxLayoutResults,PeterHan.PLib.UI.BoxLayoutParams,PeterHan.PLib.UI.Layouts.BoxLayoutStatus)">
            <summary>
            Lays out components in the box layout container against the layout axis.
            </summary>
            <param name="required">The calculated minimum and preferred sizes.</param>
            <param name="args">The parameters to use for layout.</param>
            <param name="status">The current status of layout.</param>
        </member>
        <member name="P:PeterHan.PLib.UI.BoxLayoutGroup.Params">
            <summary>
            The parameters used to set up this box layout.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.BoxLayoutGroup.horizontal">
            <summary>
            Results from the horizontal calculation pass.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.BoxLayoutGroup.parameters">
            <summary>
            The parameters used to set up this box layout.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.BoxLayoutGroup.vertical">
            <summary>
            Results from the vertical calculation pass.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.BoxLayoutParams">
            <summary>
            The parameters used for laying out a box layout.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.BoxLayoutParams.Alignment">
            <summary>
            The alignment to use for components that are not big enough to fit and have no
            flexible width.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.BoxLayoutParams.Direction">
            <summary>
            The direction of layout.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.BoxLayoutParams.Margin">
            <summary>
            The margin between the children and the component edge.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.BoxLayoutParams.Spacing">
            <summary>
            The spacing between components.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.CardLayoutGroup">
            <summary>
            A freezable layout manager that displays one of its contained objects at a time.
            Unlike other layout groups, even inactive children are considered for sizing.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.CardLayoutGroup.Calc(UnityEngine.GameObject,PeterHan.PLib.UI.PanelDirection)">
            <summary>
            Calculates the size of the card layout container.
            </summary>
            <param name="obj">The container to lay out.</param>
            <param name="args">The parameters to use for layout.</param>
            <param name="direction">The direction which is being calculated.</param>
            <returns>The minimum and preferred box layout size.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.CardLayoutGroup.DoLayout(UnityEngine.RectOffset,PeterHan.PLib.UI.Layouts.CardLayoutResults,System.Single)">
            <summary>
            Lays out components in the card layout container.
            </summary>
            <param name="margin">The margin to allow around the components.</param>
            <param name="required">The calculated minimum and preferred sizes.</param>
            <param name="size">The total available size in this dimension.</param>
        </member>
        <member name="P:PeterHan.PLib.UI.CardLayoutGroup.Margin">
            <summary>
            The margin around the components as a whole.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.CardLayoutGroup.horizontal">
            <summary>
            Results from the horizontal calculation pass.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.CardLayoutGroup.margin">
            <summary>
            The margin around the components as a whole.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.CardLayoutGroup.vertical">
            <summary>
            Results from the vertical calculation pass.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.CardLayoutGroup.SetActiveCard(UnityEngine.GameObject)">
            <summary>
            Switches the active card.
            </summary>
            <param name="card">The child to make active, or null to inactivate all children.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.CardLayoutGroup.SetActiveCard(System.Int32)">
            <summary>
            Switches the active card.
            </summary>
            <param name="index">The child index to make active, or -1 to inactivate all children.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.GridComponent`1">
            <summary>
            A component in the grid with its placement information.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.GridComponent`1.Item">
            <summary>
            The object to place here.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.GridComponentSpec">
            <summary>
            Stores the state of a component in a grid layout.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.GridComponentSpec.Alignment">
            <summary>
            The alignment of the component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.GridComponentSpec.Column">
            <summary>
            The column of the component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.GridComponentSpec.ColumnSpan">
            <summary>
            The number of columns this component spans.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.GridComponentSpec.Margin">
            <summary>
            The margin to allocate around each component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.GridComponentSpec.Row">
            <summary>
            The row of the component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.GridComponentSpec.RowSpan">
            <summary>
            The number of rows this component spans.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.GridComponentSpec.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new grid component specification. While the row and column are mandatory,
            the other attributes can be optionally specified in the initializer.
            </summary>
            <param name="row">The row to place the component.</param>
            <param name="column">The column to place the component.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.GridColumnSpec">
            <summary>
            The specifications for one column in a grid layout.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.GridColumnSpec.FlexWidth">
            <summary>
            The flexible width of this grid column. If there is space left after all
            columns get their nominal width, each column will get a fraction of the space
            left proportional to their FlexWidth value as a ratio to the total flexible
            width values.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.GridColumnSpec.Width">
            <summary>
            The nominal width of this grid column. If zero, the preferred width of the
            largest component is used. If there are no components in this column (possibly
            because the only components in this row all have column spans from other
            columns), the width will be zero!
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.GridColumnSpec.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new grid column specification.
            </summary>
            <param name="width">The column's base width, or 0 to auto-size the column to the
            preferred width of its largest component.</param>
            <param name="flex">The percentage of the leftover width the column should occupy.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.GridRowSpec">
            <summary>
            The specifications for one row in a grid layout.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.GridRowSpec.FlexHeight">
            <summary>
            The flexible height of this grid row. If there is space left after all rows
            get their nominal height, each row will get a fraction of the space left
            proportional to their FlexHeight value as a ratio to the total flexible
            height values.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.GridRowSpec.Height">
            <summary>
            The nominal height of this grid row. If zero, the preferred height of the
            largest component is used. If there are no components in this row (possibly
            because the only components in this row all have row spans from other rows),
            the height will be zero!
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.GridRowSpec.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new grid row specification.
            </summary>
            <param name="height">The row's base width, or 0 to auto-size the row to the
            preferred height of its largest component.</param>
            <param name="flex">The percentage of the leftover height the row should occupy.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.PGridLayoutGroup">
            <summary>
            Implements a flexible version of the base GridLayout.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PGridLayoutGroup.GetColumnWidths(PeterHan.PLib.UI.Layouts.GridLayoutResults,System.Single,UnityEngine.RectOffset)">
            <summary>
            Calculates all column widths.
            </summary>
            <param name="results">The results from layout.</param>
            <param name="width">The current container width.</param>
            <param name="margin">The margins within the borders.</param>
            <returns>The column widths.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PGridLayoutGroup.GetRowHeights(PeterHan.PLib.UI.Layouts.GridLayoutResults,System.Single,UnityEngine.RectOffset)">
            <summary>
            Calculates all row heights.
            </summary>
            <param name="results">The results from layout.</param>
            <param name="height">The current container height.</param>
            <param name="margin">The margins within the borders.</param>
            <returns>The row heights.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PGridLayoutGroup.SetFinalHeight(PeterHan.PLib.UI.Layouts.SizedGridComponent,System.Single[])">
            <summary>
            Calculates the final height of this component and applies it to the component.
            </summary>
            <param name="component">The component to calculate.</param>
            <param name="rowY">The row locations from GetRowHeights.</param>
            <returns>true if the height was applied, or false if the component was not laid out
            due to being disposed or set to ignore layout.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PGridLayoutGroup.SetFinalWidth(PeterHan.PLib.UI.Layouts.SizedGridComponent,System.Single[])">
            <summary>
            Calculates the final width of this component and applies it to the component.
            </summary>
            <param name="component">The component to calculate.</param>
            <param name="colX">The column locations from GetColumnWidths.</param>
            <returns>true if the width was applied, or false if the component was not laid out
            due to being disposed or set to ignore layout.</returns>
        </member>
        <member name="P:PeterHan.PLib.UI.PGridLayoutGroup.Margin">
            <summary>
            The margin around the components as a whole.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PGridLayoutGroup.children">
            <summary>
            The children of this panel.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PGridLayoutGroup.columns">
            <summary>
            The columns in this panel.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PGridLayoutGroup.margin">
            <summary>
            The margin around the components as a whole.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PGridLayoutGroup.results">
            <summary>
            The current layout status.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PGridLayoutGroup.rows">
            <summary>
            The rows in this panel.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PGridLayoutGroup.AddColumn(PeterHan.PLib.UI.GridColumnSpec)">
            <summary>
            Adds a column to this grid layout.
            </summary>
            <param name="column">The specification for that column.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PGridLayoutGroup.AddComponent(UnityEngine.GameObject,PeterHan.PLib.UI.GridComponentSpec)">
            <summary>
            Adds a component to this layout. Components added through other means to the
            transform will not be laid out at all!
            </summary>
            <param name="child">The child to add.</param>
            <param name="spec">The location where the child will be placed.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PGridLayoutGroup.AddRow(PeterHan.PLib.UI.GridRowSpec)">
            <summary>
            Adds a row to this grid layout.
            </summary>
            <param name="row">The specification for that row.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.RelativeLayoutGroup">
            <summary>
            A layout group based on the constraints defined in RelativeLayout. Allows the same
            fast relative positioning that RelativeLayout does, but can respond to changes in the
            size of its containing components.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.RelativeLayoutGroup.Margin">
            <summary>
            The margin added around all components in the layout. This is in addition to any
            margins around the components.
            
            Note that this margin is not taken into account with percentage based anchors.
            Items anchored to the extremes will always work fine. Items anchored in the middle
            will use the middle <b>before</b> margins are effective.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.RelativeLayoutGroup.locConstraints">
            <summary>
            Constraints for each object are stored here.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.RelativeLayoutGroup.serialConstraints">
            <summary>
            The serialized constraints.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.RelativeLayoutGroup.margin">
            <summary>
            The margin around the components as a whole.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.RelativeLayoutGroup.results">
            <summary>
            The results of the layout in progress.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.RelativeLayoutGroup.AddOrGet(UnityEngine.GameObject)">
            <summary>
            Retrieves the parameters for a child game object. Creates an entry if none exists
            for this component.
            </summary>
            <param name="item">The item to look up.</param>
            <returns>The parameters for that object.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.RelativeLayoutGroup.Import(System.Collections.Generic.IDictionary{UnityEngine.GameObject,PeterHan.PLib.UI.Layouts.RelativeLayoutParams})">
            <summary>
            Imports the data from RelativeLayout for compatibility.
            </summary>
            <param name="values">The raw data to import.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.RelativeLayoutGroup.SetEdge(PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase{UnityEngine.GameObject}.EdgeStatus,System.Single,UnityEngine.GameObject)">
            <summary>
            Sets a component's edge constraint.
            </summary>
            <param name="edge">The edge to set.</param>
            <param name="fraction">The fraction of the parent to anchor.</param>
            <param name="child">The other component to anchor.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.RelativeLayoutGroup.SetRaw(UnityEngine.GameObject,PeterHan.PLib.UI.Layouts.RelativeLayoutParams)">
            <summary>
            Sets all layout parameters of an object at once.
            </summary>
            <param name="item">The item to configure.</param>
            <param name="rawParams">The raw parameters to use.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.PButton">
            <summary>
            A custom UI button factory class.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PButton.BUTTON_MARGIN">
            <summary>
            The default margins around a button.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PButton.SetupButton(KButton,KImage)">
            <summary>
            Sets up the button to have the right sound and background image.
            </summary>
            <param name="button">The button to set up.</param>
            <param name="bgImage">The background image.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PButton.SetupButtonBackground(KImage)">
            <summary>
            Sets up the background image to have the right sprite and slice type.
            </summary>
            <param name="bgImage">The image that forms the button background.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PButton.SetButtonEnabled(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Enables or disables a realized button.
            </summary>
            <param name="obj">The realized button object.</param>
            <param name="enabled">true to make it enabled, or false to make it disabled (greyed out).</param>
        </member>
        <member name="P:PeterHan.PLib.UI.PButton.Color">
            <summary>
            The button's background color.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PButton.OnClick">
            <summary>
            The action to trigger on click. It is passed the realized source object.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PButton.AddOnRealize(PeterHan.PLib.UI.PUIDelegates.OnRealize)">
            <summary>
            Adds a handler when this button is realized.
            </summary>
            <param name="onRealize">The handler to invoke on realization.</param>
            <returns>This button for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PButton.SetImageLeftArrow">
            <summary>
            Sets the sprite to a leftward facing arrow. Beware the size, scale the button down!
            </summary>
            <returns>This button for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PButton.SetImageRightArrow">
            <summary>
            Sets the sprite to a rightward facing arrow. Beware the size, scale the button
            down!
            </summary>
            <returns>This button for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PButton.SetKleiPinkStyle">
            <summary>
            Sets the default Klei pink button style as this button's color and text style.
            </summary>
            <returns>This button for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PButton.SetKleiBlueStyle">
            <summary>
            Sets the default Klei blue button style as this button's color and text style.
            </summary>
            <returns>This button for call chaining.</returns>
        </member>
        <member name="T:PeterHan.PLib.UI.PCheckBox">
            <summary>
            A custom UI button check box factory class.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PCheckBox.CHECKBOX_MARGIN">
            <summary>
            The border size between the checkbox border and icon.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PCheckBox.STATE_UNCHECKED">
            <summary>
            The unchecked state.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PCheckBox.STATE_CHECKED">
            <summary>
            The checked state.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PCheckBox.STATE_PARTIAL">
            <summary>
            The partially checked state.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PCheckBox.GenerateStates(ColorStyleSetting)">
            <summary>
            Generates the checkbox image states.
            </summary>
            <param name="imageColor">The color style for the checked icon.</param>
            <returns>The states for this checkbox.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PCheckBox.GetCheckState(UnityEngine.GameObject)">
            <summary>
            Gets a realized check box's state.
            </summary>
            <param name="realized">The realized check box.</param>
            <returns>The check box state.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PCheckBox.SetCheckState(UnityEngine.GameObject,System.Int32)">
            <summary>
            Sets a realized check box's state.
            </summary>
            <param name="realized">The realized check box.</param>
            <param name="state">The new state to set.</param>
        </member>
        <member name="P:PeterHan.PLib.UI.PCheckBox.CheckColor">
            <summary>
            The check box color.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PCheckBox.BackColor">
            <summary>
            The check box's background color.
            
            Unlike other components, this color applies only to the check box itself.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PCheckBox.CheckSize">
            <summary>
            The size to scale the check box. If 0x0, it will not be scaled.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PCheckBox.ComponentBackColor">
            <summary>
            The background color of everything that is not the check box.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PCheckBox.InitialState">
            <summary>
            The initial check box state.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PCheckBox.OnChecked">
            <summary>
            The action to trigger on click. It is passed the realized source object.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PCheckBox.AddOnRealize(PeterHan.PLib.UI.PUIDelegates.OnRealize)">
            <summary>
            Adds a handler when this check box is realized.
            </summary>
            <param name="onRealize">The handler to invoke on realization.</param>
            <returns>This check box for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PCheckBox.CreateCheckImage(UnityEngine.GameObject,ColorStyleSetting,UnityEngine.Vector2@)">
            <summary>
            Creates the actual image that shows the checkbox graphically.
            </summary>
            <param name="checkbox">The parent object to add the image.</param>
            <param name="color">The color style for the box border.</param>
            <param name="actualSize">The actual check mark size, which will be updated if it
            is 0x0 to the default size.</param>
            <returns>The image reference to the checkmark image itself.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PCheckBox.SetKleiPinkStyle">
            <summary>
            Sets the default Klei pink button style as this check box's color and text style.
            </summary>
            <returns>This check box for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PCheckBox.SetKleiBlueStyle">
            <summary>
            Sets the default Klei blue button style as this check box's color and text style.
            </summary>
            <returns>This check box for call chaining.</returns>
        </member>
        <member name="T:PeterHan.PLib.UI.PComboBox`1">
            <summary>
            A custom UI combo box factory class.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PComboBox`1.DEFAULT_ITEM_MARGIN">
            <summary>
            The default margin around items in the pulldown.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PComboBox`1.SetSelectedItem(UnityEngine.GameObject,IListableOption,System.Boolean)">
            <summary>
            Sets the selected option in a realized combo box.
            </summary>
            <param name="realized">The realized combo box.</param>
            <param name="option">The option to set.</param>
            <param name="fireListener">true to fire the on select listener, or false otherwise.</param>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBox`1.ArrowSize">
            <summary>
            The size of the sprite used to expand/contract the options.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBox`1.BackColor">
            <summary>
            The combo box's background color.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBox`1.CheckSize">
            <summary>
            The size of the check mark sprite used on the selected option.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBox`1.Content">
            <summary>
            The content of this combo box.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBox`1.EntryColor">
            <summary>
            The background color for each entry in the combo box pulldown.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBox`1.FlexSize">
            <summary>
            The flexible size bounds of this combo box.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBox`1.InitialItem">
            <summary>
            The initially selected item of the combo box.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBox`1.ItemMargin">
            <summary>
            The margin around each item in the pulldown.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBox`1.Margin">
            <summary>
            The margin around the component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBox`1.MaxRowsShown">
            <summary>
            The maximum number of items to be shown at once before a scroll bar is added.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBox`1.MinWidth">
            <summary>
            The minimum width in units (not characters!) of this text field.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBox`1.OnOptionSelected">
            <summary>
            The action to trigger when an item is selected. It is passed the realized source
            object.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBox`1.TextAlignment">
            <summary>
            The text alignment in the combo box.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBox`1.TextStyle">
            <summary>
            The combo box's text color, font, word wrap settings, and font size.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBox`1.ToolTip">
            <summary>
            The tool tip text.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PComboBox`1.AddOnRealize(PeterHan.PLib.UI.PUIDelegates.OnRealize)">
            <summary>
            Adds a handler when this combo box is realized.
            </summary>
            <param name="onRealize">The handler to invoke on realization.</param>
            <returns>This combo box for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PComboBox`1.BuildRowPrefab(TextStyleSetting,ColorStyleSetting)">
            <summary>
            Builds a row selection prefab object for this combo box.
            </summary>
            <param name="style">The text style for the entries.</param>
            <param name="entryColor">The color for the entry backgrounds.</param>
            <returns>A template for each row in the dropdown.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PComboBox`1.SetKleiPinkStyle">
            <summary>
            Sets the default Klei pink button style as this combo box's foreground color and text style.
            </summary>
            <returns>This combo box for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PComboBox`1.SetKleiBlueStyle">
            <summary>
            Sets the default Klei blue button style as this combo box's foreground color and text style.
            </summary>
            <returns>This combo box for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PComboBox`1.SetMinWidthInCharacters(System.Int32)">
            <summary>
            Sets the minimum (and preferred) width of this combo box in characters.
            
            The width is computed using the currently selected text style.
            </summary>
            <param name="chars">The number of characters to be displayed.</param>
            <returns>This combo box for call chaining.</returns>
        </member>
        <member name="T:PeterHan.PLib.UI.PComboBoxComponent">
            <summary>
            An improved variant of DropDown/Dropdown.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBoxComponent.ContentContainer">
            <summary>
            The container where the combo box items will be placed.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBoxComponent.CheckColor">
            <summary>
            The color for the checkbox if it is selected.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBoxComponent.EntryPrefab">
            <summary>
            The prefab used to display each row.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBoxComponent.MaxRowsShown">
            <summary>
            The maximum number of rows to be shown.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBoxComponent.OnSelectionChanged">
            <summary>
            Called when an item is selected.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBoxComponent.Pulldown">
            <summary>
            The object which contains the pull down section of the combo box.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBoxComponent.SelectedLabel">
            <summary>
            The selected label.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PComboBoxComponent.currentItems">
            <summary>
            The items which are currently shown in this combo box.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PComboBoxComponent.handler">
            <summary>
            The currently active mouse event handler, or null if not yet configured.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PComboBoxComponent.open">
            <summary>
            Whether the combo box is expanded.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PComboBoxComponent.Close">
            <summary>
            Closes the pulldown. The selected choice is not saved.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PComboBoxComponent.OnClick">
            <summary>
            Triggered when the combo box is clicked.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PComboBoxComponent.Open">
            <summary>
            Opens the pulldown.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PComboBoxComponent.SetItems(System.Collections.Generic.IEnumerable{IListableOption})">
            <summary>
            Sets the items which will be shown in this combo box.
            </summary>
            <param name="items">The items to show.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PComboBoxComponent.SetSelectedItem(IListableOption,System.Boolean)">
            <summary>
            Sets the selected item in the combo box.
            </summary>
            <param name="option">The option that was chosen.</param>
            <param name="fireListener">true to also fire the option selected listener, or false otherwise.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PComboBoxComponent.Update">
            <summary>
            Called each frame by Unity, checks to see if the user clicks/scrolls outside of
            the dropdown while open, and closes it if so.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.PComboBoxComponent.ComboBoxItem">
            <summary>
            The items in a combo box, paired with the game object owning that row and the
            object that goes there.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.PComboBoxComponent.MouseEventHandler">
            <summary>
            Handles mouse events on the pulldown.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PComboBoxComponent.MouseEventHandler.IsOver">
            <summary>
            Whether the mouse is over this component.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.PContainer">
            <summary>
            The abstract parent of PLib UI objects that are meant to contain other UI objects.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PContainer.BackColor">
            <summary>
            The background color of this panel.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PContainer.BackImage">
            <summary>
            The background image of this panel. Tinted by the background color, acts as all
            white if left null.
            
            Note that the default background color is transparent, so unless it is set to
            some other color this image will be invisible!
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PContainer.FlexSize">
            <summary>
            The flexible size bounds of this component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PContainer.ImageMode">
            <summary>
            The mode to use when displaying the background image.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PContainer.Margin">
            <summary>
            The margin left around the contained components in pixels. If null, no margin will
            be used.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PContainer.InvokeRealize(UnityEngine.GameObject)">
            <summary>
            Invokes the OnRealize event.
            </summary>
            <param name="obj">The realized text component.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PContainer.SetImage(UnityEngine.GameObject)">
            <summary>
            Configures the background color and/or image for this panel.
            </summary>
            <param name="panel">The realized panel object.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.PDialog">
            <summary>
            A dialog root for UI components.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PDialog.BUTTON_MARGIN">
            <summary>
            The margin around dialog buttons.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PDialog.CLOSE_ICON_MARGIN">
            <summary>
            The margin inside the dialog close button.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PDialog.CLOSE_ICON_SIZE">
            <summary>
            The size of the dialog close button's icon.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PDialog.DIALOG_KEY_CLOSE">
            <summary>
            The dialog key returned if the user closes the dialog with [ESC] or the X.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PDialog.GetParentObject">
            <summary>
            Returns a suitable parent object for a dialog.
            </summary>
            <returns>A game object that can be used as a dialog parent depending on the game
            stage, or null if none is available.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PDialog.RoundUpSize(System.Single,System.Single)">
            <summary>
            Rounds the size up to the nearest even integer.
            </summary>
            <param name="size">The current size.</param>
            <param name="maxSize">The maximum allowed size.</param>
            <returns>The rounded size.</returns>
        </member>
        <member name="P:PeterHan.PLib.UI.PDialog.Body">
            <summary>
            The dialog body panel. To add custom components to the dialog, use AddChild on
            this panel. Its direction, margin, and spacing can also be customized.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PDialog.DialogBackColor">
            <summary>
            The background color of the dialog itself (including button panel).
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PDialog.MaxSize">
            <summary>
            The dialog's maximum size. If the dialog preferred size is bigger than this size,
            the dialog will be decreased in size to fit. If either axis is zero, the dialog
            gets its preferred size in that axis, at least the value in Size.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PDialog.Parent">
            <summary>
            The dialog's parent.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PDialog.RoundToNearestEven">
            <summary>
            If a dialog with an odd width/height is displayed, all offsets will end up on a
            half pixel offset, which may cause unusual display artifacts as Banker's Rounding
            will round values that are supposed to be 1.0 units apart into integer values 2
            units apart. If set, this flag will cause Build to round the dialog's size up to
            the nearest even integer. If the dialog is already at its maximum size and is still
            an odd integer in size, it is rounded down one instead.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PDialog.Size">
            <summary>
            The dialog's minimum size. If the dialog preferred size is bigger than this size,
            the dialog will be increased in size to fit. If either axis is zero, the dialog
            gets its preferred size in that axis, up until the value in MaxSize.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PDialog.SortKey">
            <summary>
            The dialog sort order which determines which other dialogs this one is on top of.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PDialog.Title">
            <summary>
            The dialog's title.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PDialog.buttons">
            <summary>
            The allowable button choices for the dialog.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PDialog.DialogClosed">
            <summary>
            The events to invoke when the dialog is closed.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PDialog.AddButton(System.String,System.String,System.String)">
            <summary>
            Adds a button to the dialog. The button will use a blue background with white text
            in the default UI font, except for the last button which will be pink.
            </summary>
            <param name="key">The key to report if this button is selected.</param>
            <param name="text">The button text.</param>
            <param name="tooltip">The tooltip to display on the button (optional)</param>
            <returns>This dialog for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PDialog.AddButton(System.String,System.String,System.String,ColorStyleSetting,TextStyleSetting)">
            <summary>
            Adds a button to the dialog.
            </summary>
            <param name="key">The key to report if this button is selected.</param>
            <param name="text">The button text.</param>
            <param name="tooltip">The tooltip to display on the button (optional)</param>
            <param name="backColor">The background color to use for the button. If null or
            omitted, the last button will be pink and all others will be blue.</param>
            <param name="foreColor">The foreground color to use for the button. If null or
            omitted, white text with the default game UI font will be used.</param>
            <returns>This dialog for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PDialog.AddOnRealize(PeterHan.PLib.UI.PUIDelegates.OnRealize)">
            <summary>
            Adds a handler when this dialog is realized.
            </summary>
            <param name="onRealize">The handler to invoke on realization.</param>
            <returns>This dialog for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PDialog.CreateUserButtons(PeterHan.PLib.UI.PGridLayoutGroup,PeterHan.PLib.UI.PUIDelegates.OnButtonPressed)">
            <summary>
            Creates the user buttons.
            </summary>
            <param name="layout">The location to add the buttons.</param>
            <param name="onPressed">The handler to call when any button is pressed.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PDialog.LayoutTitle(PeterHan.PLib.UI.PGridLayoutGroup,PeterHan.PLib.UI.PUIDelegates.OnButtonPressed)">
            <summary>
            Lays out the dialog title bar and close button.
            </summary>
            <param name="layout">The layout manager for the dialog.</param>
            <param name="onClose">The action to invoke when close is pressed.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PDialog.SetDialogSize(UnityEngine.GameObject)">
            <summary>
            Sets the final size of the dialog using its current position.
            </summary>
            <param name="dialog">The realized dialog with all components populated.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PDialog.Show">
            <summary>
            Builds and shows this dialog.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.PDialog.DialogButton">
            <summary>
            Stores information about a dialog button in this dialog.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PDialog.DialogButton.backColor">
            <summary>
            The color to use when displaying the button. If null, the default color will
            be used.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PDialog.DialogButton.key">
            <summary>
            The button key used to indicate that it was selected.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PDialog.DialogButton.text">
            <summary>
            The text to display for the button.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PDialog.DialogButton.textColor">
            <summary>
            The color to use when displaying the button text. If null, the default color
            will be used.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PDialog.DialogButton.tooltip">
            <summary>
            The tooltip for this button.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.PDialog.PDialogComp">
            <summary>
            The Klei component which backs the dialog.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PDialog.PDialogComp.dialog">
            <summary>
            The events to invoke when the dialog is closed.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PDialog.PDialogComp.key">
            <summary>
            The key selected by the user.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PDialog.PDialogComp.sortKey">
            <summary>
            The sort order of this dialog.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PDialog.PDialogComp.DoButton(UnityEngine.GameObject)">
            <summary>
            A delegate which closes the dialog on prompt.
            </summary>
            <param name="source">The button source.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.PGridPanel">
            <summary>
            A panel which lays out its components using grid-type constraints.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PGridPanel.Columns">
            <summary>
            The number of columns currently defined.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PGridPanel.Rows">
            <summary>
            The number of rows currently defined.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PGridPanel.children">
            <summary>
            The children of this panel.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PGridPanel.columns">
            <summary>
            The columns in this panel.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PGridPanel.rows">
            <summary>
            The rows in this panel.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PGridPanel.AddChild(PeterHan.PLib.UI.IUIComponent,PeterHan.PLib.UI.GridComponentSpec)">
            <summary>
            Adds a child to this panel.
            </summary>
            <param name="child">The child to add.</param>
            <param name="spec">The location where the child will be placed.</param>
            <returns>This panel for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PGridPanel.AddColumn(PeterHan.PLib.UI.GridColumnSpec)">
            <summary>
            Adds a column to this panel.
            </summary>
            <param name="column">The specification for that column.</param>
            <returns>This panel for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PGridPanel.AddOnRealize(PeterHan.PLib.UI.PUIDelegates.OnRealize)">
            <summary>
            Adds a handler when this panel is realized.
            </summary>
            <param name="onRealize">The handler to invoke on realization.</param>
            <returns>This panel for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PGridPanel.AddRow(PeterHan.PLib.UI.GridRowSpec)">
            <summary>
            Adds a row to this panel.
            </summary>
            <param name="row">The specification for that row.</param>
            <returns>This panel for call chaining.</returns>
        </member>
        <member name="T:PeterHan.PLib.UI.PLabel">
            <summary>
            A custom UI label factory class.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PLabel.BackColor">
            <summary>
            The label's background color.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PLabel.AddOnRealize(PeterHan.PLib.UI.PUIDelegates.OnRealize)">
            <summary>
            Adds a handler when this label is realized.
            </summary>
            <param name="onRealize">The handler to invoke on realization.</param>
            <returns>This label for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PLabel.SetKleiBlueColor">
            <summary>
            Sets the background color to the default Klei dialog blue.
            </summary>
            <returns>This label for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PLabel.SetKleiPinkColor">
            <summary>
            Sets the background color to the Klei dialog header pink.
            </summary>
            <returns>This label for call chaining.</returns>
        </member>
        <member name="T:PeterHan.PLib.UI.PPanel">
            <summary>
            A custom UI panel factory which can arrange its children horizontally or vertically.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PPanel.Alignment">
            <summary>
            The alignment position to use for child elements if they are smaller than the
            required size.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PPanel.Direction">
            <summary>
            The direction in which components will be laid out.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PPanel.Spacing">
            <summary>
            The spacing between components in pixels.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PPanel.children">
            <summary>
            The children of this panel.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PPanel.AddChild(PeterHan.PLib.UI.IUIComponent)">
            <summary>
            Adds a child to this panel.
            </summary>
            <param name="child">The child to add.</param>
            <returns>This panel for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PPanel.AddOnRealize(PeterHan.PLib.UI.PUIDelegates.OnRealize)">
            <summary>
            Adds a handler when this panel is realized.
            </summary>
            <param name="onRealize">The handler to invoke on realization.</param>
            <returns>This panel for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PPanel.Build(UnityEngine.Vector2,System.Boolean)">
            <summary>
            Builds this panel.
            </summary>
            <param name="size">The fixed size to use if dynamic is false.</param>
            <param name="dynamic">Whether to use dynamic sizing.</param>
            <returns>The realized panel.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PPanel.BuildWithFixedSize(UnityEngine.Vector2)">
            <summary>
            Builds this panel with a given default size.
            </summary>
            <param name="size">The fixed size to use.</param>
            <returns>The realized panel.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PPanel.RemoveChild(PeterHan.PLib.UI.IUIComponent)">
            <summary>
            Removes a child from this panel.
            </summary>
            <param name="child">The child to remove.</param>
            <returns>This panel for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PPanel.SetKleiBlueColor">
            <summary>
            Sets the background color to the default Klei dialog blue.
            </summary>
            <returns>This panel for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PPanel.SetKleiPinkColor">
            <summary>
            Sets the background color to the Klei dialog header pink.
            </summary>
            <returns>This panel for call chaining.</returns>
        </member>
        <member name="T:PeterHan.PLib.UI.PanelDirection">
            <summary>
            The direction in which PPanel lays out components.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.PRelativePanel">
            <summary>
            A panel which lays out its components using relative constraints.
            
            This layout manager is the fastest of all panels when laid out, especially since it
            can function properly when frozen even on dynamically sized items. However, it is also
            the most difficult to set up and cannot handle all layouts.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PRelativePanel.constraints">
            <summary>
            Constraints for each object are stored here.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PRelativePanel.AddChild(PeterHan.PLib.UI.IUIComponent)">
            <summary>
            Adds a child to this panel. Children must be added to the panel before they are
            referenced in a constraint.
            </summary>
            <param name="child">The child to add.</param>
            <returns>This panel for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PRelativePanel.AddOnRealize(PeterHan.PLib.UI.PUIDelegates.OnRealize)">
            <summary>
            Adds a handler when this panel is realized.
            </summary>
            <param name="onRealize">The handler to invoke on realization.</param>
            <returns>This panel for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PRelativePanel.AnchorXAxis(PeterHan.PLib.UI.IUIComponent,System.Single)">
            <summary>
            Anchors the component's pivot in the X axis to the specified anchor position.
            The component will be laid out at its preferred (or overridden) width with its
            pivot locked to the specified relative fraction of the parent component's width.
            
            Any other existing left or right edge constraints will be overwritten. This method
            is equivalent to setting both the left and right edges to the same fraction.
            </summary>
            <param name="item">The component to adjust.</param>
            <param name="anchor">The fraction to which to align the pivot, with 0.0f
            being the left and 1.0f being the right.</param>
            <returns>This object, for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PRelativePanel.AnchorYAxis(PeterHan.PLib.UI.IUIComponent,System.Single)">
            <summary>
            Anchors the component's pivot in the Y axis to the specified anchor position.
            The component will be laid out at its preferred (or overridden) height with its
            pivot locked to the specified relative fraction of the parent component's height.
            
            Any other existing top or bottom edge constraints will be overwritten. This method
            is equivalent to setting both the top and bottom edges to the same fraction.
            </summary>
            <param name="item">The component to adjust.</param>
            <param name="anchor">The fraction to which to align the pivot, with 0.0f
            being the bottom and 1.0f being the top.</param>
            <returns>This object, for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PRelativePanel.GetOrThrow(PeterHan.PLib.UI.IUIComponent)">
            <summary>
            Retrieves the constraints for a component, or throws an exception if the component
            has not yet been added.
            </summary>
            <param name="item">The unrealized component to look up.</param>
            <returns>The constraints for that component.</returns>
            <exception cref="T:System.ArgumentException">If the component has not yet been added to the panel.</exception>
        </member>
        <member name="M:PeterHan.PLib.UI.PRelativePanel.OverrideSize(PeterHan.PLib.UI.IUIComponent,UnityEngine.Vector2)">
            <summary>
            Overrides the preferred size of a component. If set, instead of looking at layout
            sizes of the component, the specified size will be used instead.
            </summary>
            <param name="item">The component to adjust.</param>
            <param name="size">The size to apply. Only dimensions greater than zero will be used.</param>
            <returns>This object, for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PRelativePanel.Resolve(PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase{UnityEngine.GameObject}.EdgeStatus,PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase{PeterHan.PLib.UI.IUIComponent}.EdgeStatus,System.Collections.Generic.IDictionary{PeterHan.PLib.UI.IUIComponent,UnityEngine.GameObject})">
            <summary>
            Converts the edge settings configured in this component to settings for the
            relative panel.
            </summary>
            <param name="dest">The location where the converted settings will be stored.</param>
            <param name="status">The original component edge configuration.</param>
            <param name="mapping">The mapping from PLib UI components to Unity objects.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PRelativePanel.SetBottomEdge(PeterHan.PLib.UI.IUIComponent,System.Single,PeterHan.PLib.UI.IUIComponent)">
            <summary>
            Sets the bottom edge of a game object. If the fraction is supplied, the component
            will be laid out with the bottom edge anchored to that fraction of the parent's
            height. If a component is specified and no fraction is specified, the component
            will be anchored with its bottom edge above the top edge of that component.
            If neither is specified, all bottom edge constraints will be removed.
            
            Any other existing bottom edge constraint will be overwritten.
            
            Remember that +Y is in the upwards direction.
            </summary>
            <param name="item">The component to adjust.</param>
            <param name="fraction">The fraction to which to align the bottom edge, with 0.0f
            being the bottom and 1.0f being the top.</param>
            <param name="above">The game object which this component must be above.</param>
            <returns>This object, for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PRelativePanel.SetEdge(PeterHan.PLib.UI.Layouts.RelativeLayoutParamsBase{PeterHan.PLib.UI.IUIComponent}.EdgeStatus,System.Single,PeterHan.PLib.UI.IUIComponent)">
            <summary>
            Sets a component's edge constraint.
            </summary>
            <param name="edge">The edge to set.</param>
            <param name="fraction">The fraction of the parent to anchor.</param>
            <param name="child">The other component to anchor.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PRelativePanel.SetLeftEdge(PeterHan.PLib.UI.IUIComponent,System.Single,PeterHan.PLib.UI.IUIComponent)">
            <summary>
            Sets the left edge of a game object. If the fraction is supplied, the component
            will be laid out with the left edge anchored to that fraction of the parent's
            width. If a component is specified and no fraction is specified, the component
            will be anchored with its left edge to the right of that component.
            If neither is specified, all left edge constraints will be removed.
            
            Any other existing left edge constraint will be overwritten.
            </summary>
            <param name="item">The component to adjust.</param>
            <param name="fraction">The fraction to which to align the left edge, with 0.0f
            being the left and 1.0f being the right.</param>
            <param name="toLeft">The game object which this component must be to the right of.</param>
            <returns>This object, for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PRelativePanel.SetMargin(PeterHan.PLib.UI.IUIComponent,UnityEngine.RectOffset)">
            <summary>
            Sets the insets of a component from its anchor points. A positive number insets the
            component away from the edge, whereas a negative number out-sets the component
            across the edge.
            
            All components default to no insets.
            
            Any reference to a component's edge using other constraints always refers to its
            edge <b>before</b> insets are applied.
            </summary>
            <param name="item">The component to adjust.</param>
            <param name="insets">The insets to apply. If null, the insets will be set to zero.</param>
            <returns>This object, for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PRelativePanel.SetRightEdge(PeterHan.PLib.UI.IUIComponent,System.Single,PeterHan.PLib.UI.IUIComponent)">
            <summary>
            Sets the right edge of a game object. If the fraction is supplied, the component
            will be laid out with the right edge anchored to that fraction of the parent's
            width. If a component is specified and no fraction is specified, the component
            will be anchored with its right edge to the left of that component.
            If neither is specified, all right edge constraints will be removed.
            
            Any other existing right edge constraint will be overwritten.
            </summary>
            <param name="item">The component to adjust.</param>
            <param name="fraction">The fraction to which to align the right edge, with 0.0f
            being the left and 1.0f being the right.</param>
            <param name="toLeft">The game object which this component must be to the left of.</param>
            <returns>This object, for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PRelativePanel.SetTopEdge(PeterHan.PLib.UI.IUIComponent,System.Single,PeterHan.PLib.UI.IUIComponent)">
            <summary>
            Sets the top edge of a game object. If the fraction is supplied, the component
            will be laid out with the top edge anchored to that fraction of the parent's
            height. If a component is specified and no fraction is specified, the component
            will be anchored with its top edge above the bottom edge of that component.
            If neither is specified, all top edge constraints will be removed.
            
            Any other existing top edge constraint will be overwritten.
            
            Remember that +Y is in the upwards direction.
            </summary>
            <param name="item">The component to adjust.</param>
            <param name="fraction">The fraction to which to align the top edge, with 0.0f
            being the bottom and 1.0f being the top.</param>
            <param name="below">The game object which this component must be below.</param>
            <returns>This object, for call chaining.</returns>
        </member>
        <member name="T:PeterHan.PLib.UI.PScrollPane">
            <summary>
            A factory for scrollable panes.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PScrollPane.DEFAULT_TRACK_SIZE">
            <summary>
            The track size of scrollbars is based on the sprite.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PScrollPane.AlwaysShowHorizontal">
            <summary>
            Whether the horizontal scrollbar is always visible.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PScrollPane.AlwaysShowVertical">
            <summary>
            Whether the vertical scrollbar is always visible.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PScrollPane.BackColor">
            <summary>
            The background color of this scroll pane.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PScrollPane.Child">
            <summary>
            The child of this scroll pane.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PScrollPane.FlexSize">
            <summary>
            The flexible size bounds of this component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PScrollPane.ScrollHorizontal">
            <summary>
            Whether horizontal scrolling is allowed.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PScrollPane.ScrollVertical">
            <summary>
            Whether vertical scrolling is allowed.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PScrollPane.TrackSize">
            <summary>
            The size of the scrollbar track.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PScrollPane.AddOnRealize(PeterHan.PLib.UI.PUIDelegates.OnRealize)">
            <summary>
            Adds a handler when this scroll pane is realized.
            </summary>
            <param name="onRealize">The handler to invoke on realization.</param>
            <returns>This scroll pane for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PScrollPane.BuildScrollPane(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            Builds the actual scroll pane object.
            </summary>
            <param name="parent">The parent of this scroll pane.</param>
            <param name="child">The child element of this scroll pane.</param>
            <returns>The realized scroll pane.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PScrollPane.CreateScrollHoriz(UnityEngine.GameObject)">
            <summary>
            Creates a horizontal scroll bar.
            </summary>
            <param name="parent">The parent component.</param>
            <returns>The scroll bar component.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PScrollPane.CreateScrollVert(UnityEngine.GameObject)">
            <summary>
            Creates a vertical scroll bar.
            </summary>
            <param name="parent">The parent component.</param>
            <returns>The scroll bar component.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PScrollPane.SetKleiBlueColor">
            <summary>
            Sets the background color to the default Klei dialog blue.
            </summary>
            <returns>This scroll pane for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PScrollPane.SetKleiPinkColor">
            <summary>
            Sets the background color to the Klei dialog header pink.
            </summary>
            <returns>This scroll pane for call chaining.</returns>
        </member>
        <member name="T:PeterHan.PLib.UI.PScrollPane.PScrollPaneLayout">
            <summary>
            Handles layout for scroll panes. Not freezable.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PScrollPane.PScrollPaneLayout.calcElements">
            <summary>
            Caches elements when calculating layout to improve performance.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PScrollPane.PScrollPaneLayout.childHorizontal">
            <summary>
            The calculated horizontal size of the child element.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PScrollPane.PScrollPaneLayout.childVertical">
            <summary>
            The calculated vertical size of the child element.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PScrollPane.PScrollPaneLayout.child">
            <summary>
            The child object inside the scroll rect.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PScrollPane.PScrollPaneLayout.setElements">
            <summary>
            Caches elements when setting layout to improve performance.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PScrollPane.PScrollPaneLayout.viewport">
            <summary>
            The viewport which clips the child rectangle.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PScrollPane.PScrollPaneLayout.UpdateComponents">
            <summary>
            Caches the child component for performance reasons at runtime.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.PScrollPane.ViewportLayoutGroup">
            <summary>
            A layout group object that does nothing. While it seems completely pointless,
            it allows LayoutRebuilder to pass by the viewport on Scroll Rects on its way up
            the tree, thus ensuring that the scroll rect gets rebuilt.
            
            On the way back down, this component gets skipped over by PScrollPaneLayout to
            save on processing, and the child layout is built directly.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.PSliderSingle">
            <summary>
            A custom UI slider factory class with one handle. Does not include a text field to set
            the value.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PSliderSingle.SetCurrentValue(UnityEngine.GameObject,System.Single)">
            <summary>
            Sets the current value of a realized slider.
            </summary>
            <param name="realized">The realized slider.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="P:PeterHan.PLib.UI.PSliderSingle.CustomTrack">
            <summary>
            If true, the default Klei track and fill will be skipped; only the handle will be
            shown.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PSliderSingle.Direction">
            <summary>
            The direction of the slider. The slider goes from minimum to maximum value in the
            direction indicated, i.e. LeftToRight is minimum left, maximum right.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PSliderSingle.FlexSize">
            <summary>
            The flexible size bounds of this component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PSliderSingle.HandleColor">
            <summary>
            The slider's handle color.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PSliderSingle.HandleSize">
            <summary>
            The size of the slider handle.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PSliderSingle.InitialValue">
            <summary>
            The initial slider value.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PSliderSingle.IntegersOnly">
            <summary>
            true to make the slider snap to integers, or false to allow any representable
            floating point number in the range.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PSliderSingle.MaxValue">
            <summary>
            The maximum value that can be set by this slider. The slider is a linear scale, but
            can be post-scaled by the user to nonlinear if necessary.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PSliderSingle.MinValue">
            <summary>
            The minimum value that can be set by this slider.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PSliderSingle.OnDrag">
            <summary>
            The action to trigger during slider dragging.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PSliderSingle.PreferredLength">
            <summary>
            The preferred length of the scrollbar. If vertical, this is the height, otherwise
            it is the width.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PSliderSingle.OnValueChanged">
            <summary>
            The action to trigger after the slider is changed. It is passed the realized source
            object and new value.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PSliderSingle.ToolTip">
            <summary>
            The tool tip text. If {0} is present, it will be formatted with the slider's
            current value.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PSliderSingle.TrackSize">
            <summary>
            The size of the slider track.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PSliderSingle.AddOnRealize(PeterHan.PLib.UI.PUIDelegates.OnRealize)">
            <summary>
            Adds a handler when this slider is realized.
            </summary>
            <param name="onRealize">The handler to invoke on realization.</param>
            <returns>This slider for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PSliderSingle.CreateHandle(UnityEngine.GameObject)">
            <summary>
            Creates the handle component.
            </summary>
            <param name="slider">The parent component.</param>
            <returns>The sliding handle object.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PSliderSingle.SetKleiPinkStyle">
            <summary>
            Sets the default Klei pink button style as this slider's foreground color style.
            </summary>
            <returns>This button for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PSliderSingle.SetKleiBlueStyle">
            <summary>
            Sets the default Klei blue button style as this slider's foreground color style.
            
            Note that the default slider handle has a hard coded pink color.
            </summary>
            <returns>This button for call chaining.</returns>
        </member>
        <member name="T:PeterHan.PLib.UI.PSpacer">
            <summary>
            A spacer to add into layouts. Has a large flexible width/height by default to eat all
            the extra space.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PSpacer.FlexSize">
            <summary>
            The flexible size of this spacer. Defaults to (1, 1) but can be set to (0, 0) to
            make this spacer a fixed size area instead.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PSpacer.PreferredSize">
            <summary>
            The preferred size of this spacer.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.PTextArea">
            <summary>
            A custom UI text area (multi-line text field) factory class. This class should
            probably be wrapped in a scroll pane.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextArea.BackColor">
            <summary>
            The text area's background color.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextArea.FlexSize">
            <summary>
            The flexible size bounds of this component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextArea.LineCount">
            <summary>
            The preferred number of text lines to be displayed. If the component is made
            bigger, the number of text lines (and size) can increase.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextArea.MaxLength">
            <summary>
            The maximum number of characters in this text area.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextArea.MinWidth">
            <summary>
            The minimum width in units (not characters!) of this text area.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextArea.TextAlignment">
            <summary>
            The text alignment in the text area.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextArea.Text">
            <summary>
            The initial text in the text field.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextArea.TextStyle">
            <summary>
            The text field's text color, font, word wrap settings, and font size.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextArea.ToolTip">
            <summary>
            The tool tip text.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextArea.OnTextChanged">
            <summary>
            The action to trigger on text change. It is passed the realized source object.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextArea.OnValidate">
            <summary>
            The callback to invoke when validating input.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextArea.AddOnRealize(PeterHan.PLib.UI.PUIDelegates.OnRealize)">
            <summary>
            Adds a handler when this text area is realized.
            </summary>
            <param name="onRealize">The handler to invoke on realization.</param>
            <returns>This text area for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextArea.ConfigureTextEntry(TMPro.TMP_InputField)">
            <summary>
            Sets up the text entry field.
            </summary>
            <param name="textEntry">The input field to configure.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextArea.SetKleiPinkStyle">
            <summary>
            Sets the default Klei pink style as this text area's color and text style.
            </summary>
            <returns>This button for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextArea.SetKleiBlueStyle">
            <summary>
            Sets the default Klei blue style as this text area's color and text style.
            </summary>
            <returns>This button for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextArea.SetMinWidthInCharacters(System.Int32)">
            <summary>
            Sets the minimum (and preferred) width of this text area in characters.
            
            The width is computed using the currently selected text style.
            </summary>
            <param name="chars">The number of characters to be displayed.</param>
            <returns>This button for call chaining.</returns>
        </member>
        <member name="T:PeterHan.PLib.UI.PTextComponent">
            <summary>
            The abstract parent of PLib UI components which display text and/or images.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PTextComponent.CENTER">
            <summary>
            The center of an object for pivoting.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextComponent.ArrangeComponent(PeterHan.PLib.UI.RelativeLayoutGroup,UnityEngine.GameObject,UnityEngine.TextAnchor)">
            <summary>
            Arranges a component in the parent layout in both directions.
            </summary>
            <param name="layout">The layout to modify.</param>
            <param name="target">The target object to arrange.</param>
            <param name="alignment">The object alignment to use.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextComponent.ImageChildHelper(UnityEngine.GameObject,PeterHan.PLib.UI.PTextComponent)">
            <summary>
            Shared routine to spawn UI image objects.
            </summary>
            <param name="parent">The parent object for the image.</param>
            <param name="settings">The settings to use for displaying the image.</param>
            <returns>The child image object.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextComponent.TextChildHelper(UnityEngine.GameObject,TextStyleSetting,System.String)">
            <summary>
            Shared routine to spawn UI text objects.
            </summary>
            <param name="parent">The parent object for the text.</param>
            <param name="style">The text style to use.</param>
            <param name="contents">The default text.</param>
            <returns>The child text object.</returns>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextComponent.FlexSize">
            <summary>
            The flexible size bounds of this component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextComponent.IconSpacing">
            <summary>
            The spacing between text and icon.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextComponent.MaintainSpriteAspect">
            <summary>
            If true, the sprite aspect ratio will be maintained even if it is resized.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextComponent.Margin">
            <summary>
            The margin around the component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextComponent.Sprite">
            <summary>
            The sprite to display, or null to display no sprite.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextComponent.SpriteMode">
            <summary>
            The image mode to use for the sprite.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextComponent.SpritePosition">
            <summary>
            The position to use for the sprite relative to the text.
            
            If TextAnchor.MiddleCenter is used, the image will directly overlap the text.
            Otherwise, it will be placed in the specified location relative to the text.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextComponent.SpriteSize">
            <summary>
            The size to scale the sprite. If 0x0, it will not be scaled.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextComponent.SpriteTint">
            <summary>
            The color to tint the sprite. For no tint, use Color.white.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextComponent.SpriteTransform">
            <summary>
            How to rotate or flip the sprite.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextComponent.Text">
            <summary>
            The component's text.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextComponent.TextAlignment">
            <summary>
            The text alignment in the component. Controls the placement of the text and sprite
            combination relative to the component's overall outline if the component is
            expanded from its default size.
            
            The text and sprite will move as a unit to follow this text alignment. Note that
            incorrect positions will result if this alignment is centered in the same direction
            as the sprite position offset, if both a sprite and text are defined.
            
            If the SpritePosition uses any variant of Left or Right, using UpperCenter,
            MiddleCenter, or LowerCenter for TextAlignment would result in undefined text and
            sprite positioning. Likewise, a SpritePosition using any variant of Lower or Upper
            would cause undefined positioning if TextAlignment was MiddleLeft, MiddleCenter,
            or MiddleRight.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextComponent.TextStyle">
            <summary>
            The component's text color, font, word wrap settings, and font size.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextComponent.ToolTip">
            <summary>
            The tool tip text.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextComponent.DestroyLayoutIfPossible(UnityEngine.GameObject)">
            <summary>
            If the flex size is zero and dynamic size is false, the layout group can be
            completely destroyed on a text component after the layout is locked.
            </summary>
            <param name="component">The realized text component.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextComponent.InvokeRealize(UnityEngine.GameObject)">
            <summary>
            Invokes the OnRealize event.
            </summary>
            <param name="obj">The realized text component.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextComponent.WrapTextAndSprite(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            Wraps the text and sprite into a single GameObject that properly positions them
            relative to each other, if necessary.
            </summary>
            <param name="text">The text component.</param>
            <param name="sprite">The sprite component.</param>
            <returns>A game object that contains both of them, or null if both are null.</returns>
        </member>
        <member name="T:PeterHan.PLib.UI.PTextField">
            <summary>
            A custom UI text field factory class.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextField.ConfigureField(TMPro.TextMeshProUGUI,TextStyleSetting,TMPro.TextAlignmentOptions)">
            <summary>
            Configures a Text Mesh Pro field.
            </summary>
            <param name="component">The text component to configure.</param>
            <param name="style">The desired text color, font, and style.</param>
            <param name="alignment">The text alignment.</param>
            <returns>The component, for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextField.GetText(UnityEngine.GameObject)">
            <summary>
            Gets a text field's text.
            </summary>
            <param name="textField">The UI element to retrieve.</param>
            <returns>The current text in the field.</returns>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextField.BackColor">
            <summary>
            The text field's background color.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextField.ContentType">
            <summary>
            Retrieves the built-in field type used for Text Mesh Pro.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextField.FlexSize">
            <summary>
            The flexible size bounds of this component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextField.MaxLength">
            <summary>
            The maximum number of characters in this text field.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextField.MinWidth">
            <summary>
            The minimum width in units (not characters!) of this text field.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextField.PlaceholderStyle">
            <summary>
            The placeholder text style (including color, font, and word wrap settings) if the
            field is empty.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextField.PlaceholderText">
            <summary>
            The placeholder text if the field is empty.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextField.TextAlignment">
            <summary>
            The text alignment in the text field.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextField.Text">
            <summary>
            The initial text in the text field.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextField.TextStyle">
            <summary>
            The text field's text color, font, word wrap settings, and font size.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextField.ToolTip">
            <summary>
            The tool tip text.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextField.Type">
            <summary>
            The field type.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextField.OnTextChanged">
            <summary>
            The action to trigger on text change. It is passed the realized source object.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextField.OnValidate">
            <summary>
            The callback to invoke when validating input.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextField.AddOnRealize(PeterHan.PLib.UI.PUIDelegates.OnRealize)">
            <summary>
            Adds a handler when this text field is realized.
            </summary>
            <param name="onRealize">The handler to invoke on realization.</param>
            <returns>This text field for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextField.ConfigureTextEntry(TMPro.TMP_InputField)">
            <summary>
            Sets up the text entry field.
            </summary>
            <param name="textEntry">The input field to configure.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextField.SetKleiPinkStyle">
            <summary>
            Sets the default Klei pink style as this text field's color and text style.
            </summary>
            <returns>This text field for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextField.SetKleiBlueStyle">
            <summary>
            Sets the default Klei blue style as this text field's color and text style.
            </summary>
            <returns>This text field for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextField.SetMinWidthInCharacters(System.Int32)">
            <summary>
            Sets the minimum (and preferred) width of this text field in characters.
            
            The width is computed using the currently selected text style.
            </summary>
            <param name="chars">The number of characters to be displayed.</param>
            <returns>This text field for call chaining.</returns>
        </member>
        <member name="T:PeterHan.PLib.UI.PTextField.FieldType">
            <summary>
            The valid text field types supported by this class.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.PTextFieldEvents">
            <summary>
            A class instance that handles events for text fields.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextFieldEvents.OnTextChanged">
            <summary>
            The action to trigger on text change. It is passed the realized source object.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextFieldEvents.OnValidate">
            <summary>
            The callback to invoke when validating input.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PTextFieldEvents.TextObject">
            <summary>
            The object to resize on text change.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PTextFieldEvents.editing">
            <summary>
            Whether editing is in progress.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextFieldEvents.DelayEndEdit">
            <summary>
            Completes the edit process one frame after the data is entered.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextFieldEvents.OnEndEdit(System.String)">
            <summary>
            Triggered when editing of the text ends (field loses focus).
            </summary>
            <param name="text">The text entered.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextFieldEvents.OnFocus">
            <summary>
            Triggered when the text field gains focus.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextFieldEvents.OnKeyDown(KButtonEvent)">
            <summary>
            Destroys events if editing is in progress to prevent bubbling through to the
            game UI.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextFieldEvents.OnKeyUp(KButtonEvent)">
            <summary>
            Destroys events if editing is in progress to prevent bubbling through to the
            game UI.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextFieldEvents.OnValueChanged(System.String)">
            <summary>
            Triggered when the text box value changes.
            </summary>
            <param name="text">The text entered.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PTextFieldEvents.StopEditing">
            <summary>
            Completes the edit process.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.PToggle">
            <summary>
            A custom UI toggled button factory class.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PToggle.TOGGLE_MARGIN">
            <summary>
            The default margins around a toggle.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PToggle.GetToggleState(UnityEngine.GameObject)">
            <summary>
            Gets a realized toggle button's state.
            </summary>
            <param name="realized">The realized toggle button.</param>
            <returns>The toggle button state.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PToggle.SetToggleState(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Sets a realized toggle button's state.
            </summary>
            <param name="realized">The realized toggle button.</param>
            <param name="on">Whether the button should be on or off.</param>
        </member>
        <member name="P:PeterHan.PLib.UI.PToggle.ActiveSprite">
            <summary>
            The sprite to display when active.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PToggle.Color">
            <summary>
            The toggle's color.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PToggle.FlexSize">
            <summary>
            The flexible size bounds of this component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PToggle.InactiveSprite">
            <summary>
            The sprite to display when inactive.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PToggle.InitialState">
            <summary>
            The initial state of the toggle button.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PToggle.Margin">
            <summary>
            The margin around the component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PToggle.OnStateChanged">
            <summary>
            The action to trigger when the state changes. It is passed the realized source
            object.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PToggle.Size">
            <summary>
            The size to scale the toggle images. If 0x0, it will not be scaled.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PToggle.ToolTip">
            <summary>
            The tool tip text.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PToggle.AddOnRealize(PeterHan.PLib.UI.PUIDelegates.OnRealize)">
            <summary>
            Adds a handler when this toggle button is realized.
            </summary>
            <param name="onRealize">The handler to invoke on realization.</param>
            <returns>This toggle button for call chaining.</returns>
        </member>
        <member name="T:PeterHan.PLib.UI.PUIDelegates">
            <summary>
            Delegate types used in the UI event system.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.PUIDelegates.OnDialogClosed">
            <summary>
            The delegate type invoked when a dialog is closed.
            </summary>
            <param name="option">The key of the chosen option, or PDialog.DIALOG_CLOSE_KEY if
            the dialog was closed with ESC or the X button.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.PUIDelegates.OnButtonPressed">
            <summary>
            The delegate type invoked when a button is pressed.
            </summary>
            <param name="source">The source button.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.PUIDelegates.OnChecked">
            <summary>
            The delegate type invoked when a checkbox is clicked.
            </summary>
            <param name="source">The source button.</param>
            <param name="state">The checkbox state.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.PUIDelegates.OnDropdownChanged`1">
            <summary>
            The delegate type invoked when an option is selected from a combo box.
            </summary>
            <param name="source">The source dropdown.</param>
            <param name="choice">The option chosen.</param>
            <typeparam name="T">The type of the objects in the drop down.</typeparam>
        </member>
        <member name="T:PeterHan.PLib.UI.PUIDelegates.OnRealize">
            <summary>
            The delegate type invoked when components are converted into Unity game objects.
            </summary>
            <param name="realized">The realized object.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.PUIDelegates.OnSliderChanged">
            <summary>
            The delegate type invoked once after a slider is changed and released.
            </summary>
            <param name="source">The source slider.</param>
            <param name="newValue">The new slider value.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.PUIDelegates.OnSliderDrag">
            <summary>
            The delegate type invoked while a slider is being changed.
            </summary>
            <param name="source">The source slider.</param>
            <param name="newValue">The new slider value.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.PUIDelegates.OnTextChanged">
            <summary>
            The delegate type invoked when text in a text field is changed.
            </summary>
            <param name="source">The source text field.</param>
            <param name="text">The new text.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.PUIDelegates.OnToggleButton">
            <summary>
            The delegate type invoked when a toggle button is swapped between states.
            </summary>
            <param name="source">The source button.</param>
            <param name="on">true if the button is toggled on, or false otherwise.</param>
        </member>
        <member name="T:PeterHan.PLib.UI.PUIElements">
            <summary>
            Used for creating and managing UI elements.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIElements.AddLocText(UnityEngine.GameObject,TextStyleSetting)">
            <summary>
            Safely adds a LocText to a game object without throwing an NRE on construction.
            </summary>
            <param name="parent">The game object to add the LocText.</param>
            <param name="setting">The text style.</param>
            <returns>The added LocText object.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIElements.AddSizeFitter(UnityEngine.GameObject,System.Boolean,UnityEngine.UI.ContentSizeFitter.FitMode,UnityEngine.UI.ContentSizeFitter.FitMode)">
            <summary>
            Adds an auto-fit resizer to a UI element.
            
            UI elements should be active before any layouts are added, especially if they are
            to be frozen.
            </summary>
            <param name="uiElement">The element to resize.</param>
            <param name="dynamic">true to use the Unity content size fitter which adjusts to
            content changes, or false to set the size only once.</param>
            <param name="modeHoriz">The sizing mode to use in the horizontal direction.</param>
            <param name="modeVert">The sizing mode to use in the vertical direction.</param>
            <returns>The UI element, for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIElements.CreateUI(UnityEngine.GameObject,System.String,System.Boolean,PeterHan.PLib.UI.PUIAnchoring,PeterHan.PLib.UI.PUIAnchoring)">
            <summary>
            Creates a UI game object.
            </summary>
            <param name="parent">The parent of the UI object. If not set now, or added/changed
            later, the anchors must be redefined.</param>
            <param name="name">The object name.</param>
            <param name="canvas">true to add a canvas renderer, or false otherwise.</param>
            <param name="horizAnchor">How to anchor the object horizontally.</param>
            <param name="vertAnchor">How to anchor the object vertically.</param>
            <returns>The UI object with transform and canvas initialized.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIElements.DoNothing">
            <summary>
            Does nothing, to make the buttons appear.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIElements.FitSizeNow(UnityEngine.GameObject,UnityEngine.UI.ContentSizeFitter.FitMode,UnityEngine.UI.ContentSizeFitter.FitMode)">
            <summary>
            Fits the UI element's size immediately, as if ContentSizeFitter was created on it,
            but does not create a component and only affects the size once.
            </summary>
            <param name="uiElement">The element to resize.</param>
            <param name="modeHoriz">The sizing mode to use in the horizontal direction.</param>
            <param name="modeVert">The sizing mode to use in the vertical direction.</param>
            <returns>The UI element, for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIElements.SetAnchors(UnityEngine.GameObject,PeterHan.PLib.UI.PUIAnchoring,PeterHan.PLib.UI.PUIAnchoring)">
            <summary>
            Sets the anchor location of a UI element. The offsets will be reset, use
            SetAnchorOffsets to adjust the offset from the new anchor locations.
            </summary>
            <param name="uiElement">The UI element to modify.</param>
            <param name="horizAnchor">The horizontal anchor mode.</param>
            <param name="vertAnchor">The vertical anchor mode.</param>
            <returns>The UI element, for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIElements.SetAnchorOffsets(UnityEngine.GameObject,UnityEngine.RectOffset)">
            <summary>
            Sets the offsets of the UI component from its anchors. Positive for each value
            denotes towards the component center, and negative away from the component center.
            </summary>
            <param name="uiElement">The UI element to modify.</param>
            <param name="border">The offset of each corner from the anchors.</param>
            <returns>The UI element, for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIElements.SetAnchorOffsets(UnityEngine.GameObject,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the offsets of the UI component from its anchors. Positive for each value
            denotes towards the component center, and negative away from the component center.
            </summary>
            <param name="uiElement">The UI element to modify.</param>
            <param name="left">The left border in pixels.</param>
            <param name="right">The right border in pixels.</param>
            <param name="top">The top border in pixels.</param>
            <param name="bottom">The bottom border in pixels.</param>
            <returns>The UI element, for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIElements.SetText(UnityEngine.GameObject,System.String)">
            <summary>
            Sets a UI element's text.
            </summary>
            <param name="uiElement">The UI element to modify.</param>
            <param name="text">The text to display on the element.</param>
            <returns>The UI element, for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIElements.SetToolTip(UnityEngine.GameObject,System.String)">
            <summary>
            Sets a UI element's tool tip.
            </summary>
            <param name="uiElement">The UI element to modify.</param>
            <param name="tooltip">The tool tip text to display when hovered.</param>
            <returns>The UI element, for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIElements.ShowConfirmDialog(UnityEngine.GameObject,System.String,System.Action,System.Action,System.String,System.String)">
            <summary>
            Shows a confirmation dialog.
            </summary>
            <param name="parent">The dialog's parent.</param>
            <param name="message">The message to display.</param>
            <param name="onConfirm">The action to invoke if Yes or OK is selected.</param>
            <param name="onCancel">The action to invoke if No or Cancel is selected.</param>
            <param name="confirmText">The text for the OK/Yes button.</param>
            <param name="cancelText">The text for the Cancel/No button.</param>
            <returns>The dialog created.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIElements.ShowMessageDialog(UnityEngine.GameObject,System.String)">
            <summary>
            Shows a message dialog.
            </summary>
            <param name="parent">The dialog's parent.</param>
            <param name="message">The message to display.</param>
            <returns>The dialog created.</returns>
        </member>
        <member name="T:PeterHan.PLib.UI.PUIAnchoring">
            <summary>
            The anchor mode to set a UI component.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.PUITuning">
            <summary>
            Sets up common parameters for the UI in PLib based mods. Note that this class is still
            specific to individual mods so the values in the latest PLib will not supersede them.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.PUITuning.Images">
            <summary>
            UI images.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Images.Arrow">
            <summary>
            The right arrow image. Rotate it in the Image to get more directions.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Images.BoxBorder">
            <summary>
            The image used to make a 1px solid black border.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Images.BoxBorderWhite">
            <summary>
            The image used to make a 1px solid white border.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Images.ButtonBorder">
            <summary>
            The default image used for button appearance.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Images.CheckBorder">
            <summary>
            The border image around a checkbox.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Images.Checked">
            <summary>
            The image for a check box which is checked.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Images.Close">
            <summary>
            The image used for dialog close buttons.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Images.Contract">
            <summary>
            The image for contracting a category.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Images.Expand">
            <summary>
            The image for expanding a category.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Images.Partial">
            <summary>
            The image for a check box which is neither checked nor unchecked.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Images.ScrollBorderHorizontal">
            <summary>
            The border of a horizontal scroll bar.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Images.ScrollHandleHorizontal">
            <summary>
            The handle of a horizontal scroll bar.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Images.ScrollBorderVertical">
            <summary>
            The border of a vertical scroll bar.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Images.ScrollHandleVertical">
            <summary>
            The handle of a vertical scroll bar.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Images.SliderHandle">
            <summary>
            The handle of a horizontal slider.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PUITuning.Images.SPRITES">
            <summary>
            The sprite dictionary.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PUITuning.Images.GetSpriteByName(System.String)">
            <summary>
            Retrieves a sprite by its name.
            </summary>
            <param name="name">The sprite name.</param>
            <returns>The matching sprite, or null if no sprite found in the resources has that name.</returns>
        </member>
        <member name="T:PeterHan.PLib.UI.PUITuning.Colors">
            <summary>
            UI colors.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Colors.BackgroundLight">
            <summary>
            A white color used for default backgrounds.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Colors.ButtonPinkStyle">
            <summary>
            The color styles used on pink buttons.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Colors.ButtonBlueStyle">
            <summary>
            The color styles used on blue buttons.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Colors.ComponentDarkStyle">
            <summary>
            The default colors used on check boxes / toggles with dark backgrounds.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Colors.ComponentLightStyle">
            <summary>
            The default colors used on check boxes / toggles with white backgrounds.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Colors.DialogBackground">
            <summary>
            The color displayed on dialog backgrounds.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Colors.DialogDarkBackground">
            <summary>
            The color displayed in the large border around the outsides of options dialogs.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Colors.OptionsBackground">
            <summary>
            The color displayed on options dialog backgrounds.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Colors.ScrollbarColors">
            <summary>
            The color displayed on scrollbar handles.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Colors.SelectionBackground">
            <summary>
            The background color for selections.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Colors.SelectionForeground">
            <summary>
            The foreground color for selections.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Colors.Transparent">
            <summary>
            A completely transparent color.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Colors.UITextDark">
            <summary>
            Used for dark-colored UI text.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Colors.UITextLight">
            <summary>
            Used for light-colored UI text.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.PUITuning.Fonts">
            <summary>
            Collects references to fonts in the game.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PUITuning.Fonts.DEFAULT_FONT_TEXT">
            <summary>
            The text font name.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PUITuning.Fonts.DEFAULT_FONT_UI">
            <summary>
            The UI font name.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Fonts.DefaultSize">
            <summary>
            The default font size.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PUITuning.Fonts.DefaultTextFont">
            <summary>
            The default font asset for text strings.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PUITuning.Fonts.DefaultUIFont">
            <summary>
            The default font asset for UI titles and buttons.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Fonts.Text">
            <summary>
            The font used on text.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Fonts.TextDarkStyle">
            <summary>
            The text styles used on all items with a light background.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Fonts.TextLightStyle">
            <summary>
            The text styles used on all items with a dark background.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Fonts.UI">
            <summary>
            The font used on UI elements.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Fonts.UIDarkStyle">
            <summary>
            The text styles used on all UI items with a light background.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.Fonts.UILightStyle">
            <summary>
            The text styles used on all UI items with a dark background.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.PUITuning.Fonts.FONTS">
            <summary>
            The font dictionary.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PUITuning.Fonts.GetFontByName(System.String)">
            <summary>
            Retrieves a font by its name.
            </summary>
            <param name="name">The font name.</param>
            <returns>The matching font, or null if no font found in the resources has that name.</returns>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.ButtonSounds">
            <summary>
            The sounds played by the button.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.UI.PUITuning.ToggleSounds">
            <summary>
            The sounds played by the toggle.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.PUIUtils">
            <summary>
            Utility functions for dealing with Unity UIs.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.AddComponentText(System.Text.StringBuilder,UnityEngine.Component)">
            <summary>
            Adds text describing a particular component if available.
            </summary>
            <param name="result">The location to append the text.</param>
            <param name="component">The component to describe.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.AddPinkOverlay(UnityEngine.GameObject)">
            <summary>
            Adds a hot pink rectangle over the target matching its size, to help identify it
            better.
            </summary>
            <param name="parent">The target UI component.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.AddSideScreenContent``1(UnityEngine.GameObject)">
            <summary>
            Adds the specified side screen content to the side screen list. The side screen
            behavior should be defined in a class inherited from SideScreenContent.
            
            The side screen will be added at the end of the list, which will cause it to
            appear above previous side screens in the details panel.
            
            This method should be used in a postfix on DetailsScreen.OnPrefabInit.
            </summary>
            <typeparam name="T">The type of the controller that will determine how the side
            screen works. A new instance will be created and added as a component to the new
            side screen.</typeparam>
            <param name="uiPrefab">The UI prefab to use. If null is passed, the UI should
            be created and added to the GameObject hosting the controller object in its
            constructor.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.AddSideScreenContentWithOrdering``1(System.String,System.Boolean,UnityEngine.GameObject)">
            <summary>
            Adds the specified side screen content to the side screen list. The side screen
            behavior should be defined in a class inherited from SideScreenContent.
            
            This method should be used in a postfix on DetailsScreen.OnPrefabInit.
            </summary>
            <typeparam name="T">The type of the controller that will determine how the side
            screen works. A new instance will be created and added as a component to the new
            side screen.</typeparam>
            <param name="targetClassName">The full name of the type of side screen to based to ordering 
            around. An example of how this method can be used is:
            `AddSideScreenContentWithOrdering&lt;MySideScreen&gt;(typeof(CapacityControlSideScreen).FullName);`
            `typeof(TargetedSideScreen).FullName` is the suggested value of this parameter.
            Side screens from other mods can be used with their qualified names, even if no
            reference to their type is available, but the target mod must have added their
            custom side screen to the list first.</param>
            <param name="insertBefore">Whether to insert the new screen before or after the
            target side screen in the list. Defaults to before (true).
            When inserting before the screen, if both are valid for a building then the side
            screen of type "T" will show below the one of type "fullName". When inserting after
            the screen, the reverse is true.</param>
            <param name="uiPrefab">The UI prefab to use. If null is passed, the UI should
            be created and added to the GameObject hosting the controller object in its
            constructor.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.AddTo(PeterHan.PLib.UI.IUIComponent,UnityEngine.GameObject,System.Int32)">
            <summary>
            Builds a PLib UI object and adds it to an existing UI object.
            </summary>
            <param name="component">The UI object to add.</param>
            <param name="parent">The parent of the new object.</param>
            <param name="index">The sibling index to insert the element at, if provided.</param>
            <returns>The built version of the UI object.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.CalcSizes(UnityEngine.GameObject,PeterHan.PLib.UI.PanelDirection,System.Collections.Generic.IEnumerable{UnityEngine.Component})">
            <summary>
            Calculates the size of a single game object.
            </summary>
            <param name="obj">The object to calculate.</param>
            <param name="direction">The direction to calculate.</param>
            <param name="components">The components of this game object.</param>
            <returns>The object's minimum and preferred size.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.DebugObjectHierarchy(UnityEngine.GameObject)">
            <summary>
            Dumps information about the parent tree of the specified GameObject to the debug
            log.
            </summary>
            <param name="item">The item to determine hierarchy.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.DebugObjectTree(UnityEngine.GameObject)">
            <summary>
            Dumps information about the specified GameObject to the debug log.
            </summary>
            <param name="root">The root hierarchy to dump.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.DeriveStyle(TextStyleSetting,System.Int32,System.Nullable{UnityEngine.Color},System.Nullable{TMPro.FontStyles})">
            <summary>
            Derives a font style from an existing style. The font face is copied unchanged,
            but the other settings can be optionally modified.
            </summary>
            <param name="root">The style to use as a template.</param>
            <param name="size">The font size, or 0 to use the template size.</param>
            <param name="newColor">The font color, or null to use the template color.</param>
            <param name="style">The font style, or null to use the template style.</param>
            <returns>A copy of the root style with the specified parameters altered.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.ForceLayoutRebuild(UnityEngine.GameObject)">
            <summary>
            A debug function used to forcefully re-layout a UI.
            </summary>
            <param name="uiElement">The UI to layout</param>
            <returns>The UI element, for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.GetEmWidth(TextStyleSetting)">
            <summary>
            Retrieves the estimated width of a single string character (uses 'm' as the
            standard estimation character) in the given text style.
            </summary>
            <param name="style">The text style to use.</param>
            <returns>The width in pixels that should be allocated.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.GetLineHeight(TextStyleSetting)">
            <summary>
            Retrieves the estimated height of one line of text in the given text style.
            </summary>
            <param name="style">The text style to use.</param>
            <returns>The height in pixels that should be allocated.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.GetObjectTree(UnityEngine.GameObject,System.Int32)">
            <summary>
            Creates a string recursively describing the specified GameObject.
            </summary>
            <param name="root">The root GameObject hierarchy.</param>
            <param name="indent">The indentation to use.</param>
            <returns>A string describing this game object.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.GetProperSize(PeterHan.PLib.UI.LayoutSizes,System.Single)">
            <summary>
            Determines the size for a component on a particular axis.
            </summary>
            <param name="sizes">The declared sizes.</param>
            <param name="allocated">The space allocated.</param>
            <returns>The size that the component should be.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.GetOffset(UnityEngine.TextAnchor,PeterHan.PLib.UI.PanelDirection,System.Single)">
            <summary>
            Gets the offset required for a component in its box.
            </summary>
            <param name="alignment">The alignment to use.</param>
            <param name="direction">The direction of layout.</param>
            <param name="delta">The remaining space.</param>
            <returns>The offset from the edge.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.GetParent(UnityEngine.GameObject)">
            <summary>
            Retrieves the parent of the GameObject, or null if it does not have a parent.
            </summary>
            <param name="child">The child object.</param>
            <returns>The parent of that object, or null if it does not have a parent.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.GetSideScreenContent(DetailsScreen)">
            <summary>
            Retrieves the side screen content body in a way that works across game versions.
            Always uses the config side screen (where custom ones end up) body in recent
            versions of the game.
            </summary>
            <param name="screen">The current details screen instance.</param>
            <returns>The content body where side screen content should be added.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.InsetChild(UnityEngine.GameObject,UnityEngine.GameObject,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Insets a child component from its parent, and assigns a fixed size to the parent
            equal to the provided size plus the insets.
            </summary>
            <param name="parent">The parent component.</param>
            <param name="child">The child to inset.</param>
            <param name="insets">The insets on each side.</param>
            <param name="prefSize">The minimum component size.</param>
            <returns>The parent component.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.InsertSideScreenContent(System.Collections.Generic.IList{DetailsScreen.SideScreenRef},DetailsScreen.SideScreenRef,System.String,System.Boolean)">
            <summary>
            Inserts the side screen at the target location.
            </summary>
            <param name="screens">The current list of side screens.</param>
            <param name="newScreen">The screen to insert.</param>
            <param name="targetClassName">The target class name for locating the screen. If this
            class is not found, it will be added at the end regardless of insertBefore.</param>
            <param name="insertBefore">true to insert before that class, or false to insert after.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.LoadSprite(System.String,UnityEngine.Vector4,System.Boolean)">
            <summary>
            Loads a sprite embedded in the calling assembly.
            
            It may be encoded using PNG, DXT5, or JPG format.
            </summary>
            <param name="path">The fully qualified path to the image to load.</param>
            <param name="border">The sprite border. If there is no 9-patch border, use default(Vector4).</param>
            <param name="log">true to log the sprite load, or false to load silently.</param>
            <returns>The sprite thus loaded.</returns>
            <exception cref="T:System.ArgumentException">If the image could not be loaded.</exception>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.LoadSprite(System.Reflection.Assembly,System.String,UnityEngine.Vector4,System.Boolean)">
            <summary>
            Loads a sprite embedded in the specified assembly as a 9-slice sprite.
            
            It may be encoded using PNG, DXT5, or JPG format.
            </summary>
            <param name="assembly">The assembly containing the image.</param>
            <param name="path">The fully qualified path to the image to load.</param>
            <param name="border">The sprite border.</param>
            <param name="log">true to log the load, or false otherwise.</param>
            <returns>The sprite thus loaded.</returns>
            <exception cref="T:System.ArgumentException">If the image could not be loaded.</exception>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.LoadSpriteFile(System.String,UnityEngine.Vector4)">
            <summary>
            Loads a sprite from the file system as a 9-slice sprite.
            
            It may be encoded using PNG, DXT5, or JPG format.
            </summary>
            <param name="path">The path to the image to load.</param>
            <param name="border">The sprite border.</param>
            <returns>The sprite thus loaded, or null if it could not be loaded.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.LoadSpriteLegacy(System.Reflection.Assembly,System.String,System.Int32,System.Int32,UnityEngine.Vector4)">
            <summary>
            Loads a DDS sprite embedded in the specified assembly as a 9-slice sprite.
            
            It must be encoded using the DXT5 format.
            </summary>
            <param name="assembly">The assembly containing the image.</param>
            <param name="path">The fully qualified path to the DDS image to load.</param>
            <param name="width">The desired width.</param>
            <param name="height">The desired height.</param>
            <param name="border">The sprite border.</param>
            <returns>The sprite thus loaded.</returns>
            <exception cref="T:System.ArgumentException">If the image could not be loaded.</exception>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.ReadAllBytes(System.IO.Stream,System.Byte[])">
            <summary>
            Reads as much of the array as possible from a stream.
            </summary>
            <param name="stream">The stream to be read.</param>
            <param name="data">The location to store the data read.</param>
            <returns>The number of bytes actually read.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.LogUIDebug(System.String)">
            <summary>
            Logs a debug message encountered in PLib UI functions.
            </summary>
            <param name="message">The debug message.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.LogUIWarning(System.String)">
            <summary>
            Logs a warning encountered in PLib UI functions.
            </summary>
            <param name="message">The warning message.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.PriValue(System.Single@,System.Single,System.Int32,System.Int32@)">
            <summary>
            Aggregates layout values, replacing the value if a higher priority value is given
            and otherwise taking the largest value.
            </summary>
            <param name="value">The current value.</param>
            <param name="newValue">The candidate new value. No operation if this is less than zero.</param>
            <param name="newPri">The new value's layout priority.</param>
            <param name="pri">The current value's priority</param>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.SetFlexUISize(UnityEngine.GameObject,UnityEngine.Vector2)">
            <summary>
            Sets a UI element's flexible size.
            </summary>
            <param name="uiElement">The UI element to modify.</param>
            <param name="flexSize">The flexible size as a ratio.</param>
            <returns>The UI element, for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.SetMinUISize(UnityEngine.GameObject,UnityEngine.Vector2)">
            <summary>
            Sets a UI element's minimum size.
            </summary>
            <param name="uiElement">The UI element to modify.</param>
            <param name="minSize">The minimum size in units.</param>
            <returns>The UI element, for call chaining.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.PUIUtils.SetUISize(UnityEngine.GameObject,UnityEngine.Vector2,System.Boolean)">
            <summary>
            Immediately resizes a UI element. Uses the element's current anchors. If a
            dimension of the size is negative, the component will not be resized in that
            dimension.
            
            If addLayout is true, a layout element is also added so that future auto layout
            calls will try to maintain that size. Do not set addLayout to true if either of
            the size dimensions are negative, as laying out components with a negative
            preferred size may cause unexpected behavior.
            </summary>
            <param name="uiElement">The UI element to modify.</param>
            <param name="size">The new element size.</param>
            <param name="addLayout">true to add a layout element with that size, or false
            otherwise.</param>
            <returns>The UI element, for call chaining.</returns>
        </member>
        <member name="T:PeterHan.PLib.UI.TextAnchorUtils">
            <summary>
            Extension methods to deal with TextAnchor alignments.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.TextAnchorUtils.IsLeft(UnityEngine.TextAnchor)">
            <summary>
            Returns true if this text alignment is at the left.
            </summary>
            <param name="anchor">The anchoring to check.</param>
            <returns>true if it denotes a Left alignment, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.TextAnchorUtils.IsLower(UnityEngine.TextAnchor)">
            <summary>
            Returns true if this text alignment is at the bottom.
            </summary>
            <param name="anchor">The anchoring to check.</param>
            <returns>true if it denotes a Lower alignment, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.TextAnchorUtils.IsRight(UnityEngine.TextAnchor)">
            <summary>
            Returns true if this text alignment is at the right.
            </summary>
            <param name="anchor">The anchoring to check.</param>
            <returns>true if it denotes a Right alignment, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.TextAnchorUtils.IsUpper(UnityEngine.TextAnchor)">
            <summary>
            Returns true if this text alignment is at the top.
            </summary>
            <param name="anchor">The anchoring to check.</param>
            <returns>true if it denotes an Upper alignment, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.TextAnchorUtils.MirrorHorizontal(UnityEngine.TextAnchor)">
            <summary>
            Mirrors a text alignment horizontally. UpperLeft becomes UpperRight, MiddleLeft
            becomes MiddleRight, and so forth.
            </summary>
            <param name="anchor">The anchoring to mirror.</param>
            <returns>The horizontally reflected version of that mirror.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.TextAnchorUtils.MirrorVertical(UnityEngine.TextAnchor)">
            <summary>
            Mirrors a text alignment vertically. UpperLeft becomes LowerLeft, LowerCenter
            becomes UpperCenter, and so forth.
            </summary>
            <param name="anchor">The anchoring to mirror.</param>
            <returns>The vertically reflected version of that mirror.</returns>
        </member>
        <member name="T:PeterHan.PLib.UI.UIDetours">
            <summary>
            Stores detours used for Klei UI components. Klei loves adding optional parameters and
            changing fields to/from properties, which while source compatible is binary
            incompatible. These lazy detours (resolved on first use) can bridge over a variety of
            such differences with minimal overhead and no recompilation.
            </summary>
        </member>
    </members>
</doc>